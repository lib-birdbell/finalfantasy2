.include "Constants.inc"
.include "variables.inc"

.export	Update_char_equip 	;9880
.export	Init_map		;9C00
.export	Init_wmap		;9C03
.export	Set_wmap_palettes	;9C06
.export	Init_var		;9C09
.export bg_tilemap_id		;B200
.export wmap_ent_x		;B400
.export wmap_ent_y		;B440
.export wmap_ent_id		;B480

.import Wait_NMI_end		;FD46

.import	Armor_prop		;8000 - BANK_0C
.import	Weapon_prop		;80F6 - BANK_0C


.segment "BANK_00"

; Commented out due to  compilation order change.
;.incbin "nesheader.bin"

; ========== World map tile properties ($8000-$80FF) START ==========
;; [$8000 :: 0x00000]
Wmap_tile_prop:
.byte $0D,$00,$0D,$00,$0E,$00,$0E,$00,$0F,$00,$0F,$00,$0D,$00,$0F,$00
.byte $0F,$00,$0F,$00,$0E,$00,$1E,$00,$0E,$00,$0E,$00,$0B,$00,$0E,$00
.byte $0D,$00,$0D,$00,$0E,$00,$0E,$00,$0F,$00,$0F,$00,$0E,$00,$0F,$00
.byte $0F,$00,$0F,$00,$1E,$00,$1E,$00,$1E,$00,$0B,$00,$0B,$00,$0B,$00
.byte $06,$00,$06,$00,$0E,$00,$0E,$00,$06,$00,$0E,$00,$0D,$00,$0F,$00
.byte $0F,$00,$0F,$00,$0E,$00,$1E,$00,$0E,$00,$0E,$00,$0B,$00,$0E,$00
.byte $06,$00,$06,$00,$0E,$00,$0E,$00,$06,$00,$0E,$00,$0F,$00,$0F,$00
.byte $0F,$00,$0F,$00,$0F,$00,$4F,$02,$4F,$02,$0F,$00,$0F,$00,$06,$00
.byte $0F,$00,$0F,$00,$0F,$00,$0F,$00,$06,$00,$0F,$00,$0F,$00,$0F,$00
.byte $0F,$00,$0F,$00,$0F,$00,$0F,$00,$0E,$00,$0E,$00,$0F,$00,$0F,$00
.byte $0F,$00,$0F,$00,$0F,$00,$0F,$00,$0F,$00,$0F,$00,$0F,$00,$4E,$04
.byte $4B,$00,$4E,$01,$0E,$00,$46,$03,$0F,$00,$8E,$13,$8E,$0B,$8E,$08
.byte $8E,$07,$8E,$19,$8E,$0C,$0E,$00,$0F,$00,$0F,$00,$0F,$00,$8E,$0D
.byte $0F,$14,$0E,$00,$0E,$00,$8E,$05,$8E,$06,$8E,$15,$0E,$00,$8E,$1A
.byte $8E,$0F,$8E,$0F,$8E,$1D,$8E,$10,$8E,$10,$8E,$0E,$8E,$0E,$0F,$00
.byte $0F,$00,$8E,$18,$8E,$09,$8E,$11,$8E,$01,$8E,$03,$8E,$04,$8E,$02
; ========== World map tile properties ($8000-$80FF) END ==========


; ========== World map tileset ($8100-$82FF) START ==========
;; [$8100 :: 0x00100]
Wmap_tileset1:
.byte $49,$48,$4E,$50,$1B,$65,$48,$01,$03,$05,$01,$1D,$1F,$30,$44,$32
.byte $48,$48,$54,$4D,$5E,$5A,$4D,$0A,$07,$07,$24,$21,$21,$40,$35,$35
.byte $78,$76,$6F,$6B,$74,$6B,$5A,$12,$07,$1B,$2A,$21,$21,$38,$35,$35
.byte $79,$74,$6B,$6B,$01,$73,$07,$5C,$07,$61,$B1,$01,$01,$03,$C7,$01
.byte $7F,$80,$80,$82,$7E,$7E,$84,$80,$80,$8B,$C0,$01,$95,$99,$80,$C7
.byte $B9,$01,$C3,$CB,$CD,$01,$01,$99,$35,$01,$FF,$01,$00,$0F,$0F,$21
.byte $91,$0F,$0F,$FF,$A9,$EB,$ED,$9D,$B5,$7A,$FF,$9D,$A1,$8D,$FF,$0F
.byte $E0,$E2,$49,$E0,$E2,$E4,$E6,$D8,$E6,$DF,$AD,$CA,$A1,$9D,$A1,$91
.byte $48,$4A,$4F,$51,$66,$1A,$48,$02,$04,$01,$1C,$1E,$01,$31,$45,$33
.byte $48,$48,$4D,$55,$5A,$5B,$4D,$08,$08,$0D,$22,$22,$27,$36,$36,$41
.byte $79,$77,$6C,$70,$75,$6C,$5A,$1A,$08,$15,$22,$22,$2B,$36,$36,$3B
.byte $75,$76,$6C,$6C,$01,$73,$08,$5D,$62,$08,$B2,$01,$01,$C6,$04,$00
.byte $80,$80,$81,$7E,$7E,$83,$80,$85,$8B,$80,$C1,$01,$96,$9A,$C6,$80
.byte $BA,$C2,$01,$CC,$CE,$01,$01,$9A,$36,$01,$FF,$01,$00,$10,$10,$22
.byte $92,$10,$10,$FF,$AA,$EC,$EE,$9E,$B6,$7B,$FF,$9E,$A2,$8E,$FF,$10
.byte $E1,$E3,$4A,$E1,$E3,$E5,$E7,$E5,$D9,$EF,$AE,$EA,$A2,$9E,$A2,$92
;; [$8200 :: 0x00200]
Wmap_tileset2:
.byte $48,$48,$52,$4D,$6A,$5A,$48,$06,$0B,$0B,$20,$25,$25,$34,$39,$39
.byte $4B,$48,$56,$58,$0B,$5F,$4D,$0E,$0B,$0B,$28,$25,$25,$42,$39,$39
.byte $79,$75,$6D,$6D,$75,$6D,$5A,$01,$17,$19,$01,$2D,$2F,$3C,$46,$3E
.byte $78,$76,$71,$6D,$01,$73,$68,$0B,$0B,$63,$B3,$01,$C5,$C8,$CF,$01
.byte $89,$87,$87,$82,$7E,$7E,$86,$87,$87,$8C,$D0,$D2,$97,$9B,$D4,$D6
.byte $B9,$BB,$BD,$DB,$DD,$01,$C5,$9B,$39,$01,$FF,$01,$00,$13,$13,$25
.byte $93,$13,$13,$FF,$AB,$FB,$FD,$9F,$B7,$7C,$FF,$9F,$A3,$8F,$FF,$13
.byte $F0,$F2,$4B,$F0,$F2,$F4,$F6,$E8,$F9,$DF,$AF,$DA,$A3,$9F,$A3,$93
.byte $48,$48,$4D,$53,$5A,$67,$48,$0C,$0C,$09,$26,$26,$23,$3A,$3A,$37
.byte $48,$4C,$57,$59,$60,$0C,$4D,$0C,$0C,$11,$26,$26,$29,$3A,$3A,$43
.byte $74,$76,$6E,$6E,$74,$6E,$5A,$16,$18,$01,$2C,$2E,$01,$3D,$47,$3F
.byte $79,$77,$6E,$72,$01,$73,$69,$0C,$64,$0C,$B4,$C4,$01,$BF,$C9,$00
.byte $87,$87,$8A,$7E,$7E,$83,$87,$88,$8C,$87,$D1,$D3,$98,$9C,$D5,$D7
.byte $BA,$BC,$BE,$DC,$DE,$C4,$01,$9C,$3A,$01,$FF,$01,$00,$14,$14,$26
.byte $94,$14,$14,$FF,$AC,$FC,$FE,$A0,$B8,$7D,$FF,$A0,$A4,$90,$FF,$14
.byte $F1,$F3,$4C,$F1,$F3,$F5,$F7,$F8,$E9,$EF,$B0,$FA,$A4,$A0,$A4,$94
; ========== World map tileset ($8100-$82FF) END ==========


; ========== World map attribute table ($8300-$837F) START ==========
;; [$8300 :: 0x00300]
Wmap_attr_tbl:
.byte $AA,$AA,$55,$55,$00,$00,$AA,$00,$00,$00,$FF,$FF,$FF,$AA,$AA,$AA
.byte $AA,$AA,$55,$55,$00,$00,$55,$00,$00,$00,$FF,$FF,$FF,$AA,$AA,$AA
.byte $FF,$FF,$AA,$AA,$FF,$AA,$00,$00,$00,$00,$FF,$FF,$FF,$AA,$AA,$AA
.byte $FF,$FF,$AA,$AA,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $AA,$00,$00,$00,$00,$00,$00,$00,$AA,$00,$00,$00,$00,$00,$00,$FF
.byte $00,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$AA,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00
; ========== World map attribute table ($8300-$837F) END ==========


; ========== World map palettes (8 * 4 bytes) ($8380-$839F) START ==========
;; [$8380 :: 0x0039F]
Wmap_pal:
.byte $0F,$1A,$10,$30,$0F,$1A,$27,$37,$0F,$1A,$31,$21,$0F,$1A,$19,$29
.byte $0F,$0F,$12,$36,$0F,$0F,$1C,$36,$0F,$0F,$27,$30,$0F,$16,$26,$30
; ========== World map palettes (8 * 4 bytes) ($8380-$839F) END ==========


; ========== Map character palettes (9 * 2 bytes) ($83A0-$83B1) START ==========
;; [$83A0 :: 0x003B1]
Map_char_pal:
.byte $16,$16,$27,$16,$27,$12,$30,$30,$27,$12,$27,$16,$27,$13,$30,$30
.byte $16,$12
; ========== Map character palettes (9 * 2 bytes) ($83A0-$83B1) END ==========


; ========== Menu sprite palettes (4 * 4 bytes) ($83B2-$83C1) START ==========
; OAM palettes [$83B2-$83C1]
.byte $0F,$23,$16,$30,$0F,$17,$27,$30,$0F,$12,$17,$37,$0F,$00,$10,$30
; ========== Menu sprite palettes (4 * 4 bytes) ($83B2-$83C1) END ==========


; ========== Fill tile attributes ($83C2-$83C9) START ==========
;; $83C2
Fill_tile_attr:
.byte $55,$00,$00,$AA,$00,$00,$00,$55
; ========== Fill tile attributes ($83C2-$83C9) END ==========


;; [$03CA-$03FF] UNUSED
.byte $00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00


; ========== exterior 16x16 tileset (4 * 64 bytes) ($8400-$84FF) START ==========
;; [$8400 :: 0x00400]
Exterior16:
.byte $1B,$19,$17,$1E,$1F,$22,$44,$28,$46,$42,$48,$60,$02,$20,$30,$30
.byte $2C,$FF,$4C,$40,$68,$64,$00,$5A,$1D,$1D,$12,$14,$FF,$2A,$4A,$24
.byte $6A,$4E,$6C,$FF,$FF,$FF,$FF,$FF,$24,$FF,$FF,$FF,$FF,$FF,$FF,$2E
.byte $14,$FF,$2E,$02,$56,$FF,$FF,$5A,$00,$FF,$06,$FF,$FF,$FF,$56,$FF
.byte $1C,$1A,$1A,$1E,$1F,$23,$45,$29,$47,$43,$49,$61,$03,$20,$20,$20
.byte $2D,$FF,$4D,$41,$68,$65,$01,$5B,$5B,$5B,$13,$13,$FF,$2B,$4B,$25
.byte $6B,$4F,$6D,$FF,$FF,$FF,$FF,$FF,$25,$FF,$FF,$FF,$FF,$FF,$FF,$2F
.byte $13,$FF,$2F,$03,$57,$FF,$FF,$5B,$01,$FF,$07,$FF,$FF,$FF,$57,$FF
.byte $1C,$1A,$18,$1F,$1F,$32,$54,$38,$26,$52,$36,$62,$04,$20,$30,$31
.byte $3C,$FF,$5C,$50,$69,$66,$00,$5B,$1D,$21,$13,$15,$FF,$3A,$4A,$34
.byte $6A,$5E,$3C,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FF,$FF,$FF,$FF,$FF,$3E
.byte $16,$FF,$3E,$04,$58,$FF,$FF,$5B,$00,$FF,$08,$FF,$FF,$FF,$58,$FF
.byte $1B,$19,$19,$1F,$1F,$33,$55,$39,$27,$53,$37,$63,$05,$20,$20,$20
.byte $3D,$FF,$5D,$51,$69,$67,$01,$5A,$5A,$5A,$12,$12,$FF,$3B,$4B,$35
.byte $6B,$5F,$3D,$FF,$FF,$FF,$FF,$FF,$35,$FF,$FF,$FF,$FF,$FF,$FF,$3F
.byte $12,$FF,$3F,$05,$59,$FF,$FF,$5A,$01,$FF,$09,$FF,$FF,$FF,$59,$FF
; ========== exterior 16x16 tileset (4 * 64 bytes) ($8400-$84FF) END ==========


; ========== interior 16x16 tileset (4 * 64 bytes) ($8500-$85FF) START ==========
;; [$8500 :: 0x00500]
Interior16:
.byte $26,$2A,$32,$36,$3A,$3E,$42,$46,$4A,$4E,$52,$44,$56,$5A,$5E,$62
.byte $1C,$1C,$63,$64,$3E,$1F,$00,$6A,$2E,$12,$44,$66,$5E,$62,$63,$63
.byte $66,$02,$02,$4E,$6A,$00,$52,$2E,$2E,$52,$12,$2E,$12,$63,$00,$18
.byte $16,$14,$18,$26,$13,$13,$02,$52,$00,$20,$06,$06,$13,$13,$56,$00
.byte $27,$2B,$33,$37,$3B,$3F,$43,$47,$4B,$4F,$53,$45,$57,$5B,$5F,$63
.byte $1D,$1D,$64,$63,$3F,$1F,$01,$6B,$2F,$12,$45,$67,$5F,$63,$63,$62
.byte $67,$03,$03,$4F,$6B,$01,$53,$2F,$2F,$53,$12,$2F,$12,$63,$01,$19
.byte $12,$12,$19,$27,$16,$14,$03,$53,$01,$21,$07,$07,$16,$14,$57,$01
.byte $28,$2C,$34,$38,$3C,$40,$44,$48,$4C,$50,$54,$44,$58,$5C,$60,$64
.byte $1C,$1C,$63,$65,$40,$1F,$01,$6C,$30,$12,$30,$68,$60,$62,$63,$63
.byte $68,$04,$04,$50,$6C,$01,$54,$30,$30,$54,$12,$30,$12,$63,$01,$1A
.byte $17,$15,$1A,$28,$13,$13,$04,$54,$01,$22,$08,$08,$13,$13,$58,$01
.byte $29,$2D,$35,$39,$3D,$41,$45,$49,$4D,$51,$55,$45,$59,$5D,$61,$65
.byte $1D,$1D,$65,$63,$41,$1F,$00,$6D,$31,$12,$31,$69,$61,$63,$63,$62
.byte $69,$05,$05,$51,$6D,$00,$55,$31,$31,$55,$12,$31,$12,$63,$00,$1B
.byte $12,$12,$1B,$29,$17,$15,$05,$55,$00,$23,$09,$09,$17,$15,$59,$00
; ========== interior 16x16 tileset (4 * 64 bytes) ($8500-$85FF) END ==========


; ========== common 16x16 tileset (4 * 64 bytes) ($8600-$86FF) START ==========
;; [$8600 :: 0x00600]
Common16:
.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
.byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
.byte $13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13
.byte $56,$56,$56,$56,$56,$56,$56,$56,$00,$00,$00,$00,$00,$00,$00,$24
.byte $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
.byte $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
.byte $16,$16,$16,$16,$16,$16,$16,$16,$14,$14,$14,$14,$14,$14,$14,$14
.byte $57,$57,$57,$57,$57,$57,$57,$57,$01,$01,$01,$01,$01,$01,$01,$25
.byte $22,$22,$22,$22,$22,$22,$22,$22,$22,$22,$22,$22,$22,$22,$22,$22
.byte $08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
.byte $13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13,$13
.byte $58,$58,$58,$58,$58,$58,$58,$58,$01,$01,$01,$01,$01,$01,$01,$22
.byte $23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23
.byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
.byte $17,$17,$17,$17,$17,$17,$17,$17,$15,$15,$15,$15,$15,$15,$15,$15
.byte $59,$59,$59,$59,$59,$59,$59,$59,$00,$00,$00,$00,$00,$00,$00,$23
; ========== common 16x16 tileset (4 * 64 bytes) ($8600-$86FF) END ==========


; ========== exterior 32x32 tileset (4 * 64 bytes) ($8700-$87FF) START ==========
;; [$8700 :: 0x00700]
Exterior32:
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$13,$03,$03,$03,$03
.byte $03,$03,$03,$03,$03,$03,$03,$0C,$0C,$0C,$0C,$0C,$17,$1A,$17,$17
.byte $0D,$0E,$0D,$0D,$0D,$1A,$0D,$0D,$17,$17,$17,$1F,$17,$0D,$0D,$0D
.byte $10,$10,$22,$22,$12,$12,$32,$32,$13,$13,$13,$13,$0D,$0E,$0D,$0F
.byte $00,$00,$17,$1A,$18,$1B,$0E,$0D,$18,$1B,$0E,$13,$03,$03,$03,$03
.byte $03,$03,$03,$03,$17,$1A,$0D,$0C,$0C,$18,$1B,$0E,$17,$1A,$17,$1A
.byte $0D,$0D,$0D,$17,$0D,$21,$0D,$17,$17,$15,$17,$1F,$1A,$0D,$1A,$1A
.byte $10,$10,$22,$22,$12,$12,$32,$3E,$20,$13,$1E,$13,$1E,$0D,$17,$0D
.byte $00,$01,$00,$00,$01,$01,$01,$00,$00,$00,$00,$0D,$04,$04,$04,$04
.byte $04,$04,$04,$04,$04,$04,$04,$0C,$0C,$0C,$0C,$0C,$17,$1A,$1A,$1A
.byte $0D,$0E,$0D,$0D,$0D,$1A,$17,$17,$17,$17,$14,$1F,$17,$1A,$1A,$0D
.byte $12,$22,$22,$12,$17,$32,$32,$32,$17,$17,$0D,$0E,$17,$1D,$1D,$0D
.byte $02,$01,$18,$1B,$19,$30,$0F,$0E,$18,$1B,$0E,$0D,$04,$05,$06,$07
.byte $08,$09,$0A,$0B,$17,$1A,$0D,$3A,$0C,$19,$30,$0F,$17,$1A,$1A,$1A
.byte $0D,$0D,$17,$17,$1A,$1A,$17,$17,$1A,$17,$14,$1F,$1A,$1A,$1A,$1A
.byte $12,$22,$22,$12,$17,$32,$32,$32,$1A,$17,$1E,$0D,$1A,$1D,$1A,$0D
; ========== exterior 32x32 tileset (4 * 64 bytes) ($8700-$87FF) END ==========


; ========== interior 32x32 tileset (4 * 64 bytes) ($8800-$88FF) START ==========
;; [$8800 :: 0x00800]
Interior32:
.byte $38,$38,$18,$18,$01,$01,$01,$38,$00,$00,$01,$00,$01,$01,$00,$18
.byte $01,$01,$00,$00,$18,$18,$00,$00,$18,$00,$10,$32,$32,$32,$00,$00
.byte $01,$01,$01,$01,$08,$01,$06,$1A,$18,$18,$18,$18,$0F,$1B,$38,$01
.byte $1C,$01,$00,$01,$18,$00,$1B,$1B,$00,$17,$18,$1D,$1E,$1F,$1E,$1E
.byte $38,$38,$18,$18,$21,$22,$36,$38,$01,$38,$01,$18,$3C,$34,$18,$18
.byte $18,$38,$38,$18,$18,$39,$3D,$35,$18,$00,$10,$32,$32,$32,$32,$32
.byte $02,$03,$04,$05,$18,$04,$06,$1A,$18,$18,$18,$18,$0F,$18,$38,$19
.byte $1C,$18,$01,$01,$18,$26,$3E,$1B,$17,$17,$18,$1E,$1E,$18,$06,$1E
.byte $00,$00,$00,$00,$01,$01,$01,$38,$00,$00,$01,$00,$01,$01,$00,$00
.byte $01,$01,$00,$00,$18,$18,$00,$00,$00,$00,$10,$32,$00,$00,$00,$00
.byte $01,$01,$01,$01,$09,$01,$0B,$18,$18,$0E,$18,$0E,$17,$18,$38,$01
.byte $1C,$18,$00,$18,$0C,$00,$00,$00,$00,$17,$3E,$1D,$1E,$1F,$12,$13
.byte $00,$38,$00,$18,$3A,$3B,$3A,$38,$01,$38,$01,$18,$30,$30,$31,$31
.byte $18,$38,$00,$00,$18,$18,$00,$00,$33,$00,$10,$32,$00,$32,$32,$00
.byte $01,$01,$01,$01,$18,$04,$0B,$18,$1B,$1B,$0D,$18,$17,$18,$08,$19
.byte $1C,$18,$18,$18,$18,$19,$00,$00,$17,$17,$18,$1E,$1E,$18,$07,$1E
; ========== interior 32x32 tileset (4 * 64 bytes) ($8800-$88FF) END ==========


; ========== common 32x32 tileset (4 * 64 bytes) ($8900-$89FF) START ==========
;; [$8900 :: 0x00900]
Common32:
.byte $18,$00,$20,$00,$01,$38,$04,$15,$00,$18,$01,$25,$01,$38,$33,$33
.byte $18,$15,$18,$18,$01,$15,$19,$00,$03,$01,$18,$08,$01,$18,$18,$1B
.byte $00,$00,$00,$18,$00,$00,$18,$15,$01,$01,$04,$18,$1E,$11,$24,$3E
.byte $2F,$18,$18,$2E,$1E,$01,$18,$00,$32,$19,$18,$0E,$13,$16,$37,$18
.byte $29,$00,$20,$20,$14,$38,$26,$15,$18,$03,$01,$25,$00,$16,$18,$3F
.byte $00,$18,$15,$18,$01,$15,$19,$19,$03,$1D,$18,$18,$17,$18,$18,$1B
.byte $00,$00,$00,$00,$18,$15,$00,$1D,$3E,$20,$04,$07,$1F,$11,$24,$1B
.byte $2F,$18,$18,$2E,$1E,$2C,$2B,$19,$34,$17,$17,$0D,$20,$16,$37,$18
.byte $18,$00,$00,$00,$01,$02,$04,$15,$00,$18,$01,$25,$18,$38,$00,$00
.byte $00,$15,$18,$15,$15,$18,$19,$00,$03,$15,$18,$23,$01,$06,$07,$15
.byte $00,$01,$01,$18,$01,$00,$18,$15,$01,$01,$04,$18,$1E,$10,$24,$15
.byte $2F,$18,$18,$2E,$1E,$01,$33,$00,$32,$17,$18,$0F,$17,$16,$37,$09
.byte $18,$15,$00,$20,$01,$38,$04,$15,$33,$04,$15,$25,$00,$38,$18,$38
.byte $00,$18,$15,$15,$15,$18,$19,$19,$03,$1D,$37,$18,$17,$18,$18,$15
.byte $01,$01,$00,$01,$18,$15,$00,$1D,$3A,$18,$04,$0D,$1F,$10,$24,$15
.byte $2F,$27,$28,$2E,$2D,$19,$33,$2A,$32,$17,$17,$0D,$17,$16,$37,$18
; ========== common 32x32 tileset (4 * 64 bytes) ($8900-$89FF) END ==========


; ========== map BG attribute tables (3 * 64 bytes) ($8A00-$8ABF) START ==========
;; [$8A00 :: 0x00A00]
map_BG_attr:
.byte $00,$00,$00,$FF,$FF,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
.byte $55,$FF,$55,$55,$55,$55,$55,$55,$55,$55,$00,$00,$FF,$AA,$AA,$55
.byte $00,$AA,$55,$FF,$FF,$FF,$FF,$FF,$55,$FF,$FF,$FF,$FF,$FF,$FF,$55
.byte $00,$FF,$55,$AA,$55,$FF,$FF,$55,$55,$FF,$55,$FF,$FF,$FF,$55,$FF
.byte $00,$00,$00,$AA,$AA,$00,$55,$55,$AA,$AA,$AA,$55,$55,$55,$55,$55
.byte $AA,$AA,$55,$55,$55,$AA,$00,$55,$55,$00,$55,$55,$00,$55,$55,$55
.byte $00,$55,$AA,$AA,$55,$00,$AA,$55,$FF,$55,$00,$55,$00,$55,$00,$AA
.byte $00,$00,$AA,$00,$00,$00,$55,$AA,$00,$55,$55,$AA,$00,$00,$55,$00
.byte $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55
.byte $55,$55,$55,$55,$55,$55,$55,$55,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $55,$55,$55,$55,$55,$55,$55,$55,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55
; ========== map BG attribute tables (3 * 64 bytes) ($8A00-$8ABF) END ==========


; ========== initial event switches ($8AC0-$8AFF) START ==========
;; [$8AC0 :: 0x00AC0]
Init_event_npc_sw:
.byte $C4,$5D,$8B,$E6,$A3,$FB,$7F,$FF,$FF,$FF,$38,$FE,$7F,$E0,$FF,$F3
.byte $0D,$FF,$03,$00,$00,$DC,$FF,$FF,$E7,$FB,$F1,$7F,$03,$24,$30,$00
; $8AE0
Init_event_vehi_key_sw:
.byte $00,$76,$61,$00,$00,$94,$3A,$00,$00,$C8,$7A,$00,$00,$6F,$65,$00
.byte $5B,$74,$36,$30,$01,$AA,$36,$00,$01,$00,$00,$00,$90,$01,$00,$03
; ========== initial event switches ($8AC0-$8AFF) END ==========


; ========== map tile properties (1 * 256 bytes) ($8B00-$8BFF) START ==========
;; [$8B00 :: 0x00B00]
Map_tile_prop:
.byte $01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00
.byte $01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00
.byte $01,$00,$0E,$00,$01,$00,$01,$00,$01,$00,$01,$00,$40,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$01,$00,$01,$00,$00,$00,$02,$00,$02,$00,$C0,$00,$08,$11
.byte $08,$13,$08,$03,$08,$04,$08,$05,$08,$06,$08,$07,$08,$0F,$0A,$00
.byte $00,$00,$00,$00,$02,$00,$0E,$02,$40,$00,$40,$00,$46,$00,$C0,$00
.byte $01,$00,$11,$00,$21,$00,$31,$00,$80,$00,$80,$00,$80,$00,$80,$00
.byte $11,$00,$11,$00,$11,$00,$11,$00,$11,$00,$11,$00,$11,$00,$11,$00
.byte $11,$00,$11,$00,$11,$00,$11,$00,$11,$00,$11,$00,$11,$00,$11,$00
.byte $21,$00,$21,$00,$21,$00,$21,$00,$21,$00,$21,$00,$21,$00,$21,$00
.byte $31,$00,$31,$00,$31,$00,$31,$00,$31,$00,$31,$00,$31,$00,$31,$00
.byte $81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$81,$00
.byte $81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$81,$00
.byte $81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$81,$00
.byte $81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$81,$00,$01,$00
; ========== map tile properties (1 * 256 bytes) ($8B00-$8BFF) END ==========


; ========== treasure properties ($8C00-$8CFF) START ==========
;; [$8C00 :: 0x00C00]

.byte $10,$10,$10,$03,$04,$05,$19,$07,$18,$18,$18,$0B,$0C,$0D,$10,$60
.byte $10,$10,$A0,$A1,$A4,$25,$17,$12,$54,$69,$1A,$1A,$19,$24,$16,$2A
.byte $9B,$9B,$A3,$A3,$24,$1E,$10,$27,$9F,$2A,$2A,$10,$10,$10,$44,$92
.byte $34,$7E,$88,$A7,$A6,$A5,$16,$7A,$3A,$14,$10,$10,$24,$36,$10,$80
.byte $2C,$17,$1F,$1B,$16,$11,$13,$AC,$10,$44,$63,$55,$11,$15,$16,$18
.byte $19,$1B,$89,$1E,$31,$26,$3A,$2A,$22,$2E,$1C,$48,$45,$47,$10,$58
.byte $22,$10,$7D,$72,$10,$90,$2D,$33,$29,$6C,$21,$22,$8A,$41,$41,$41
.byte $36,$6C,$4F,$74,$80,$5B,$35,$81,$93,$5C,$50,$10,$47,$1F,$23,$24
.byte $26,$13,$3F,$66,$94,$75,$5D,$10,$10,$16,$10,$10,$10,$10,$98,$8C
.byte $77,$97,$5A,$10,$10,$10,$6B,$91,$4D,$3D,$73,$78,$8D,$46,$4F,$6D
.byte $10,$10,$10,$10,$10,$B6,$9C,$9D,$10,$10,$62,$11,$20,$10,$9A,$4C
.byte $10,$33,$86,$49,$2E,$2E,$20,$2C,$96,$1A,$1A,$83,$39,$52,$21,$16
.byte $21,$29,$2E,$12,$8D,$91,$18,$86,$87,$88,$78,$59,$15,$10,$10,$10
.byte $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
.byte $BE,$43,$56,$34,$7E,$57,$35,$17,$1D,$45,$7F,$11,$AB,$10,$59,$3E
.byte $65,$9C,$37,$9E,$8B,$82,$1C,$51,$5E,$40,$67,$6F,$95,$76,$84,$79
; ========== treasure properties ($8C00-$8CFF) END ==========


; ========== graphics id for each npc ($8D00-$8DFF) START ==========
;; [$8D00 :: 0x00D00]

.byte $00,$09,$09,$09,$09,$09,$14,$0B,$03,$03,$03,$05,$05,$05,$05,$05
.byte $0A,$0A,$0A,$04,$06,$06,$06,$06,$06,$07,$12,$12,$12,$12,$17,$17
.byte $24,$0C,$0C,$0D,$0D,$18,$0B,$0B,$0E,$0E,$0F,$19,$19,$19,$19,$17
.byte $1F,$1A,$11,$1B,$1E,$11,$19,$13,$21,$19,$19,$19,$11,$26,$26,$11
.byte $00,$20,$20,$20,$20,$20,$19,$19,$11,$2C,$25,$2E,$2D,$19,$19,$2B
.byte $1B,$1B,$10,$13,$19,$1D,$1D,$1D,$1C,$19,$19,$19,$26,$16,$16,$11
.byte $1A,$1A,$1A,$1E,$1A,$1B,$13,$1D,$1E,$1A,$1B,$1C,$1D,$1B,$1D,$1B
.byte $1E,$1C,$1B,$1D,$10,$10,$10,$10,$13,$10,$28,$29,$13,$10,$10,$10
.byte $2A,$27,$1C,$1C,$1C,$1B,$1B,$1B,$11,$11,$11,$11,$1B,$1B,$1B,$1B
.byte $1A,$1A,$1B,$1B,$1B,$1A,$13,$1E,$1D,$1A,$1A,$1A,$1A,$1A,$1A,$1A
.byte $1A,$1A,$1A,$1A,$1A,$1A,$1A,$1A,$1C,$13,$15,$15,$15,$1A,$10,$26
.byte $1B,$1B,$1B,$10,$1C,$1A,$1E,$0C,$17,$17,$17,$17,$17,$17,$17,$17
.byte $19,$19,$19,$19,$19,$19,$19,$19,$19,$19,$19,$19,$19,$19,$19,$19
.byte $19,$19,$19,$19,$19,$19,$19,$15,$19,$19,$19,$19,$10,$1D,$19,$19
.byte $09,$03,$01,$02,$0D,$22,$04,$12,$21,$05,$1F,$1A,$05,$26,$14,$12
.byte $11,$1B,$08,$0A,$11,$09,$05,$1B,$1C,$1A,$0F,$21,$07,$18,$18,$23
; ========== graphics id for each npc ($8D00-$8DFF) END ==========


; ========== map palettes ($8E00-$8F7F) START ==========
;; [$8E00 :: 0x00E10]
; Map palettes (Universal Background Color)
Map_pal_UBG:
.byte $16,$22,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
.byte $00,$00,$08,$00,$00,$00,$00,$01,$01,$02,$02,$02,$02,$02,$02,$03
.byte $05,$06,$06,$07,$08,$08,$08,$09,$09,$09,$09,$1A,$0C,$05,$0B,$0C
.byte $0C,$0C,$16,$0F,$11,$16,$12,$12,$12,$12,$12,$12,$13,$17,$17,$17
.byte $18,$18,$18,$07,$19,$19,$19,$19,$1A,$1A,$22,$1C,$1C,$1C,$1C,$21
.byte $21,$21,$16,$22,$22,$22,$22,$29,$2C,$2C,$30,$30,$30,$31,$31,$22
.byte $31,$3C,$3C,$3C,$0A,$18,$1C,$08,$0A,$1B,$02,$0F,$0F,$0F,$0F,$0F
.byte $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
; Map palettes (Background Color:00)
Map_pal_BG00:
.byte $27,$32,$27,$27,$17,$26,$16,$30,$16,$19,$10,$13,$27,$15,$27,$12
.byte $10,$10,$16,$16,$16,$10,$27,$11,$12,$12,$12,$13,$21,$21,$22,$13
.byte $27,$16,$27,$27,$16,$18,$27,$17,$18,$18,$19,$2A,$1C,$15,$1B,$16
.byte $1C,$1C,$27,$00,$21,$2B,$11,$16,$21,$21,$22,$22,$23,$16,$18,$27
.byte $16,$27,$28,$17,$17,$18,$29,$31,$17,$18,$31,$2C,$2C,$31,$3C,$10
.byte $2C,$31,$2B,$22,$2C,$32,$33,$27,$3C,$31,$10,$21,$21,$10,$31,$3C
.byte $3C,$21,$31,$3C,$1A,$28,$28,$18,$1B,$2B,$11,$0F,$0F,$0F,$0F,$0F
.byte $30,$12,$2A,$21,$12,$17,$25,$26,$15,$25,$22,$32,$28,$18,$1A,$1C
;; [$8F00 :: 0x00F00]
; Map palettes (Background Color:01)
Map_pal_BG01:
.byte $30,$30,$30,$30,$36,$36,$36,$36,$27,$27,$28,$36,$30,$30,$36,$36
.byte $30,$37,$28,$27,$28,$35,$37,$21,$21,$22,$32,$32,$31,$33,$31,$23
.byte $37,$26,$37,$37,$28,$28,$37,$28,$19,$29,$29,$3A,$30,$25,$2B,$28
.byte $2C,$3C,$37,$10,$31,$36,$21,$26,$30,$31,$31,$32,$33,$28,$28,$37
.byte $28,$37,$37,$27,$27,$29,$39,$30,$27,$28,$30,$3B,$3C,$30,$30,$30
.byte $30,$30,$30,$31,$31,$30,$30,$37,$30,$30,$31,$30,$31,$30,$30,$30
.byte $30,$30,$30,$30,$29,$39,$2C,$36,$3A,$3B,$31,$0F,$0F,$0F,$0F,$0F
.byte $36,$27,$36,$27,$27,$27,$27,$36,$36,$36,$36,$36,$36,$36,$36,$36
; ========== map palettes ($8E00-$8F7F) END ==========


; ========== character properties (3 * 128) ($8F80-$90FF) START ==========
;; [$8F80 :: 0x00F80]
Firion_properties:
.byte $00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$1E,$00,$1E,$00,$05,$00,$05,$00
.byte $0A,$0A,$0A,$0A,$0A,$05,$01,$46,$0B,$00,$7B,$00,$53,$31,$00,$00
.byte $0A,$0A,$0A,$0A,$0A,$05,$01,$05,$02,$02,$01,$0E,$01,$25,$00,$7C
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
Firion_prop_skil:
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$01,$47,$51,$5B,$76,$E8,$EF,$94,$3A,$C8,$7A
;; [$9000 :: 0x01000]
Maria_properties:
.byte $01,$00,$FF,$FF,$FF,$FF,$FF,$FF,$14,$00,$14,$00,$05,$00,$05,$00
.byte $05,$0F,$05,$0F,$0A,$05,$01,$37,$03,$00,$7A,$00,$68,$00,$00,$00
.byte $05,$0F,$05,$0F,$0A,$05,$00,$00,$00,$01,$01,$0E,$01,$23,$00,$34
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
Maria_prop_skil:
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
Guy_properties:
.byte $02,$00,$FF,$FF,$FF,$FF,$FF,$FF,$28,$00,$28,$00,$05,$00,$05,$00
.byte $0F,$05,$0F,$0A,$0A,$05,$01,$46,$12,$00,$7B,$00,$61,$00,$00,$00
.byte $0F,$05,$0F,$0A,$0A,$05,$00,$00,$00,$02,$01,$04,$01,$28,$00,$36
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
Guy_prop_skil:
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$01,$0B,$00,$04,$02,$15,$14,$00,$1C,$12,$17
; ========== character properties (3 * 128 bytes) ($8F80-$90FF) END ==========


; ========== guest character properties (6 * 128 bytes) ($9100-$93FF) START ==========
;; [$9100 :: 0x01100]
Minwu_properties:
.byte $03,$00,$96,$AC,$B1,$BA,$B8,$FF,$AF,$00,$AF,$00,$67,$00,$67,$00
.byte $0A,$14,$14,$10,$30,$28,$01,$50,$0A,$00,$85,$00,$41,$00,$2B,$19
.byte $0A,$14,$14,$10,$30,$28,$00,$00,$00,$05,$01,$14,$02,$41,$00,$06
.byte $D4,$D5,$D6,$D7,$D8,$D9,$DA,$DB,$DC,$DD,$DF,$E0,$E1,$E3,$E4,$E6
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $06,$3A,$06,$31,$05,$07,$02,$4D,$06,$34,$04,$43,$04,$45,$05,$4B
.byte $04,$43,$02,$61,$03,$40,$03,$23,$05,$4E,$02,$1D,$02,$14,$00,$00
.byte $00,$62,$01,$14,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
Josef_properties:
.byte $04,$00,$93,$B2,$B6,$A8,$A9,$FF,$EB,$00,$EB,$00,$05,$00,$05,$00
.byte $18,$18,$18,$0A,$0A,$0A,$04,$63,$14,$70,$7B,$8E,$00,$00,$1E,$10
.byte $18,$18,$18,$0A,$0A,$0A,$00,$00,$00,$04,$02,$14,$02,$2F,$00,$0A
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $01,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; [$9200 :: 0x01210]
Gordon_properties:
.byte $05,$00,$90,$B2,$B5,$A7,$B2,$B1,$40,$00,$40,$00,$05,$00,$05,$00
.byte $16,$16,$16,$16,$16,$16,$01,$4D,$11,$00,$7C,$8F,$4B,$32,$10,$10
.byte $16,$16,$16,$16,$16,$16,$01,$05,$04,$08,$01,$0A,$01,$34,$00,$AC
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
Leila_properties:
.byte $86,$00,$95,$A8,$AC,$AF,$A4,$FF,$60,$00,$96,$00,$14,$00,$14,$00
.byte $12,$1A,$12,$10,$0A,$0A,$02,$44,$12,$78,$86,$00,$3B,$54,$69,$00
.byte $12,$24,$10,$0A,$12,$0A,$02,$4A,$0A,$15,$02,$2E,$02,$3A,$08,$38
.byte $C1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$01,$35,$00,$00,$00,$00,$01,$00,$00,$00,$01,$0A
.byte $01,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $01,$4A,$01,$51,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; [$9300 :: 0x01300]
Ricard_properties:
.byte $07,$00,$9B,$AC,$A6,$A4,$B5,$A7,$25,$02,$25,$02,$05,$00,$05,$00
.byte $28,$1A,$20,$10,$1A,$05,$08,$63,$3D,$73,$7F,$92,$58,$34,$00,$00
.byte $32,$1A,$20,$10,$1A,$05,$05,$1E,$0B,$2B,$02,$19,$02,$3F,$20,$EA
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$04,$43,$00,$00,$00,$00,$00,$00,$07,$26,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $01,$61,$01,$36,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
Leon_properties:
.byte $88,$00,$FF,$FF,$FF,$FF,$FF,$FF,$26,$02,$4A,$04,$05,$00,$05,$00
.byte $35,$2D,$2E,$24,$10,$20,$09,$62,$61,$75,$82,$94,$5B,$66,$00,$00
.byte $35,$2D,$2E,$24,$10,$20,$08,$4C,$4C,$55,$03,$00,$03,$54,$08,$FF
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $01,$56,$02,$60,$04,$58,$05,$34,$06,$26,$07,$28,$08,$47,$03,$25
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $02,$49,$02,$34,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; ========== guest character properties (6 * 128 bytes) ($9100-$93FF) END ==========


; ========== battle bg for each map ($9400-$94FF) START ==========
;; [$9400 :: 0x01400]

.byte $80,$80,$80,$87,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81,$80
.byte $80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$00
.byte $00,$00,$07,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$87,$87,$87
.byte $87,$80,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$8A
.byte $02,$87,$87,$87,$87,$87,$87,$87,$87,$87,$87,$87,$87,$87,$87,$87
.byte $87,$87,$87,$87,$87,$87,$87,$87,$07,$07,$07,$07,$07,$07,$87,$00
.byte $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$87,$87,$87,$87,$87
.byte $87,$07,$87,$87,$87,$87,$87,$87,$87,$87,$87,$87,$87,$87,$87,$87
.byte $00,$08,$08,$08,$08,$08,$00,$08,$08,$08,$08,$08,$08,$08,$08,$08
.byte $08,$08,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
.byte $05,$05,$05,$05,$05,$05,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$07
.byte $07,$07,$07,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$8B,$8B,$8B
.byte $8D,$8D,$8D,$8D,$8D,$8D,$8D,$8D,$8D,$8D,$8D,$8D,$08,$08,$08,$08
.byte $08,$08,$08,$08,$08,$08,$08,$89,$89,$89,$89,$89,$89,$89,$89,$89
.byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0F,$0F,$0F
.byte $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0C,$0F,$00,$87,$87,$87,$80
; ========== battle bg for each map ($9400-$94FF) END ==========


; ========== battle bg for each world map ($9500-$957F) START ==========
;; [$9500 :: 0x01500]

.byte $06,$06,$03,$03,$04,$04,$06,$0F,$0F,$0F,$00,$00,$00,$02,$01,$02
.byte $06,$06,$03,$03,$04,$04,$03,$0F,$0F,$0F,$00,$00,$00,$01,$01,$01
.byte $02,$02,$06,$06,$02,$06,$04,$0F,$0F,$0F,$00,$00,$00,$02,$01,$02
.byte $02,$02,$06,$06,$02,$00,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$02
.byte $0F,$0F,$0F,$0F,$02,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$01,$01,$0F,$0F
.byte $0F,$0F,$0F,$0F,$0F,$0F,$0F,$01,$01,$02,$02,$02,$0F,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; ========== battle bg for each world map ($9500-$957F) END ==========


; ========== ship graphics ($9580-$96FF) START ==========
;; [$9580 :: 0x01580]
.byte $03,$0F,$1E,$0E,$1E,$1E,$3E,$1F,$01,$00,$0F,$07,$0F,$01,$1F,$0E
.byte $C0,$E0,$F0,$E0,$F0,$F0,$F8,$F0,$80,$40,$E0,$C0,$E0,$00,$F0,$E0
.byte $1E,$3F,$1A,$0D,$11,$11,$09,$00,$0D,$1A,$01,$02,$0E,$0E,$06,$00
.byte $F0,$F8,$B8,$50,$08,$08,$10,$00,$60,$B0,$00,$A0,$F0,$F0,$E0,$00
.byte $01,$03,$0E,$1E,$0E,$1E,$1E,$3E,$00,$01,$01,$0F,$07,$0F,$01,$1F
.byte $E0,$C0,$E0,$F0,$E0,$F0,$F0,$F8,$40,$80,$00,$E0,$C0,$E0,$00,$F0
.byte $1F,$1E,$3F,$1B,$0D,$11,$11,$09,$0E,$0D,$1A,$00,$02,$0E,$0E,$06
.byte $F0,$F0,$F8,$B8,$50,$08,$08,$10,$E0,$60,$B0,$00,$A0,$F0,$F0,$E0

;; [$9600 :: 0x01600]

.byte $02,$06,$0F,$1F,$0F,$1E,$3F,$7F,$01,$01,$07,$0F,$07,$01,$1F,$3F
.byte $E0,$F0,$F0,$F8,$F0,$F8,$FC,$FE,$C0,$20,$E0,$F0,$E0,$00,$F8,$FC
.byte $7F,$3F,$1E,$0D,$11,$11,$09,$00,$3F,$1F,$01,$02,$0E,$0E,$06,$00
.byte $FE,$FE,$FC,$50,$08,$08,$10,$00,$FC,$F8,$00,$A0,$F0,$F0,$E0,$00
.byte $01,$02,$06,$0F,$1F,$0F,$1E,$3F,$00,$01,$01,$07,$0F,$07,$01,$1F
.byte $F0,$E0,$E0,$F0,$F8,$F0,$F8,$FC,$20,$C0,$00,$E0,$F0,$E0,$00,$F8
.byte $7F,$7F,$3F,$1E,$0D,$11,$11,$1D,$3F,$3F,$1F,$01,$02,$0E,$0E,$16
.byte $FE,$FE,$FC,$F8,$50,$08,$08,$78,$FC,$FC,$F8,$00,$A0,$F0,$F0,$E8
.byte $03,$03,$0F,$1F,$1F,$0F,$3F,$7F,$01,$00,$07,$0E,$0C,$03,$07,$3B
.byte $DE,$9C,$FC,$F8,$FC,$F8,$F0,$A8,$8C,$00,$38,$30,$38,$C0,$80,$00
.byte $FF,$FF,$6F,$9F,$42,$20,$10,$00,$77,$77,$03,$60,$3D,$1F,$08,$00
.byte $B4,$EA,$FE,$EB,$A2,$02,$0C,$00,$00,$80,$C0,$14,$5C,$FC,$D0,$00
.byte $00,$03,$03,$0F,$1F,$1F,$0F,$3F,$00,$01,$00,$07,$0E,$0C,$03,$07
.byte $00,$DE,$9C,$FC,$F8,$FC,$F8,$F0,$00,$8C,$00,$38,$30,$38,$C0,$80
.byte $7F,$FF,$FF,$6F,$9F,$42,$20,$7D,$3B,$77,$77,$03,$60,$3D,$1F,$6F
.byte $A8,$B4,$EA,$FE,$EB,$A2,$02,$AC,$00,$00,$80,$C0,$14,$5C,$FC,$B0
; ========== ship graphics ($9580-$96FF) END ==========


; ========== battle palettes (3 * 128 bytes) ($9700-$987F) START ==========
;; [$9700 :: 0x01700]

.byte $07,$22,$29,$17,$22,$00,$19,$00,$07,$11,$08,$16,$12,$0C,$12,$13
.byte $16,$13,$11,$26,$12,$1C,$14,$13,$1B,$15,$22,$2B,$19,$13,$1B,$31
.byte $17,$22,$0B,$18,$28,$00,$18,$18,$12,$19,$14,$16,$00,$06,$14,$16
.byte $00,$13,$12,$17,$16,$1A,$13,$18,$16,$15,$18,$17,$18,$00,$19,$1B
.byte $15,$19,$1C,$0C,$17,$19,$27,$16,$0C,$1C,$13,$07,$11,$18,$19,$1C
.byte $16,$0C,$0C,$18,$18,$22,$22,$19,$19,$11,$11,$16,$16,$1C,$1C,$17
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00
.byte $00,$00,$14,$00,$00,$17,$13,$13,$19,$19,$18,$18,$0F,$00,$12,$16

;; [$9780 :: 0x01780]

.byte $17,$3C,$31,$27,$31,$17,$29,$10,$17,$22,$19,$26,$22,$00,$22,$22
.byte $27,$22,$21,$34,$22,$2C,$24,$23,$2B,$25,$34,$30,$29,$23,$2B,$30
.byte $36,$31,$1B,$2C,$36,$10,$28,$2C,$22,$10,$23,$27,$10,$19,$23,$27
.byte $10,$23,$2B,$19,$22,$2C,$24,$27,$27,$25,$28,$27,$37,$10,$29,$2B
.byte $23,$29,$2C,$1C,$28,$2A,$37,$26,$1C,$2C,$28,$17,$31,$38,$29,$32
.byte $23,$1C,$1C,$28,$28,$3C,$3C,$29,$29,$21,$21,$26,$26,$2C,$2C,$27
.byte $10,$16,$15,$2B,$10,$27,$21,$2C,$10,$27,$12,$26,$18,$28,$22,$17
.byte $22,$13,$24,$21,$1C,$27,$23,$23,$38,$38,$28,$28,$2A,$10,$28,$36

;; [$9800 :: 0x01800]

.byte $19,$30,$30,$31,$30,$27,$2C,$16,$27,$32,$29,$35,$30,$10,$30,$31
.byte $37,$37,$31,$30,$32,$30,$34,$27,$30,$30,$37,$27,$30,$27,$16,$23
.byte $19,$30,$28,$1C,$14,$16,$33,$16,$37,$30,$3B,$30,$28,$2B,$2A,$2B
.byte $22,$30,$36,$28,$37,$31,$2B,$34,$22,$2A,$24,$30,$31,$23,$17,$32
.byte $37,$12,$24,$2A,$1C,$30,$30,$30,$37,$16,$37,$28,$27,$30,$25,$30
.byte $30,$16,$37,$1B,$22,$25,$30,$16,$27,$25,$37,$22,$3A,$27,$3A,$2C
.byte $30,$26,$25,$3B,$37,$30,$31,$3C,$34,$37,$22,$36,$28,$38,$30,$27
.byte $2B,$23,$30,$30,$21,$2A,$37,$16,$30,$27,$23,$16,$30,$30,$18,$30
; ========== battle palettes (3 * 128 bytes) ($9700-$987F) END ==========


; ========== Character stats code ($9880-$9BFF) START ==========
; battle/menu code

.import	Multi16			;FC98

; Name	: Update_char_equip
; A	: character index(0,1,2,3)
; Marks	: update character equipment
;	  Used on BANK 0C, BANK 0F(Do_009880)
;	  $7A(ADDR) = character properties 1($6100,$6140,$6180,$61C0)
Update_char_equip:
	BPL Update_char_equip_wp	; 9880	$10 $05		branch if called by menu ???
	AND #$7F		; 9882	$29 $7F
	JMP Update_equip	; 9884	$4C $A2 $98	update character equipment
Update_char_equip_wp:
	JSR Update_equip	; 9887	$20 $A2 $98
	LDY #$1C		; 988A	$A0 $1C
	LDA ($7A),Y		; 988C	$B1 $7A
	CMP #$30		; 988E	$C9 $30
	BNE Updata_char_equip_lwp	; 9890	$D0 $04
	LDA #$00		; 9892	$A9 $00
	STA ($7A),Y		; 9894	$91 $7A
Updata_char_equip_lwp:
	INY			; 9896	$C8
	LDA ($7A),Y		; 9897	$B1 $7A
	CMP #$30		; 9899	$C9 $30
	BNE Update_char_equip_end	; 989B	$D0 $04
	LDA #$00		; 989D	$A9 $00
	STA ($7A),Y		; 989F	$91 $7A
Update_char_equip_end:
	RTS			; 98A1	$60
; End of Update_char_equip

equip_empty_slot	= $5E
equip_d_size_tmp	= $5F
equip_num_tmp		= $6D
mod_str_tmp		= $6E
mod_agi_tmp		= $6F
mod_sta_tmp		= $70
mod_mag_tmp		= $71


; Name	: Update_equip
; A	: Character index(0,1,2,3)
; Marks	: update character equipment
;	  $5E = empty equipment slot id ($30 or $70)
;	  $64(ADDR) = Weapon properties address on BANK 0C
;	  $7A(ADDR) = character properties 1($6100,$6140,$6180,$61C0)
;	  $7E(ADDR) = character properties 2($6200,$6240,$6280,$62C0)
;	  $80(ADDR) = battle stats($7D7A,$7DAA,$7DDA,$7E0A)
;	  $6E = mod. strength
;	  $6F = mod. agility
;	  $70 = mod. stamina
;	  $71 = mod. magic power
Update_equip:
	STA cur_char_idx	; 98A2	$85 $9E
	JSR Update_char_pointers	; 98A4	$20 $48 $9B	update character pointers
	LDA #$00		; 98A7	$A9 $00
	LDY #$26		; 98A9	$A0 $26		off hand attack mult
L018AB:
	STA ($7A),Y		; 98AB	$91 $7A		clear off-hand properties
	INY			; 98AD	$C8
	CPY #$29		; 98AE	$C0 $29
	BNE L018AB		; 98B0	$D0 $F9		loop
	LDY #$1E		; 98B2	$A0 $1E		off hand hit mult
L018B4:
	STA ($80),Y		; 98B4	$91 $80
	INY			; 98B6	$C8
	CPY #$24		; 98B7	$C0 $24
	BNE L018B4		; 98B9	$D0 $F9		loop
	JSR Load_armor_prop	; 98BB	$20 $C0 $BE	load armor properties
	JSR Update_mod		; 98BE	$20 $E8 $BE	update mod. stats
	LDY #$20		; 98C1	$A0 $20
	LDA ($7A),Y		; 98C3	$B1 $7A		save mod. strength
	STA $6E			; 98C5	$85 $6E
	INY			; 98C7	$C8
	LDA ($7A),Y		; 98C8	$B1 $7A		save mod. agility
	STA $6F			; 98CA	$85 $6F
	INY			; 98CC	$C8
	LDA ($7A),Y		; 98CD	$B1 $7A		save mod. stamina
	STA $70			; 98CF	$85 $70
	LDY #$25		; 98D1	$A0 $25
	LDA ($7A),Y		; 98D3	$B1 $7A		save mod. magic power
	STA $71			; 98D5	$85 $71
	LDA #<Weapon_prop	; 98D7	$A9 $F6		BANK 0C/80F6 (weapon properties)
	STA $64			; 98D9	$85 $64
	LDA #>Weapon_prop	; 98DB	$A9 $80
	STA $65			; 98DD	$85 $65
	LDA #$30		; 98DF	$A9 $30		empty weapon slot is $30
	STA equip_empty_slot	; 98E1	$85 $5E
	LDA #$09		; 98E3	$A9 $09		9 bytes each(weapon properties data size)
	STA equip_d_size_tmp	; 98E5	$85 $5F
	LDA #$FE		; 98E7	$A9 $FE
	STA $4C			; 98E9	$85 $4C
	LDY #$1C		; 98EB	$A0 $1C		right hand
	LDA ($7A),Y		; 98ED	$B1 $7A
	JSR Get_equip_prop	; 98EF	$20 $2C $BF	load equipment properties
	LDA equip_num_tmp	; 98F2	$A5 $6D
	STA $6C			; 98F4	$85 $6C
	INY			; 98F6	$C8
	LDA ($7A),Y		; 98F7	$B1 $7A		left hand(1Dh)
	JSR Get_equip_prop	; 98F9	$20 $2C $BF	load equipment properties
	LDY #$00		; 98FC	$A0 $00
	LDA ($7A),Y		; 98FE	$B1 $7A
	BPL L01905		; 9900	$10 $03		branch if right-handed
	JSR Swap_hands		; 9902	$20 $8B $9B	swap hands
L01905:
	LDA $6C			; 9905	$A5 $6C
	BNE L0190C		; 9907	$D0 $03
	JSR Swap_hands		; 9909	$20 $8B $9B	swap hands
L0190C:
	LDX #$00		; 990C	$A2 $00
	LDY #$00		; 990E	$A0 $00
	JSR Get_weapon_prop_	; 9910	$20 $BA $BF
	LDY #$2E		; 9913	$A0 $2E
	LDA $4A			; 9915	$A5 $4A
	STA ($80),Y		; 9917	$91 $80		main hand weapon type
	LDX #$02		; 9919	$A2 $02
	LDY #$01		; 991B	$A0 $01
	JSR Get_weapon_prop_	; 991D	$20 $BA $BF
	LDY #$2F		; 9920	$A0 $2F
	LDA $4B			; 9922	$A5 $4B
	STA ($80),Y		; 9924	$91 $80		off hand weapon type
	LDX #$00		; 9926	$A2 $00
	JSR Get_wpn_lv		; 9928	$20 $D2 $BF
	LDY #$16		; 992B	$A0 $16		main hand hit mult.(character properties 1)
	STA ($7A),Y		; 992D	$91 $7A
	LDY #$18		; 992F	$A0 $18		main hand hit mult.(battle stats)
	STA ($80),Y		; 9931	$91 $80
	LDA equip_num_tmp	; 9933	$A5 $6D
	BEQ L01944		; 9935	$F0 $0D		branch if off hand is empty
	LDX #$01		; 9937	$A2 $01
	JSR Get_wpn_lv		; 9939	$20 $D2 $BF
	LDY #$26		; 993C	$A0 $26		off hand attack mult.(character properties 1)
	STA ($7A),Y		; 993E	$91 $7A
	LDY #$1E		; 9940	$A0 $1E		off hand hit mult.(battle stats)
	STA ($80),Y		; 9942	$91 $80
L01944:
	LDA mod_str_tmp		; 9944	$A5 $6E		mod. strength
	CLC			; 9946	$18
	ADC $4C			; 9947	$65 $4C		accuracy(main hand weapon)
	JSR Max99		; 9949	$20 $84 $9B	max 99
	LDY #$17		; 994C	$A0 $17		main hand hit %
	STA ($7A),Y		; 994E	$91 $7A
	LDY #$19		; 9950	$A0 $19		main hand hit %
	STA ($80),Y		; 9952	$91 $80
	LDA equip_num_tmp	; 9954	$A5 $6D
	BEQ L01969		; 9956	$F0 $11		branch if off hand is empty
	LDA mod_str_tmp		; 9958	$A5 $6E
	LSR			; 995A	$4A
	CLC			; 995B	$18
	ADC $4D			; 995C	$65 $4D		accuracy(off hand weapon)
	JSR Max99		; 995E	$20 $84 $9B	max 99
	LDY #$27		; 9961	$A0 $27		off hand hit %(character properties 1)
	STA ($7A),Y		; 9963	$91 $7A
	LDY #$1F		; 9965	$A0 $1F		off hand hit %(battle stats)
	STA ($80),Y		; 9967	$91 $80
L01969:
	LDA equip_num_tmp	; 9969	$A5 $6D
	ORA $6C			; 996B	$05 $6C
	BEQ Update_equip_fist	; 996D	$F0 $35		branch if no weapon(fist)
	LDA equip_num_tmp	; 996F	$A5 $6D
	BEQ Update_equip_1wp	; 9971	$F0 $21
	LDA mod_str_tmp		; 9973	$A5 $6E		strength / 4
	LSR			; 9975	$4A
	LSR			; 9976	$4A
	CLC			; 9977	$18
	ADC $4E			; 9978	$65 $4E		attack power(main hand weapon)
	LDY #$18		; 997A	$A0 $18		main hand attack power(charater properties 1)
	STA ($7A),Y		; 997C	$91 $7A
	LDY #$1A		; 997E	$A0 $1A		main hand attack power(battle stats)
	STA ($80),Y		; 9980	$91 $80
	LDA mod_str_tmp		; 9982	$A5 $6E		strength / 8
	LSR			; 9984	$4A
	LSR			; 9985	$4A
	LSR			; 9986	$4A
	CLC			; 9987	$18
	ADC $4F			; 9988	$65 $4F		attack power(off hand)
	LDY #$28		; 998A	$A0 $28		off hand attack power(character properties 1)
	STA ($7A),Y		; 998C	$91 $7A
	LDY #$20		; 998E	$A0 $20		off hand attack power(battle stats)
	STA ($80),Y		; 9990	$91 $80
	BNE Update_equip_el	; 9992	$D0 $27
Update_equip_1wp:
	LDA mod_str_tmp		; 9994	$A5 $6E		strength / 2
	LSR			; 9996	$4A
	CLC			; 9997	$18
	ADC $4E			; 9998	$65 $4E		attack power(main hand weapon)
	LDY #$18		; 999A	$A0 $18		main hand attack power(character properties 1)
	STA ($7A),Y		; 999C	$91 $7A
	LDY #$1A		; 999E	$A0 $1A		main hand attack power(battle stats)
	STA ($80),Y		; 99A0	$91 $80
	BNE Update_equip_el	; 99A2	$D0 $17
Update_equip_fist:
	LDY #$00		; 99A4	$A0 $00		equipment(fist) levels(character properties 1)
	LDA ($7E),Y		; 99A6	$B1 $7E		level x 8
	ASL			; 99A8	$0A
	ASL			; 99A9	$0A
	ASL			; 99AA	$0A
	STA $48			; 99AB	$85 $48
	LDA mod_str_tmp		; 99AD	$A5 $6E		strength / 2
	LSR			; 99AF	$4A
	CLC			; 99B0	$18
	ADC $48			; 99B1	$65 $48
	LDY #$18		; 99B3	$A0 $18		main hand attack power(character properties 1)
	STA ($7A),Y		; 99B5	$91 $7A
	LDY #$1A		; 99B7	$A0 $1A		main hand attack power(battle stats)
	STA ($80),Y		; 99B9	$91 $80
Update_equip_el:
	LDX #$00		; 99BB	$A2 $00
	LDY #$1B		; 99BD	$A0 $1B		main hand element, monster type bonus, weapon special
	JSR Set_wpn_element	; 99BF	$20 $DD $BF
	LDA equip_num_tmp	; 99C2	$A5 $6D
	BEQ Update_equip_def	; 99C4	$F0 $07
	LDX #$01		; 99C6	$A2 $01
	LDY #$21		; 99C8	$A0 $21
	JSR Set_wpn_element	; 99CA	$20 $DD $BF	off hand element, monster type bonus, weapon special
Update_equip_def:
	LDA $6C			; 99CD	$A5 $6C
	PHA			; 99CF	$48
	LDA equip_num_tmp	; 99D0	$A5 $6D
	PHA			; 99D2	$48
	JSR Load_armor_prop	; 99D3	$20 $C0 $BE	load armor properties
	PLA			; 99D6	$68
	STA equip_num_tmp	; 99D7	$85 $6D
	PLA			; 99D9	$68
	STA $6C			; 99DA	$85 $6C
	LDY #$00		; 99DC	$A0 $00
	CLC			; 99DE	$18
	LDA ($44),Y		; 99DF	$B1 $44		helmet defense
	ADC ($46),Y		; 99E1	$71 $46		armor defense
	ADC ($48),Y		; 99E3	$71 $48		glove defense
	LDY #$29		; 99E5	$A0 $29		defense(character properties 1)
	STA ($7A),Y		; 99E7	$91 $7A
	LDY #$02		; 99E9	$A0 $02		defense(battle stats)
	STA ($80),Y		; 99EB	$91 $80
	LDY #$30		; 99ED	$A0 $30		evade level(character properties 2)
	LDA ($7E),Y		; 99EF	$B1 $7E
	TAX			; 99F1	$AA		level +1
	INX			; 99F2	$E8
	TXA			; 99F3	$8A
	LDY #$2A		; 99F4	$A0 $2A		evade mult.(character properties 1)
	STA ($7A),Y		; 99F6	$91 $7A
	LDY #$00		; 99F8	$A0 $00		evade mult.(character stats)
	STA ($80),Y		; 99FA	$91 $80
	LDA $50			; 99FC	$A5 $50		weapon properties evade(main hand)
	STA $00			; 99FE	$85 $00
	LDA $5C			; 9A00	$A5 $5C		characters weapon level
	STA $02			; 9A02	$85 $02
	INC $02			; 9A04	$E6 $02		weapon level +1
	LDA #$00		; 9A06	$A9 $00
	STA $01			; 9A08	$85 $01
	STA $03			; 9A0A	$85 $03
	JSR Multi16		; 9A0C	$20 $98 $FC	multiply (16-bit)
	LDA $04			; 9A0F	$A5 $04
	STA $56			; 9A11	$85 $56
	LDA $05			; 9A13	$A5 $05
	STA $57			; 9A15	$85 $57
	LDA equip_num_tmp	; 9A17	$A5 $6D
	BEQ L01A3B		; 9A19	$F0 $20		branch if no weapon
	LDA $51			; 9A1B	$A5 $51
	STA $00			; 9A1D	$85 $00
	LDA $5D			; 9A1F	$A5 $5D
	STA $02			; 9A21	$85 $02
	INC $02			; 9A23	$E6 $02
	LDA #$00		; 9A25	$A9 $00
	STA $01			; 9A27	$85 $01
	STA $03			; 9A29	$85 $03
	JSR Multi16		; 9A2B	$20 $98 $FC	multiply (16-bit)
	CLC			; 9A2E	$18
	LDA $56			; 9A2F	$A5 $56		weapon properties evade(off hand)
	ADC $04			; 9A31	$65 $04
	STA $56			; 9A33	$85 $56		weapon evade(L)
	LDA $57			; 9A35	$A5 $57
	ADC $05			; 9A37	$65 $05		weapon evade(H)
	STA $57			; 9A39	$85 $57
L01A3B:
	CLC			; 9A3B	$18
	LDA $56			; 9A3C	$A5 $56
	ADC mod_agi_tmp		; 9A3E	$65 $6F
	STA $56			; 9A40	$85 $56		weapon evade(L)
	LDA $57			; 9A42	$A5 $57
	ADC #$00		; 9A44	$69 $00
	STA $57			; 9A46	$85 $57		weapon evade(H)
	LDY #$01		; 9A48	$A0 $01
	CLC			; 9A4A	$18
	LDA ($44),Y		; 9A4B	$B1 $44		helmet evade penalty
	ADC ($46),Y		; 9A4D	$71 $46		armor evade penalty
	ADC ($48),Y		; 9A4F	$71 $48		glove evade penalty
	STA $58			; 9A51	$85 $58		evade penalty(L)
	LDA #$00		; 9A53	$A9 $00
	ADC #$00		; 9A55	$69 $00
	STA $59			; 9A57	$85 $59		evade penalty(H)
	SEC			; 9A59	$38
	LDA $56			; 9A5A	$A5 $56
	SBC $58			; 9A5C	$E5 $58
	STA $56			; 9A5E	$85 $56		evade(L)
	LDA $57			; 9A60	$A5 $57
	SBC $59			; 9A62	$E5 $59
	STA $57			; 9A64	$85 $57		evade(H)
	BCS L01A6C		; 9A66	$B0 $04		branch if result is plus(greater than or equal 0)
	LDA #$00		; 9A68	$A9 $00
	STA $56			; 9A6A	$85 $56
L01A6C:
	LDY #$2B		; 9A6C	$A0 $2B		evade %(character properties 1)
	LDA $56			; 9A6E	$A5 $56
	JSR Max99		; 9A70	$20 $84 $9B	max 99
	STA ($7A),Y		; 9A73	$91 $7A
	LDY #$01		; 9A75	$A0 $01		evade %(battle stats)
	STA ($80),Y		; 9A77	$91 $80
	LDY #$32		; 9A79	$A0 $32		m.evade level(character properties 2)
	LDA ($7E),Y		; 9A7B	$B1 $7E
	TAX			; 9A7D	$AA		level +1
	INX			; 9A7E	$E8
	TXA			; 9A7F	$8A
	LDY #$2C		; 9A80	$A0 $2C		m.evade mult.(character properties 1)
	STA ($7A),Y		; 9A82	$91 $7A
	LDY #$03		; 9A84	$A0 $03		m.evade mult.(battle stats)
	STA ($80),Y		; 9A86	$91 $80
	LDA #$00		; 9A88	$A9 $00
	STA $4D			; 9A8A	$85 $4D
	CLC			; 9A8C	$18
	LDA $70			; 9A8D	$A5 $70		mod. stamina
	ADC $71			; 9A8F	$65 $71		mod. magic power
	STA $4C			; 9A91	$85 $4C
	LSR $4D			; 9A93	$46 $4D		??? always 0
	LSR $4C			; 9A95	$46 $4C
	CLC			; 9A97	$18
	LDY #$05		; 9A98	$A0 $05
	LDA ($44),Y		; 9A9A	$B1 $44		helmet magic defense
	ADC ($46),Y		; 9A9C	$71 $46		armor magic defense
	ADC ($48),Y		; 9A9E	$71 $48		glove magic defense
	STA $4E			; 9AA0	$85 $4E		sum of magic defense(L)
	LDA #$00		; 9AA2	$A9 $00
	ADC #$00		; 9AA4	$69 $00
	STA $4F			; 9AA6	$85 $4F		sum of magic defense(H)
	CLC			; 9AA8	$18
	LDA $4C			; 9AA9	$A5 $4C
	ADC $4E			; 9AAB	$65 $4E
	STA $4C			; 9AAD	$85 $4C
	LDA $4D			; 9AAF	$A5 $4D
	ADC $4F			; 9AB1	$65 $4F
	STA $4D			; 9AB3	$85 $4D
	LDA $4D			; 9AB5	$A5 $4D
	BEQ L01ABD		; 9AB7	$F0 $04		branch if sum of magic defense is less than 256
	LDA #$63		; 9AB9	$A9 $63		set max 99
	STA $4C			; 9ABB	$85 $4C
L01ABD:
	LDY #$2D		; 9ABD	$A0 $2D		m.evade %(character properties 1)
	LDA $4C			; 9ABF	$A5 $4C
	JSR Max99		; 9AC1	$20 $84 $9B	max 99
	STA ($7A),Y		; 9AC4	$91 $7A
	LDY #$04		; 9AC6	$A0 $04		m.evade %(battle stats)
	STA ($80),Y		; 9AC8	$91 $80
	LDY #$03		; 9ACA	$A0 $03
	LDA ($44),Y		; 9ACC	$B1 $44		helmet elemental defense
	ORA ($46),Y		; 9ACE	$11 $46		armor elemental defense
	ORA ($48),Y		; 9AD0	$11 $48		glove elemental defense
	STA $4C			; 9AD2	$85 $4C		elemental defense
	LDA $6C			; 9AD4	$A5 $6C
	BEQ L01AE2		; 9AD6	$F0 $0A
	CMP #$0A		; 9AD8	$C9 $0A
	BCS L01AE2		; 9ADA	$B0 $06		branch if main hand is weapon(check shield)
	LDA $4C			; 9ADC	$A5 $4C
	ORA $54			; 9ADE	$05 $54		main hand elemental properties
	STA $4C			; 9AE0	$85 $4C		elemental defense
L01AE2:
	LDA equip_num_tmp	; 9AE2	$A5 $6D
	BEQ L01AF0		; 9AE4	$F0 $0A		branch if weapon is not exist
	CMP #$0A		; 9AE6	$C9 $0A
	BCS L01AF0		; 9AE8	$B0 $06		branch if off hand is weapon(check shield)
	LDA $4C			; 9AEA	$A5 $4C
	ORA $55			; 9AEC	$05 $55		off hand elemental properties
	STA $4C			; 9AEE	$85 $4C
L01AF0:
	LDY #$2E		; 9AF0	$A0 $2E		strong elements(character properites 1)
	LDA $4C			; 9AF2	$A5 $4C
	STA ($7A),Y		; 9AF4	$91 $7A
	LDY #$05		; 9AF6	$A0 $05		strong elements(battle stats)
	STA ($80),Y		; 9AF8	$91 $80
	LDY #$02		; 9AFA	$A0 $02
	CLC			; 9AFC	$18
	LDA ($44),Y		; 9AFD	$B1 $44		helmet spell penalty
	ADC ($46),Y		; 9AFF	$71 $46		armor spell penalty
	ADC ($48),Y		; 9B01	$71 $48		glove spell penalty
	STA $4C			; 9B03	$85 $4C		spell penalty(L)
	LDA #$00		; 9B05	$A9 $00
	ADC #$00		; 9B07	$69 $00
	STA $4D			; 9B09	$85 $4D		spell penalty(H)
	CLC			; 9B0B	$18
	LDA $52			; 9B0C	$A5 $52		main hand spell penalty
	ADC $53			; 9B0E	$65 $53		off hand spell penalty
	STA $4E			; 9B10	$85 $4E		weapon spell panalty(L)
	LDA #$00		; 9B12	$A9 $00
	ADC #$00		; 9B14	$69 $00
	STA $4F			; 9B16	$85 $4F		weapon spell penalty(H)
	CLC			; 9B18	$18
	LDA $4C			; 9B19	$A5 $4C
	ADC $4E			; 9B1B	$65 $4E
	STA $4C			; 9B1D	$85 $4C
	LDA $4D			; 9B1F	$A5 $4D
	ADC $4F			; 9B21	$65 $4F
	STA $4D			; 9B23	$85 $4D		sum of spell penalty
	LDA $4D			; 9B25	$A5 $4D
	BEQ L01B2D		; 9B27	$F0 $04		branch if spell penalty is less than 256
	LDA #$FF		; 9B29	$A9 $FF
	STA $4C			; 9B2B	$85 $4C
L01B2D:
	LDY #$2F		; 9B2D	$A0 $2F		spell % penalty ??
	LDA $4C			; 9B2F	$A5 $4C
	STA ($7A),Y		; 9B31	$91 $7A
	LDY #$24		; 9B33	$A0 $24		spell % penalty(battle stats)
	STA ($80),Y		; 9B35	$91 $80
	LDY #$23		; 9B37	$A0 $23		mod. intellect
	LDA ($7A),Y		; 9B39	$B1 $7A
	LDY #$12		; 9B3B	$A0 $12		intellect(battle stats)
	STA ($80),Y		; 9B3D	$91 $80
	LDY #$24		; 9B3F	$A0 $24		mod. spirit
	LDA ($7A),Y		; 9B41	$B1 $7A
	LDY #$13		; 9B43	$A0 $13		spirit(battle stats)
	STA ($80),Y		; 9B45	$91 $80
	RTS			; 9B47	$60
; End of Update_equip

; Name	: Update_char_pointers
; SRC	: $9E = current character index
; Marks	: update character pointers
;	  $7A(ADDR) = character properties 1($6100,$6140,$6180,$61C0)
;	  $7E(ADDR) = character properties 2($6200,$6240,$6280,$62C0)
;	  $80(ADDR) = battle stats($7D7A,$7DAA,$7DDA,$7E0A)
;	  This code will be modified
Update_char_pointers:
	JSR Get_char_addr	; 9B48	20 7B 9B	get character offset
	CLC			; 9B4B	18
	ADC #$00		; 9B4C	69 00
	STA $7A			; 9B4E	85 7A
	LDA #$00		; 9B50	A9 00
	ADC #$61		; 9B52	69 61		$6100 (character properties 1)
	STA $7B			; 9B54	85 7B
	JSR Get_char_addr	; 9B56	20 7B 9B	get character offset
	CLC			; 9B59	18
	ADC #$00		; 9B5A	69 00
	STA $7E			; 9B5C	85 7E
	LDA #$00		; 9B5E	A9 00
	ADC #$62		; 9B60	69 62		$6200 (character properties 2)
	STA $7F			; 9B62	85 7F
	LDA cur_char_idx	; 9B64	A5 9E
	ASL			; 9B66	0A
	ASL			; 9B67	0A
	ASL			; 9B68	0A
	ASL			; 9B69	0A
	STA $80			; 9B6A	85 80
	ASL			; 9B6C	0A
	CLC			; 9B6D	18
	ADC $80			; 9B6E	65 80
	ADC #$7A		; 9B70	69 7A		$7D7A (battle stats, 48 bytes each)
	STA $80			; 9B72	85 80
	LDA #$00		; 9B74	A9 00
	ADC #$7D		; 9B76	69 7D
	STA $81			; 9B78	85 81
	RTS			; 9B7A	60        
; End of Update_char_pointers

; Name	: Get_char_addr
; Marks	: get character offset
;	  character index to address offset
;	  same as 0C/9726
Get_char_addr:
	LDA cur_char_idx	; 9B7B	A5 9E
	ASL			; 9B7D	0A
	ASL			; 9B7E	0A
	ASL			; 9B7F	0A
	ASL			; 9B80	0A
	ASL			; 9B81	0A
	ASL			; 9B82	0A
	RTS			; 9B83	60
; End of Get_char_addr

; Name	: Max99
; Ret	: A (0-99)
; Marks	: max 99
;	  same as 05/AA3A
;	  MIN(A, 99)
;	  return 99, if A is greather than 99
Max99:
	CMP #$64		; 9B84	C9 64
	BCC L01B8A		; 9B86	90 02
	LDA #$63		; 9B88	A9 63
L01B8A:
	RTS			; 9B8A	60
; End of Max99

; Name	: Swap_hands
; Marks	: swap hands
Swap_hands:
	LDA $44			; 9B8B	A5 44
	PHA			; 9B8D	48
	LDA $45			; 9B8E	A5 45
	PHA			; 9B90	48
	LDA $46			; 9B91	A5 46
	STA $44			; 9B93	85 44
	LDA $47			; 9B95	A5 47
	STA $45			; 9B97	85 45
	PLA			; 9B99	68
	STA $47			; 9B9A	85 47
	PLA			; 9B9C	68
	STA $46			; 9B9D	85 46
	LDA $6C			; 9B9F	A5 6C
	PHA			; 9BA1	48
	LDA $6D			; 9BA2	A5 6D
	STA $6C			; 9BA4	85 6C
	PLA			; 9BA6	68
	STA $6D			; 9BA7	85 6D
	RTS			; 9BA9	60
; End of Swap_hands

; Marks	: stale code (now at 0C/9BAD)
	BNE L01BCC		; 9BAA	D0 20
	STA $53			; 9BAC	85 53
	STA $54			; 9BAE	85 54
	LDY #$00		; 9BB0	A0 00
	LDA ($66),Y		; 9BB2	B1 66
	STA $0247		; 9BB4	8D 47 02
	STA $56			; 9BB7	85 56
	INY			; 9BB9	C8
	LDA ($66),Y		; 9BBA	B1 66
	STA $0244		; 9BBC	8D 44 02
	STA $55			; 9BBF	85 55
	LDA #$40		; 9BC1	A9 40
	STA $64			; 9BC3	85 64
	LDA #$02		; 9BC5	A9 02
	STA $65			; 9BC7	85 65
	JSR $9CFF		; 9BC9	20 FF 9C
L01BCC:
	JSR $FAE4		; 9BCC	20 E4 FA
	LDA $7CBA		; 9BCF	AD BA 7C
	BEQ L01BD7		; 9BD2	F0 03
	JSR $9EF2		; 9BD4	20 F2 9E
L01BD7:
	JSR Wait_NMI_end	; 9BD7	20 46 FD
	JSR $FC34		; 9BDA	20 34 FC
	JSR $FAE4		; 9BDD	20 E4 FA
	JSR $9CBC		; 9BE0	20 BC 9C
.byte $AD,$34,$00
	;LDA $0034		; 9BE3	AD 34 00
	BEQ L01BD7		; 9BE6	F0 EF
	JSR Wait_NMI_end	; 9BE8	20 46 FD
	LDA $5D			; 9BEB	A5 5D
.byte $F0,$27
	;BEQ L01C16		; 9BED	F0 27
.byte $AD,$34,$00
	;LDA $0034		; 9BEF	AD 34 00
	CMP #$80		; 9BF2	C9 80
.byte $D0,$10
	;BNE Set_wmap_palettes	; 9BF4	D0 10
	INC $53			; 9BF6	E6 53
	LDA $53			; 9BF8	A5 53
	CMP $5D			; 9BFA	C5 5D
.byte $D0,$05
	;BNE Init_wmap		; 9BFC	D0 05
	LDA #$00		; 9BFE	A9 00
; end of stale code
; ========== Character stats code ($9880-$9BFF) END ==========


;; [$9C00 :: 0x01C00]

; ========== Map init code ($9C00-$9FFF) START ==========
.export	Load_guest_char_prop	;9C0C

Init_map:
	JMP Init_map_		; 9C00	$4C $52 $9D
Init_wmap:
	JMP Init_wmap_		; 9C03	$4C $A5 $9C
Set_wmap_palettes:
	JMP Set_wmap_palettes_	; 9C06	$4C $C3 $9C
Init_var:
	JMP Init_var_		; 9C09	$4C $51 $9C	called on BANK 0F

; Name	: Load_guest_char_prop
; Marks	: load guest character properties
;	  called on BANK 0F
Load_guest_char_prop:
	LDA $61			; 9C0C	A5 61
	SEC			; 9C0E	38
	SBC #$04		; 9C0F	E9 04
	ASL			; 9C11	0A
	TAX			; 9C12	AA
	LDA Guest_prop_p,X	; 9C13	BD 45 9C
	STA $80			; 9C16	85 80
	LDA Guest_prop_p+1,X	; 9C18	BD 46 9C
	STA $81			; 9C1B	85 81
	LDY #$3F		; 9C1D	A0 3F
L01C1F:
	LDA ($80),Y		; 9C1F	B1 80
	STA $61C0,Y		; 9C21	99 C0 61
	DEY			; 9C24	88
	BPL L01C1F		; 9C25	10 F8
	LDY #$40		; 9C27	A0 40
L01C29:
	LDA ($80),Y		; 9C29	B1 80
	STA $6280,Y		; 9C2B	99 80 62
	INY			; 9C2E	C8
	CPY #$76		; 9C2F	C0 76
	BCC L01C29		; 9C31	90 F6
	LDA $61			; 9C33	A5 61
	CMP #$09		; 9C35	C9 09
	BNE L01C44		; 9C37	D0 0B
	LDX #$05		; 9C39	A2 05
L01C3B:
	LDA $6276,X		; 9C3B	BD 76 62
	STA $61C2,X		; 9C3E	9D C2 61
	DEX			; 9C41	CA
	BPL L01C3B		; 9C42	10 F7
L01C44:
	RTS			; 9C44	60
; End of Load_guest_char_prop

; $9C45 - data block = pointers to guest character properties
Guest_prop_p:
.word Minwu_properties		; $00 $91
.word Josef_properties		; $80 $91
.word Gordon_properties		; $00 $92
.word Leila_properties		; $80 $92
.word Ricard_properties		; $00 $93
.word Leon_properties		; $80 $93

; Name	: Init_var_
; Marks	: Init variables(event/items/characters/palettes)
;	  $6000-$609F, $6100-$62FF
;	  init sram
Init_var_:
	LDX #$1F		; 9C51	$A2 $1F
L01C53:
	LDA Init_event_vehi_key_sw,X	; 9C53	$BD $E0 $8A
	STA ship_status,X	; 9C56	$9D $00 $60
	LDA Init_event_npc_sw,X	; 9C59	$BD $C0 $8A
	STA event_npc_sw,X	; 9C5C	$9D $40 $60
	LDA #$00		; 9C5F	$A9 $00
	STA acq_keyword,X	; 9C61	$9D $80 $60	clear keywords
	STA inventory,X		; 9C64	$9D $60 $60	clear inventory
	LDA #$FF		; 9C67	$A9 $FF
	STA treasure_sw,X	; 9C69	$9D $20 $60	reset treasure switches
	DEX			; 9C6C	$CA
	BPL L01C53		; 9C6D	$10 $E4		loop
	LDX #$3F		; 9C6F	$A2 $3F
L01C71:
	LDA Firion_properties,X	; 9C71	$BD $80 $8F
	STA ch_stats_1,X	; 9C74	$9D $00 $61
	LDA Maria_properties,X	; 9C77	$BD $00 $90
	STA ch_stats_2,X	; 9C7A	$9D $40 $61
	LDA Guy_properties,X	; 9C7D	$BD $80 $90
	STA ch_stats_3,X	; 9C80	$9D $80 $61
	LDA Firion_properties,X	; 9C83	$BD $80 $8F
	STA ch_stats_4,X	; 9C86	$9D $C0 $61
	LDA Firion_prop_skil,X	; 9C89	$BD $C0 $8F
	STA ch_skills_1,X	; 9C8C	$9D $00 $62
	LDA Maria_prop_skil,X	; 9C8F	$BD $40 $90
	STA ch_skills_2,X	; 9C92	$9D $40 $62
	LDA Guy_prop_skil,X	; 9C95	$BD $C0 $90
	STA ch_skills_3,X	; 9C98	$9D $80 $62
	LDA Firion_prop_skil,X	; 9C9B	$BD $C0 $8F
	STA ch_skills_4,X	; 9C9E	$9D $C0 $62
	DEX			; 9CA1	$CA
	BPL L01C71		; 9CA2	$10 $CD		loop
	RTS			; 9CA4	$60
; End of Init_var_

; Name	: Init_wmap_
; Marks	: Set world map tile properties($8000-$83FF) to RAM($0400-$07FF)
;	  init world map
Init_wmap_:
	LDX #$00		; 9CA5	$A2 $00
L01CA7:
	LDA Wmap_tile_prop,X	; 9CA7	$BD $00 $80	world map tile properties - BANK 00/8000
	STA $0400,X		; 9CAA	$9D $00 $04
	LDA Wmap_tileset1,X	; 9CAD	$BD $00 $81	world map tileset1 - BANK 00/8100
	STA $0500,X		; 9CB0	$9D $00 $05
	LDA Wmap_tileset2,X	; 9CB3	$BD $00 $82	world map tileset2 - BANK 00/8200
	STA $0600,X		; 9CB6	$9D $00 $06
	LDA Wmap_attr_tbl,X	; 9CB9	$BD $00 $83	world map attribute table - BANK 00/8300
	STA $0700,X		; 9CBC	$9D $00 $07
	INX			; 9CBF	$E8
	BNE L01CA7		; 9CC0	$D0 $E5		loop
	RTS			; 9CC2	$60
; End of Init_wmap_

; Name	: Set_wmap_palettes_
; Marks	: Set world map palettes
;	  load map palette
Set_wmap_palettes_:
	LDX #$1F		; 9CC3	$A2 $1F
L01CC5:
	LDA Wmap_pal,X		; 9CC5	$BD $80 $83	BANK 00/8380
	STA palette_UBGC,X	; 9CC8	$9D $C0 $03
	DEX			; 9CCB	$CA
	BPL L01CC5		; 9CCC	$10 $F7
	LDX #$00		; 9CCE	$A2 $00
L01CD0:
	LDA $6101,X		; 9CD0	$BD $01 $61	ch_status
	AND #$E0		; 9CD3	$29 $E0
	BEQ L01CDE		; 9CD5	$F0 $07
	TXA			; 9CD7	$8A
	CLC			; 9CD8	$18
	ADC #$40		; 9CD9	$69 $40
	TAX			; 9CDB	$AA
	BNE L01CD0		; 9CDC	$D0 $F2
L01CDE:
	LDA $6100,X		; 9CDE	$BD $00 $61	ch_id
	AND #$0F		; 9CE1	$29 $0F
	ASL A			; 9CE3	$0A
	TAX			; 9CE4	$AA
	LDA Map_char_pal,X	; 9CE5	$BD $A0 $83
	STA palette_OAM01	; 9CE8	$8D $D2 $03
	LDA Map_char_pal+1,X	; 9CEB	$BD $A1 $83
	STA palette_OAM11	; 9CEE	$8D $D6 $03
	LDA scroll_dir_map	; 9CF1	$A5 $2D
	LSR A			; 9CF3	$4A
	BCS L01CF7		; 9CF4	$B0 $01
	RTS			; 9CF6	$60
; End of Set_wmap_palettes_
; Marks	: $48(ADDR) = palette address
L01CF7:
	LDA $48			; 9CF7	$A5 $48		map id ??
	LSR A			; 9CF9	$4A
	LSR A			; 9CFA	$4A
	LSR A			; 9CFB	$4A
	LSR A			; 9CFC	$4A
	ORA #$A0		; 9CFD	$09 $A0
	STA $81			; 9CFF	$85 $81
	LDA $48			; 9D01	$A5 $48		map id ??
	ASL A			; 9D03	$0A
	ASL A			; 9D04	$0A
	ASL A			; 9D05	$0A
	ASL A			; 9D06	$0A
	STA $80			; 9D07	$85 $80
	LDY #$01		; 9D09	$A0 $01
	LDX #$01		; 9D0B	$A2 $01
	JSR Set_palettes	; 9D0D	$20 $3C $9D
	LDY #$02		; 9D10	$A0 $02
	LDX #$05		; 9D12	$A2 $05
	JSR Set_palettes	; 9D14	$20 $3C $9D
	LDY #$03		; 9D17	$A0 $03
	LDX #$09		; 9D19	$A2 $09
	JSR Set_palettes	; 9D1B	$20 $3C $9D
	LDY #$04		; 9D1E	$A0 $04
	LDX #$19		; 9D20	$A2 $19
	JSR Set_palettes	; 9D22	$20 $3C $9D
	LDY #$05		; 9D25	$A0 $05
	LDX #$1D		; 9D27	$A2 $1D
	JSR Set_palettes	; 9D29	$20 $3C $9D
	LDA #$00		; 9D2C	$A9 $00
	STA palette_BG30	; 9D2E	$8D $CD $03
	LDA #$02		; 9D31	$A9 $02
	STA palette_BG31	; 9D33	$8D $CE $03
	LDA #$30		; 9D36	$A9 $30
	STA palette_BG32	; 9D38	$8D $CF $03
	RTS			; 9D3B	$60
; End of

; Name	: Set_palettes
; X	: palette background offset
; Y	: palette address offset
; Marks	: $80(ADDR)
; 	  Load palette color
Set_palettes:
	LDA ($80),Y		; 9D3C	$B1 $80
	TAY			; 9D3E	$A8
	LDA Map_pal_UBG,Y	; 9D3F	$B9 $00 $8E	BANK 00/8E00
	STA palette_UBGC,X	; 9D42	$9D $C0 $03
	LDA Map_pal_BG00,Y	; 9D45	$B9 $80 $8E	BANK 00/8E80
	STA palette_BG00,X	; 9D48	$9D $C1 $03
	LDA Map_pal_BG01,Y	; 9D4B	$B9 $00 $8F	BANK 00/8F00
	STA palette_BG01,X	; 9D4E	$9D $C2 $03
	RTS			; 9D51	$60
; End of Set_palettes

; Name	: Init_map_
; Marks	: init map
Init_map_:
	LDA $48			; 9D52	$A5 $48		world map entrance ID ??
	LSR A			; 9D54	$4A
	LSR A			; 9D55	$4A
	LSR A			; 9D56	$4A
	LSR A			; 9D57	$4A
	ORA #$A0		; 9D58	$09 $A0		BANK 00/A000 (map properties)
	STA $81			; 9D5A	$85 $81
	LDA $48			; 9D5C	$A5 $48		world map entrance ID ??
	ASL A			; 9D5E	$0A
	ASL A			; 9D5F	$0A
	ASL A			; 9D60	$0A
	ASL A			; 9D61	$0A
	STA $80			; 9D62	$85 $80
	LDY #$0F		; 9D64	$A0 $0F
L01D66:
	LDA ($80),Y		; 9D66	$B1 $80		copy map properties to buffer (ex> $A050)
	STA $0780,Y		; 9D68	$99 $80 $07	map tileset ?? map properties ??
	DEY			; 9D6B	$88
	BPL L01D66		; 9D6C	$10 $F8
	JSR Load_map_prop	; 9D6E	$20 $3B $9E	load map properties
	LDA #$80		; 9D71	$A9 $80
	STA $61			; 9D73	$85 $61
	LDA #$A0		; 9D75	$A9 $A0
	STA $62			; 9D77	$85 $62
	LDA #$B0		; 9D79	$A9 $B0
	STA $63			; 9D7B	$85 $63
	LDA #$C0		; 9D7D	$A9 $C0
	STA $64			; 9D7F	$85 $64
	LDA #$D0		; 9D81	$A9 $D0
	STA $65			; 9D83	$85 $65
	LDA #$E0		; 9D85	$A9 $E0
	STA $66			; 9D87	$85 $66
	LDA #$F0		; 9D89	$A9 $F0
	STA $67			; 9D8B	$85 $67
	LDA #$00		; 9D8D	$A9 $00
	STA $88			; 9D8F	$85 $88
	STA $80			; 9D91	$85 $80
	LDA #$70		; 9D93	$A9 $70
	STA $81			; 9D95	$85 $81		$7000
L01D97:
	LDY $88			; 9D97	$A4 $88
	LDX $7400,Y		; 9D99	$BE $00 $74	decompressed bg tilemap
	LDY #$00		; 9D9C	$A0 $00
	LDA $7800,X		; 9D9E	$BD $00 $78	top left tile
	STA ($80),Y		; 9DA1	$91 $80
	INY			; 9DA3	$C8
	LDA $7880,X		; 9DA4	$BD $80 $78	top right tile
	STA ($80),Y		; 9DA7	$91 $80
	LDY #$20		; 9DA9	$A0 $20
	LDA $7900,X		; 9DAB	$BD $00 $79	bottom left tile
	STA ($80),Y		; 9DAE	$91 $80
	INY			; 9DB0	$C8
	LDA $7980,X		; 9DB1	$BD $80 $79	bottom right tile
	STA ($80),Y		; 9DB4	$91 $80
	LDA $80			; 9DB6	$A5 $80
	CLC			; 9DB8	$18
	ADC #$02		; 9DB9	$69 $02		next 32x32 tile
	STA $80			; 9DBB	$85 $80
	AND #$1F		; 9DBD	$29 $1F
	BNE L01DCC		; 9DBF	$D0 $0B
	LDA $80			; 9DC1	$A5 $80
	CLC			; 9DC3	$18
	ADC #$20		; 9DC4	$69 $20		next row
	STA $80			; 9DC6	$85 $80
	BCC L01DCC		; 9DC8	$90 $02
	INC $81			; 9DCA	$E6 $81
L01DCC:
	INC $88			; 9DCC	$E6 $88
	BNE L01D97		; 9DCE	$D0 $C7
	LDA #$00		; 9DD0	$A9 $00		$7000
	STA $80			; 9DD2	$85 $80
	STA $88			; 9DD4	$85 $88
	TAY			; 9DD6	$A8
	LDA #$70		; 9DD7	$A9 $70
	STA $81			; 9DD9	$85 $81
L01DDB:
	LDA ($80),Y		; 9DDB	$B1 $80		map bg tilemap (32x32) ?? ($7000-$73FF)
	CMP #$39		; 9DDD	$C9 $39
	BCC L01DE6		; 9DDF	$90 $05		branch if not a trigger
	JSR Trig_init		; 9DE1	$20 $24 $9F	init trigger
	STA ($80),Y		; 9DE4	$91 $80
L01DE6:
	INY			; 9DE6	$C8		next tile
	BNE L01DDB		; 9DE7	$D0 $F2		loop - $7000-$73FF ??
	INC $81			; 9DE9	$E6 $81
	LDA $81			; 9DEB	$A5 $81
	CMP #$74		; 9DED	$C9 $74		loop through $73FF
	BCC L01DDB		; 9DEF	$90 $EA
	LDA $0780		; 9DF1	$AD $80 $07	npc properties id
	AND #$7F		; 9DF4	$29 $7F
	CMP #$40		; 9DF6	$C9 $40
	BCC L01E15		; 9DF8	$90 $1B
	AND #$3F		; 9DFA	$29 $3F
	STA $80			; 9DFC	$85 $80
	ASL A			; 9DFE	$0A
	ADC $80			; 9DFF	$65 $80
	STA $80			; 9E01	$85 $80
	LDA #$BE		; 9E03	$A9 $BE		BANK 00/BE00 (single npc properties)
	STA $81			; 9E05	$85 $81
	LDY #$02		; 9E07	$A0 $02		only load 3 bytes (1 npc)
	LDA #$00		; 9E09	$A9 $00
	LDX #$24		; 9E0B	$A2 $24		clear npc data
L01E0D:
	STA $0780,X		; 9E0D	$9D $80 $07
	DEX			; 9E10	$CA
	BPL L01E0D		; 9E11	$10 $FA
	BMI L01E32		; 9E13	$30 $1D
L01E15:
	ASL A			; 9E15	$0A
	ASL A			; 9E16	$0A
	STA $80			; 9E17	$85 $80
	LDX #$00		; 9E19	$A2 $00
	STX $81			; 9E1B	$86 $81
	ASL A			; 9E1D	$0A
	ROL $81			; 9E1E	$26 $81
	ASL A			; 9E20	$0A
	ROL $81			; 9E21	$26 $81
	ASL A			; 9E23	$0A
	ROL $81			; 9E24	$26 $81
	ADC $80			; 9E26	$65 $80
	STA $80			; 9E28	$85 $80
	LDA $81			; 9E2A	$A5 $81
	ADC #$B5		; 9E2C	$69 $B5		BANK 00/B500 (multi npc properties)
	STA $81			; 9E2E	$85 $81
	LDY #$23		; 9E30	$A0 $23		load 12 npcs
L01E32:
	LDA ($80),Y		; 9E32	$B1 $80
	STA $0780,Y		; 9E34	$99 $80 $07	text buffer ??
	DEY			; 9E37	$88
	BPL L01E32		; 9E38	$10 $F8		loop
	RTS			; 9E3A	$60
; End of Init_map_

; Name	: Load_map_prop
; Marks	: Copy map tile properties to CPU System RAM ($0400-$04FF)
;	  Copy $8400-$84FF to $0500-$0680 (exterior 16 x 16) - asymetrical
;	  Copy $8600-$86FF to $0540-$0680 (common 16 x 16) - asymetrical
;	  Copy $8700-$87FF to $7800-$7980 (exterior 32 x 32) - asymetrical
;	  Copy $8900-$89FF to $7840-$7980 (common 32 x 32) - asymetrical
;	  load map properties
Load_map_prop:
	LDA $0780		; 9E3B	$AD $80 $07
	AND #$80		; 9E3E	$29 $80
	STA $49			; 9E40	$85 $49
	LDX #$00		; 9E42	$A2 $00
L01E44:
	LDA Map_tile_prop,X	; 9E44	$BD $00 $8B	BANK 00/8B00
	STA $0400,X		; 9E47	$9D $00 $04	tile properties
	INX			; 9E4A	$E8
	BNE L01E44		; 9E4B	$D0 $F7		loop
	LDX $48			; 9E4D	$A6 $48		world map entrance ID
	LDA Tile_id,X		; 9E4F	$BD $00 $B3	tile set ID
	LSR A			; 9E52	$4A
	LDX #$3F		; 9E53	$A2 $3F
	BCS L01E92		; 9E55	$B0 $3B		branch if interior
; exterior
L01E57:
	LDA Exterior16,X	; 9E57	$BD $00 $84	BANK 00/8400 exterior 16 x 16 tileset
	STA $0500,X		; 9E5A	$9D $00 $05
	LDA Exterior16+$40,X	; 9E5D	$BD $40 $84
	STA $0580,X		; 9E60	$9D $80 $05
	LDA Exterior16+$80,X	; 9E63	$BD $80 $84
	STA $0600,X		; 9E66	$9D $00 $06
	LDA Exterior16+$C0,X	; 9E69	$BD $C0 $84
	STA $0680,X		; 9E6C	$9D $80 $06
	LDA Exterior32,X	; 9E6F	$BD $00 $87	BANK 00/8700 exterior 32 x 32 tileset
	STA $7800,X		; 9E72	$9D $00 $78
	LDA Exterior32+$40,X	; 9E75	$BD $40 $87
	STA $7880,X		; 9E78	$9D $80 $78
	LDA Exterior32+$80,X	; 9E7B	$BD $80 $87
	STA $7900,X		; 9E7E	$9D $00 $79
	LDA Exterior32+$C0,X	; 9E81	$BD $C0 $87
	STA $7980,X		; 9E84	$9D $80 $79
	LDA map_BG_attr,X	; 9E87	$BD $00 $8A	BANK 00/8A00 map bg attribute tables[0]
	STA $0700,X		; 9E8A	$9D $00 $07
	DEX			; 9E8D	$CA
	BPL L01E57		; 9E8E	$10 $C7		loop
	BMI L01ECB		; 9E90	$30 $39
; interior
L01E92:
	LDA Interior16,X	; 9E92	$BD $00 $85	BANK 00/8500 interior 16 x 16 tileset
	STA $0500,X		; 9E95	$9D $00 $05
	LDA Interior16+$40,X	; 9E98	$BD $40 $85
	STA $0580,X		; 9E9B	$9D $80 $05
	LDA Interior16+$80,X	; 9E9E	$BD $80 $85
	STA $0600,X		; 9EA1	$9D $00 $06
	LDA Interior16+$C0,X	; 9EA4	$BD $C0 $85
	STA $0680,X		; 9EA7	$9D $80 $06
	LDA Interior32,X	; 9EAA	$BD $00 $88	BANK 00/8800 interior 32 x 32 tileset
	STA $7800,X		; 9EAD	$9D $00 $78
	LDA Interior32+$40,X	; 9EB0	$BD $40 $88
	STA $7880,X		; 9EB3	$9D $80 $78
	LDA Interior32+$80,X	; 9EB6	$BD $80 $88
	STA $7900,X		; 9EB9	$9D $00 $79
	LDA Interior32+$C0,X	; 9EBC	$BD $C0 $88
	STA $7980,X		; 9EBF	$9D $80 $79
	LDA map_BG_attr+$40,X	; 9EC2	$BD $40 $8A	BANK 00/8A40 map bg attribute tables[1]
	STA $0700,X		; 9EC5	$9D $00 $07
	DEX			; 9EC8	$CA
	BPL L01E92		; 9EC9	$10 $C7		loop
; common tiles
L01ECB:
	LDX #$3F		; 9ECB	$A2 $3F
L01ECD:
	LDA Common16,X		; 9ECD	$BD $00 $86	BANK 00/8600 common 16 x 16 tileset
	STA $0540,X		; 9ED0	$9D $40 $05
	LDA Common16+$40,X	; 9ED3	$BD $40 $86
	STA $05C0,X		; 9ED6	$9D $C0 $05
	LDA Common16+$80,X	; 9ED9	$BD $80 $86
	STA $0640,X		; 9EDC	$9D $40 $06
	LDA Common16+$C0,X	; 9EDF	$BD $C0 $86
	STA $06C0,X		; 9EE2	$9D $C0 $06
	LDA Common32,X		; 9EE5	$BD $00 $89	BANK 00/8900 common 32 x 32 tileset
	STA $7840,X		; 9EE8	$9D $40 $78
	LDA Common32+$40,X	; 9EEB	$BD $40 $89
	STA $78C0,X		; 9EEE	$9D $C0 $78
	LDA Common32+$80,X	; 9EF1	$BD $80 $89
	STA $7940,X		; 9EF4	$9D $40 $79
	LDA Common32+$C0,X	; 9EF7	$BD $C0 $89
	STA $79C0,X		; 9EFA	$9D $C0 $79
	LDA map_BG_attr+$80,X	; 9EFD	$BD $80 $8A	BANK 00/8A80 map bg attribute tables[2]
	STA $0740,X		; 9F00	$9D $40 $07
	DEX			; 9F03	$CA
	BPL L01ECD		; 9F04	$10 $C7
	LDA $0786		; 9F06	$AD $86 $07	text buffer ??
	STA $044D		; 9F09	$8D $4D $04	tile $26 trigger id
	STA $046F		; 9F0C	$8D $6F $04	tile $37 trigger id
	LDX $48			; 9F0F	$A6 $48		world map entrance ID
	LDA Map_init_xfill,X	; 9F11	$BD $00 $B0	map initial x positions and fill tile BANK 00/B000
	LSR A			; 9F14	$4A
	LSR A			; 9F15	$4A
	LSR A			; 9F16	$4A
	LSR A			; 9F17	$4A
	LSR A			; 9F18	$4A
	TAX			; 9F19	$AA
	LDA Fill_tile_attr,X	; 9F1A	$BD $C2 $83	fill tile attributes
	STA $0738		; 9F1D	$8D $38 $07	map tileset attribute table
	STA $0716		; 9F20	$8D $16 $07
	RTS			; 9F23	$60
; End of Load_map_prop

; Name	: Trig_init
; A	:
; Ret	: A = 
; Marks	: init trigger
;	  $84(ADDR) = trigger init jump table address
Trig_init:
	SEC			; 9F24	$38
	SBC #$39		; 9F25	$E9 $39
	ASL A			; 9F27	$0A
	TAX			; 9F28	$AA
	LDA Trig_init_jmp,X	; 9F29	$BD $36 $9F
	STA $84			; 9F2C	$85 $84
	LDA Trig_init_jmp+1,X	; 9F2E	$BD $37 $9F
	STA $85			; 9F31	$85 $85
	JMP ($0084)		; 9F33	$6C $84 $00
; trigger init jump table
Trig_init_jmp:
.word Trig_init_404F		; 9F36	$9F44
.word Trig_init_5057		; 9F38	$9F73
.word Trig_init_585F		; 9F3A	$9F7F
.word Trig_init_606F		; 9F3C	$9F8B
.word Trig_init_686F		; 9F3E	$9F97
.word Trig_init_7077		; 9F40	$9FA3
.word Trig_init_787F		; 9F42	$9FAF
; Marks	: $39: treasure chest ($40-$4F)
Trig_init_404F:
	JSR get_next_trig_id	; 9F44	20 BE 9F	get next trigger id
	PHA			; 9F47	48
	AND #$07		; 9F48	29 07
	TAX			; 9F4A	AA
	LDA Bit_masks,X		; 9F4B	BD 6B 9F	bit mask
	STA $84			; 9F4E	85 84
	PLA			; 9F50	68
	PHA			; 9F51	48
	LSR			; 9F52	4A
	LSR			; 9F53	4A
	LSR			; 9F54	4A
	TAX			; 9F55	AA
	LDA $6020,X		; 9F56	BD 20 60	check treasure switch
	AND $84			; 9F59	25 84
	BNE L01F61		; 9F5B	D0 04
	PLA			; 9F5D	68
	LDA #$7F		; 9F5E	A9 7f
	RTS			; 9F60	60
L01F61:
	PLA			; 9F61	68
	LDX $61			; 9F62	A6 61
	INC $61			; 9F64	E6 61
	INC $61			; 9F66	E6 61
	JMP Trig_init_end	; 9F68	4C B8 9F

; 9F6B - data block = bit masks
Bit_masks:
.byte $01,$02,$04,$08,$10,$20,$40,$80

; Marks	: $3A: (tile $50-$57)
Trig_init_5057:
	JSR get_next_trig_id	; 9F73	$20 $BE $9F	get next trigger id
	LDX $62			; 9F76	$A6 $62
	INC $62			; 9F78	$E6 $62
	INC $62			; 9F7A	$E6 $62
	JMP Trig_init_end	; 9F7C	$4C $B8 $9F
; Marks	: $3B: (tile $58-$5F)
Trig_init_585F:
	JSR get_next_trig_id	; 9F7F	20 BE 9F	get next trigger id
	LDX $63			; 9F82	A6 63
	INC $63			; 9F84	E6 63
	INC $63			; 9F86	E6 63
	JMP Trig_init_end	; 9F88	4C B8 9F
; Marks	: $3C: (tile $60-$6F) 67 ??
Trig_init_606F:
	JSR get_next_trig_id	; 9F8B	20 BE 9F	get next trigger id
	LDX $64			; 9F8E	A6 64
	INC $64			; 9F90	E6 64
	INC $64			; 9F92	E6 64
	JMP Trig_init_end	; 9F94	4C B8 9F
; Marks	: $3D: (tile $68-$6F)
Trig_init_686F:
	JSR get_next_trig_id	; 9F97	20 BE 9F	get next trigger id
	LDX $65			; 9F9A	A6 65
	INC $65			; 9F9C	E6 65
	INC $65			; 9F9E	E6 65
	JMP Trig_init_end	; 9FA0	4C B8 9F
; Marks	: $3E: (tile $70-$77)
Trig_init_7077:
	JSR get_next_trig_id	; 9FA3	20 BE 9F	get next trigger id
	LDX $66			; 9FA6	A6 66
	INC $66			; 9FA8	E6 66
	INC $66			; 9FAA	E6 66
	JMP Trig_init_end	; 9FAC	4C B8 9F
; Marks	: $3F: (tile $78-$7F)
Trig_init_787F:
	JSR get_next_trig_id	; 9FAF	20 BE 9F	get next trigger id
	LDX $67			; 9FB2	A6 67
	INC $67			; 9FB4	E6 67
	INC $67			; 9FB6	E6 67
Trig_init_end:
	STA $0401,X		; 9FB8	$9D $01 $04	tile properties - set trigger id
	TXA			; 9FBB	$8A
	LSR A			; 9FBC	$4A
	RTS			; 9FBD	$60
; End of Trig_init

; Name	: get_next_trig_id
; Marks	: get next trigger id
get_next_trig_id:
	LDX $88			; 9FBE	$A6 $88
	INC $88			; 9FC0	$E6 $88
	LDA $0787,X		; 9FC2	$BD $87 $07	up to 8 triggers/treasures per map
	RTS			; 9FC5	$60
; End of get_next_trig_id

; 9FC6 - stale code
.byte $50,$A5,$53,$85,$5E,$A5,$54,$85,$5F,$4C
.byte $93,$9F,$C6,$51,$C6,$50,$A5,$5E,$C5,$53,$D0,$15,$A5,$5F,$C5,$54
.byte $D0,$0F,$20,$3E,$A1,$A5,$61,$F0,$06,$20,$B4,$A2,$4C,$93,$9F,$F0
.byte $22,$20,$58,$A0,$A5,$61,$F0,$06,$20,$B4,$A2,$4C,$93,$9F,$C6,$9E
; ========== Map init code ($9C00-$9FFF) END ==========


;; ========== MAP PROPERTIES START ($2000-$3000) ==========
;; [$A000 :: 0x02000]
; Map properties (256 * 16bytes)
; $A00F = $18 -> $58 = revivification = hero awakes = while surviving
Map_prop:
.byte $00,$10,$2C,$11,$0E,$70,$00,$01,$00,$00,$00,$00,$00,$00,$00,$18
.byte $01,$10,$41,$11,$0E,$70,$00,$00,$04,$02,$10,$03,$05,$00,$00,$11
.byte $02,$10,$23,$10,$0E,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11
.byte $03,$10,$20,$15,$0E,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11
.byte $04,$10,$24,$11,$0E,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11
; $A050 = altea ??
.byte $05,$10,$44,$51,$0E,$0F,$00,$2C,$27,$2B,$5E,$11,$0F,$10,$00,$10
.byte $06,$43,$44,$51,$0E,$72,$00,$2C,$13,$12,$27,$2B,$00,$00,$00,$10
.byte $07,$10,$48,$51,$73,$74,$00,$15,$14,$16,$2B,$27,$00,$00,$00,$10
.byte $08,$10,$44,$51,$75,$76,$00,$16,$15,$14,$2B,$27,$18,$00,$00,$10
.byte $09,$10,$42,$51,$0E,$0B,$01,$27,$1D,$2C,$1C,$2B,$1E,$2D,$00,$10
.byte $0A,$10,$5A,$51,$04,$77,$00,$17,$2B,$1A,$19,$2C,$1B,$27,$00,$10
.byte $0B,$10,$57,$51,$0E,$78,$00,$26,$2B,$25,$24,$27,$2C,$2A,$86,$10
.byte $0C,$10,$44,$51,$0C,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $0D,$10,$24,$47,$0E,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11
.byte $0E,$10,$25,$34,$73,$74,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $23,$10,$41,$10,$0E,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
;; [$A100 :: 0x02110]
.byte $23,$10,$3F,$11,$0E,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $23,$10,$26,$11,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $24,$10,$41,$10,$0E,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $24,$10,$3F,$11,$0E,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $25,$10,$41,$10,$0E,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $25,$10,$3F,$11,$0E,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $25,$10,$26,$11,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $12,$10,$3F,$11,$0E,$0B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $13,$10,$23,$11,$75,$76,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $26,$10,$41,$10,$0E,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $26,$10,$3F,$11,$0E,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $26,$10,$26,$11,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $27,$10,$41,$10,$0E,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $27,$10,$3F,$11,$0E,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $27,$10,$26,$11,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $28,$10,$41,$10,$0E,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
;; [$A200 :: 0x02210]
.byte $28,$10,$3F,$11,$0E,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $28,$10,$26,$11,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $14,$10,$23,$11,$0E,$0B,$00,$23,$00,$00,$00,$00,$00,$00,$00,$10
.byte $4E,$10,$24,$11,$0E,$70,$00,$11,$5E,$26,$00,$00,$00,$00,$00,$10
.byte $29,$10,$41,$10,$0E,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $29,$10,$3F,$11,$0E,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $0F,$10,$26,$11,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $24,$10,$23,$11,$0E,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $7F,$10,$24,$55,$0E,$0F,$00,$12,$13,$14,$00,$00,$00,$00,$00,$0C
.byte $7F,$33,$49,$36,$0E,$0F,$00,$15,$16,$17,$00,$00,$00,$00,$00,$0F
.byte $41,$25,$42,$66,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $10,$10,$22,$11,$0E,$79,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $11,$10,$4E,$10,$03,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
.byte $7F,$25,$14,$55,$0E,$0F,$00,$18,$09,$19,$2F,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0F,$00,$18,$09,$19,$2F,$00,$00,$00,$00,$0E
.byte $15,$25,$14,$55,$0E,$0B,$02,$30,$2E,$00,$00,$00,$00,$00,$00,$0E
;; [$A300 :: 0x02310]
.byte $7F,$25,$14,$67,$0E,$0F,$01,$03,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $7F,$10,$24,$55,$0E,$0F,$00,$4A,$00,$00,$00,$00,$00,$00,$00,$0C
.byte $7F,$46,$45,$39,$0E,$0F,$03,$1A,$1B,$33,$1C,$1D,$1E,$00,$00,$0F
.byte $7F,$46,$45,$39,$0E,$0F,$00,$1F,$20,$34,$35,$21,$22,$23,$00,$0F
.byte $7F,$46,$45,$39,$0E,$0F,$00,$3A,$39,$E7,$24,$38,$25,$00,$00,$0F
.byte $7F,$46,$45,$39,$0E,$0F,$00,$3A,$39,$E7,$24,$38,$25,$00,$00,$0F
.byte $7F,$46,$45,$39,$0E,$0F,$00,$3A,$39,$E7,$24,$38,$25,$00,$00,$0F
.byte $7F,$46,$45,$39,$0E,$0F,$00,$3A,$39,$E7,$24,$38,$25,$00,$00,$0F
.byte $FF,$2A,$28,$17,$0E,$0F,$00,$D0,$3B,$3C,$5F,$3D,$36,$37,$00,$0F
.byte $FF,$2A,$28,$17,$0E,$0F,$00,$D0,$3B,$3C,$5F,$3D,$36,$37,$00,$0F
.byte $FF,$2A,$28,$17,$0E,$0F,$00,$D0,$3B,$3C,$5F,$3D,$36,$37,$00,$0F
.byte $7F,$2A,$28,$17,$0E,$0F,$00,$27,$28,$3E,$E8,$29,$2A,$00,$00,$0F
.byte $7F,$2A,$28,$17,$0E,$0F,$00,$27,$28,$3E,$E8,$29,$2A,$00,$00,$0F
.byte $7F,$2A,$28,$17,$0E,$0F,$00,$27,$28,$3E,$E8,$29,$2A,$00,$00,$0F
.byte $59,$2A,$28,$17,$0D,$0D,$03,$0C,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$46,$45,$39,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14
;; [$A400 :: 0x02410]
.byte $16,$10,$44,$51,$0E,$0B,$00,$2C,$20,$1F,$27,$2B,$80,$22,$21,$10
.byte $97,$10,$24,$47,$0E,$70,$04,$D1,$D2,$D3,$43,$50,$4D,$45,$00,$0C
.byte $97,$10,$24,$47,$0E,$70,$04,$D1,$D2,$D3,$43,$50,$4D,$45,$00,$0C
.byte $18,$10,$24,$55,$0E,$70,$00,$2E,$46,$EC,$ED,$41,$48,$2F,$00,$0C
.byte $18,$10,$24,$55,$0E,$70,$00,$2E,$46,$EC,$ED,$41,$48,$2F,$00,$0C
.byte $18,$10,$24,$55,$0E,$70,$00,$2E,$46,$EC,$ED,$41,$48,$2F,$00,$0C
.byte $1E,$10,$24,$55,$0E,$70,$00,$57,$4E,$49,$44,$00,$00,$00,$00,$0C
.byte $1E,$10,$24,$55,$0E,$70,$00,$57,$4E,$49,$44,$00,$00,$00,$00,$0C
.byte $1E,$10,$24,$55,$0E,$70,$00,$57,$4E,$49,$44,$00,$00,$00,$00,$0C
.byte $1A,$10,$24,$55,$0E,$70,$00,$31,$47,$00,$00,$00,$00,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$70,$00,$4B,$00,$00,$00,$00,$00,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$70,$00,$4C,$00,$00,$00,$00,$00,$00,$00,$0C
.byte $97,$10,$24,$47,$0E,$70,$04,$D1,$D2,$D3,$43,$50,$4D,$45,$00,$0C
.byte $7F,$10,$24,$55,$0E,$70,$00,$30,$31,$32,$00,$00,$00,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$70,$00,$33,$34,$35,$00,$00,$00,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C
;; [$A500 :: 0x02510]
.byte $7F,$31,$14,$34,$0E,$70,$00,$36,$51,$37,$56,$38,$00,$00,$00,$0C
.byte $7F,$17,$14,$34,$0E,$70,$00,$56,$39,$52,$56,$3A,$3B,$00,$00,$0C
.byte $7F,$2E,$14,$34,$0E,$70,$00,$56,$3C,$53,$56,$56,$3D,$3E,$00,$0C
.byte $7F,$2B,$14,$34,$0E,$70,$00,$56,$EE,$3F,$56,$40,$54,$00,$00,$0C
.byte $7F,$29,$14,$30,$0E,$70,$00,$56,$56,$56,$56,$55,$56,$EF,$00,$0C
.byte $7F,$29,$14,$30,$0E,$70,$04,$0B,$00,$00,$00,$00,$00,$00,$00,$0C
.byte $7F,$31,$14,$30,$0E,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C
.byte $19,$10,$24,$55,$0E,$70,$05,$00,$00,$00,$00,$00,$00,$00,$00,$0C
.byte $1B,$10,$24,$47,$79,$06,$00,$5C,$5A,$28,$5D,$41,$42,$00,$00,$0C
.byte $1B,$10,$24,$47,$79,$06,$00,$5C,$5A,$28,$5D,$41,$42,$00,$00,$0C
.byte $1C,$10,$24,$55,$79,$06,$00,$43,$59,$5B,$5D,$58,$00,$00,$00,$0C
.byte $5A,$10,$24,$55,$0E,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$0F,$00,$44,$45,$46,$CC,$C3,$BE,$60,$5F,$0C
.byte $7F,$10,$24,$55,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C
; $A5EF = $11 -> $51 = BGM_rebel_army
.byte $01,$10,$41,$11,$0E,$70,$00,$00,$04,$02,$10,$03,$05,$00,$00,$11
.byte $1D,$10,$2B,$34,$0D,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C
;; [$A600 :: 0x02610]
.byte $2F,$10,$24,$47,$00,$00,$00,$6A,$61,$62,$47,$00,$00,$00,$00,$0C
.byte $58,$10,$24,$55,$0E,$71,$00,$60,$00,$00,$00,$00,$00,$00,$00,$0C
.byte $FF,$10,$24,$55,$0E,$0F,$00,$D4,$63,$00,$00,$00,$00,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$0F,$00,$64,$E3,$00,$00,$00,$00,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$0F,$00,$6A,$67,$66,$6A,$6A,$69,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$0F,$00,$6A,$67,$66,$6A,$6A,$69,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$0F,$00,$6A,$68,$E4,$6A,$65,$00,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$0F,$00,$49,$4A,$4B,$00,$00,$00,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$0F,$00,$4C,$4D,$4E,$00,$00,$00,$00,$00,$0C
.byte $5B,$10,$24,$55,$08,$08,$00,$07,$00,$00,$00,$00,$00,$00,$00,$0C
.byte $7F,$10,$24,$55,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C
.byte $1F,$10,$12,$47,$0E,$0B,$06,$FC,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $20,$25,$14,$34,$0E,$70,$00,$FE,$6B,$00,$00,$00,$00,$00,$00,$0E
.byte $21,$25,$14,$34,$0E,$70,$00,$6E,$70,$70,$EB,$6F,$70,$70,$00,$0E
.byte $7F,$25,$14,$34,$0E,$70,$00,$6C,$FD,$00,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$34,$0E,$70,$00,$4F,$50,$51,$00,$00,$00,$00,$00,$0E
;; [$A700 :: 0x02710]
.byte $7F,$25,$14,$34,$0E,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $5C,$25,$14,$55,$0E,$0B,$00,$72,$7C,$7E,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0B,$00,$73,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$47,$0E,$0B,$00,$75,$52,$74,$7F,$53,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0B,$00,$54,$55,$76,$56,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0B,$00,$54,$55,$76,$56,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0B,$00,$F7,$77,$00,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0B,$00,$78,$57,$7D,$58,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0B,$00,$79,$7A,$00,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0B,$00,$71,$F8,$7B,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0B,$00,$71,$F8,$7B,$00,$00,$00,$00,$00,$0E
.byte $5C,$25,$14,$55,$0E,$0B,$00,$72,$7C,$7E,$00,$00,$00,$00,$00,$0E
.byte $2A,$25,$14,$55,$0E,$0B,$07,$59,$5A,$00,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0B,$00,$5B,$5C,$5D,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0B,$00,$08,$09,$0A,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$55,$0E,$0B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E
;; [$A800 :: 0x02810]
.byte $2B,$10,$26,$11,$0E,$70,$00,$FB,$00,$00,$00,$00,$00,$00,$00,$10
.byte $FF,$4C,$25,$3A,$79,$06,$08,$D5,$82,$84,$83,$00,$00,$00,$00,$0F
.byte $5D,$4C,$25,$3A,$79,$06,$00,$62,$87,$63,$88,$E9,$81,$64,$89,$0F
.byte $5D,$4C,$25,$3A,$79,$06,$00,$62,$87,$63,$88,$E9,$81,$64,$89,$0F
.byte $5D,$4C,$25,$3A,$79,$06,$00,$62,$87,$63,$88,$E9,$81,$64,$89,$0F
.byte $5D,$4C,$25,$3A,$79,$06,$00,$62,$87,$63,$88,$E9,$81,$64,$89,$0F
.byte $5E,$10,$41,$10,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10
.byte $7F,$30,$25,$39,$79,$06,$00,$65,$66,$8D,$8C,$8B,$85,$67,$00,$0F
.byte $7F,$30,$25,$39,$06,$06,$00,$65,$66,$8D,$8C,$8B,$85,$67,$00,$0F
.byte $7F,$30,$25,$39,$06,$06,$00,$65,$66,$8D,$8C,$8B,$85,$67,$00,$0F
.byte $7F,$30,$25,$39,$06,$06,$00,$65,$66,$8D,$8C,$8B,$85,$67,$00,$0F
.byte $7F,$30,$25,$39,$06,$06,$00,$8E,$68,$8F,$8A,$00,$00,$00,$00,$0F
.byte $7F,$30,$25,$39,$06,$06,$00,$8E,$68,$8F,$8A,$00,$00,$00,$00,$0F
.byte $7F,$30,$25,$39,$06,$06,$00,$8E,$68,$8F,$8A,$00,$00,$00,$00,$0F
.byte $38,$30,$25,$39,$79,$06,$00,$91,$91,$90,$91,$69,$6A,$6B,$EA,$0F
.byte $38,$30,$25,$39,$79,$06,$00,$91,$91,$90,$91,$69,$6A,$6B,$EA,$0F
;; [$A900 :: 0x02910]
.byte $38,$30,$25,$39,$79,$06,$00,$91,$91,$90,$91,$69,$6A,$6B,$EA,$0F
.byte $7F,$4C,$25,$3A,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$10,$40,$47,$0E,$0F,$09,$6C,$6D,$6E,$93,$6F,$00,$00,$00,$0D
.byte $7F,$25,$3D,$1E,$0E,$0F,$00,$A5,$70,$71,$72,$94,$00,$00,$00,$0D
.byte $7F,$21,$3D,$37,$0E,$0F,$00,$73,$74,$96,$75,$95,$A5,$A5,$A5,$0D
.byte $7F,$21,$3D,$37,$0E,$0F,$00,$73,$74,$96,$75,$95,$A5,$A5,$A5,$0D
.byte $60,$21,$3D,$37,$78,$06,$00,$97,$00,$00,$00,$00,$00,$00,$00,$0D
.byte $7F,$51,$3B,$53,$0E,$0F,$00,$76,$99,$98,$77,$78,$00,$00,$00,$0D
.byte $7F,$4D,$5B,$51,$0E,$0F,$00,$9A,$79,$7A,$00,$00,$00,$00,$00,$0D
.byte $7F,$4D,$5B,$51,$0E,$0F,$00,$9A,$79,$7A,$00,$00,$00,$00,$00,$0D
.byte $61,$4D,$5B,$51,$7B,$7A,$00,$9B,$00,$00,$00,$00,$00,$00,$00,$0D
.byte $7F,$1F,$14,$59,$0E,$0F,$00,$7B,$A5,$A5,$7C,$9C,$00,$00,$00,$0D
.byte $7F,$1F,$14,$59,$0E,$0F,$00,$9D,$00,$00,$00,$00,$00,$00,$00,$0D
.byte $7F,$10,$24,$62,$0E,$0F,$00,$A5,$7D,$7E,$9E,$A5,$A5,$7F,$00,$0D
.byte $62,$10,$24,$62,$7C,$7D,$00,$9F,$00,$00,$00,$00,$00,$00,$00,$0D
.byte $7F,$10,$2F,$62,$0E,$0F,$00,$F3,$A5,$A0,$A5,$A5,$A5,$A5,$00,$0D
;; [$AA00 :: 0x02A10]
.byte $7F,$10,$2F,$62,$0E,$0F,$00,$A1,$00,$00,$00,$00,$00,$00,$00,$0D
.byte $7F,$2E,$25,$5C,$0E,$0F,$00,$F4,$A5,$A2,$A5,$A5,$80,$81,$00,$0D
.byte $7F,$2E,$25,$5C,$0E,$0F,$00,$A3,$00,$00,$00,$00,$00,$00,$00,$0D
.byte $2C,$10,$13,$61,$07,$07,$00,$A4,$00,$00,$00,$00,$00,$00,$00,$0D
.byte $2D,$10,$24,$55,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D
.byte $7F,$10,$24,$55,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D
.byte $7F,$51,$1D,$1C,$0E,$0F,$00,$A7,$A8,$00,$00,$00,$00,$00,$00,$0E
.byte $7F,$58,$1D,$3A,$0E,$0F,$00,$82,$AA,$A9,$00,$00,$00,$00,$00,$0E
.byte $7F,$58,$1D,$3A,$0E,$0F,$00,$82,$AA,$A9,$00,$00,$00,$00,$00,$0E
.byte $7F,$55,$1D,$4A,$0E,$0F,$00,$AC,$83,$AB,$00,$00,$00,$00,$00,$0E
.byte $7F,$55,$1D,$4A,$0E,$0F,$00,$AC,$83,$AB,$00,$00,$00,$00,$00,$0E
.byte $7F,$34,$1D,$51,$0E,$0F,$00,$84,$85,$AE,$AD,$00,$00,$00,$00,$0E
.byte $7F,$34,$1D,$51,$0E,$0F,$00,$84,$85,$AE,$AD,$00,$00,$00,$00,$0E
.byte $7F,$3A,$1D,$59,$0E,$0F,$00,$B0,$AF,$F5,$86,$00,$00,$00,$00,$0E
.byte $7F,$3A,$1D,$59,$0E,$0F,$00,$B0,$AF,$F5,$86,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$60,$0E,$0F,$00,$B1,$B2,$F6,$B2,$B2,$B2,$00,$00,$0E
;; [$AB00 :: 0x02B10]
.byte $7F,$25,$14,$60,$0E,$0F,$00,$B1,$B2,$F6,$B2,$B2,$B2,$00,$00,$0E
.byte $63,$25,$14,$63,$0E,$0B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$60,$0E,$0B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $E4,$25,$42,$3A,$0E,$0B,$0A,$D6,$B9,$D7,$B4,$00,$00,$00,$00,$0F
.byte $7F,$25,$42,$3A,$0E,$0B,$00,$89,$B5,$BC,$BC,$BC,$8A,$8B,$00,$0F
.byte $7F,$25,$42,$3A,$0E,$0B,$00,$B6,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $FF,$25,$42,$3A,$0E,$0B,$00,$BA,$BC,$BC,$BC,$D8,$D9,$00,$00,$0F
.byte $7F,$43,$3E,$3A,$0E,$0B,$00,$BC,$8E,$B8,$00,$00,$00,$00,$00,$0F
.byte $7F,$43,$3E,$3A,$0E,$0B,$00,$BC,$E0,$BB,$BC,$00,$00,$00,$00,$0F
.byte $7F,$25,$42,$3A,$0E,$0B,$00,$05,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $34,$25,$42,$3A,$0E,$0B,$00,$B7,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $65,$43,$3E,$3A,$0E,$0B,$00,$04,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$25,$42,$3A,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$2D,$32,$23,$0E,$0F,$00,$BE,$8F,$90,$00,$00,$00,$00,$00,$0F
.byte $35,$2D,$32,$23,$0E,$70,$00,$BF,$91,$00,$00,$00,$00,$00,$00,$0F
.byte $66,$2D,$32,$52,$0F,$0F,$0B,$92,$F2,$00,$00,$00,$00,$00,$00,$0F
;; [$AC00 :: 0x02C10]
.byte $B6,$25,$10,$3B,$0E,$0B,$00,$CB,$CB,$CB,$C1,$DA,$C2,$C4,$00,$0E
.byte $7F,$25,$10,$3B,$0E,$0B,$00,$C3,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $37,$25,$10,$3B,$0E,$79,$00,$E5,$94,$95,$96,$97,$00,$00,$00,$0E
.byte $37,$25,$10,$3B,$0E,$79,$00,$E5,$94,$95,$96,$97,$00,$00,$00,$0E
.byte $39,$25,$10,$3B,$0E,$0B,$00,$C6,$C8,$00,$00,$00,$00,$00,$00,$0E
.byte $39,$25,$10,$3B,$0E,$0B,$00,$C6,$C8,$00,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$10,$3B,$0E,$0B,$00,$C7,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $3A,$25,$10,$3B,$0E,$0B,$00,$98,$99,$E6,$9A,$C5,$00,$00,$00,$0E
.byte $7F,$25,$10,$3B,$0E,$0B,$00,$C9,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $3B,$25,$10,$3B,$0E,$0B,$00,$CA,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $3C,$25,$10,$3B,$0E,$0B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$10,$3B,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E
.byte $67,$10,$49,$39,$06,$06,$0C,$D6,$9B,$D6,$9C,$CD,$D6,$00,$00,$0F
.byte $7F,$10,$49,$39,$0E,$78,$00,$CE,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$10,$49,$39,$0E,$78,$00,$D6,$D6,$9D,$9E,$D6,$CF,$D6,$00,$0F
.byte $7F,$10,$49,$39,$0E,$78,$00,$D0,$00,$00,$00,$00,$00,$00,$00,$0F
;; [$AD00 :: 0x02D10]
.byte $7F,$33,$49,$36,$0E,$78,$00,$9F,$D1,$F0,$D6,$00,$00,$00,$00,$0F
.byte $7F,$33,$49,$36,$0E,$78,$00,$D2,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$33,$49,$36,$0E,$78,$00,$A0,$D6,$29,$D6,$D3,$00,$00,$00,$0F
.byte $7F,$33,$49,$36,$0E,$78,$00,$D4,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$33,$49,$36,$06,$06,$00,$D5,$A1,$A2,$A3,$A4,$F1,$A5,$00,$0F
.byte $7F,$33,$49,$36,$0E,$0F,$00,$0D,$A6,$A7,$00,$00,$00,$00,$00,$0F
.byte $7F,$33,$49,$36,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $BD,$4C,$5E,$34,$0E,$0B,$0D,$DB,$DC,$D8,$00,$00,$00,$00,$00,$0F
.byte $7F,$4C,$5E,$34,$0E,$0B,$00,$DF,$DA,$E1,$AA,$AB,$00,$00,$00,$0F
.byte $7F,$4C,$5E,$34,$0E,$0B,$00,$DF,$DA,$E1,$AA,$AB,$00,$00,$00,$0F
.byte $7F,$4C,$5E,$34,$0E,$0B,$00,$D9,$AC,$DB,$00,$00,$00,$00,$00,$0F
.byte $7F,$30,$51,$18,$0E,$0B,$00,$AD,$AE,$DC,$DF,$AF,$B0,$00,$00,$0F
.byte $7F,$30,$51,$18,$0E,$0B,$00,$B1,$DF,$DD,$E2,$00,$00,$00,$00,$0F
.byte $3E,$30,$51,$18,$0C,$0C,$00,$DE,$00,$00,$00,$00,$00,$00,$00,$10
.byte $3F,$30,$51,$18,$08,$08,$00,$D7,$B2,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$4C,$5E,$34,$0E,$0B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F
;; [$AE00 :: 0x02E10]
.byte $7F,$25,$64,$39,$0E,$0F,$0E,$EC,$EC,$B3,$E1,$B4,$00,$00,$00,$0F
.byte $7F,$25,$64,$39,$0E,$0F,$00,$E2,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$25,$64,$19,$0E,$0F,$00,$EC,$E3,$B5,$B6,$EC,$F9,$EC,$EC,$0F
.byte $7F,$25,$64,$19,$0E,$0F,$00,$E4,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $42,$25,$64,$3A,$0E,$0F,$00,$EC,$EC,$FA,$EC,$EC,$EC,$E5,$00,$0F
.byte $7F,$25,$64,$3A,$0E,$0F,$00,$E6,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$25,$64,$4C,$0E,$0F,$00,$EB,$FB,$B7,$EC,$E7,$00,$00,$00,$0F
.byte $7F,$25,$64,$4C,$0E,$0F,$00,$E8,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $69,$25,$65,$3A,$0E,$0F,$00,$EC,$B8,$B9,$BA,$E9,$00,$00,$00,$0F
.byte $7F,$25,$65,$3A,$0E,$0F,$00,$EA,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$25,$65,$3A,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$25,$65,$3A,$0E,$0F,$00,$BB,$BC,$BD,$00,$00,$00,$00,$00,$0F
.byte $7F,$25,$64,$39,$0E,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F
.byte $7F,$68,$24,$5D,$0E,$0F,$00,$EE,$00,$00,$00,$00,$00,$00,$00,$0B
.byte $7F,$68,$24,$5D,$0E,$0F,$00,$EF,$06,$00,$00,$00,$00,$00,$00,$0B
.byte $7F,$69,$2F,$5D,$0E,$0F,$00,$BF,$F0,$00,$00,$00,$00,$00,$00,$0B
;; [$AF00 :: 0x02F00]
.byte $7F,$69,$2F,$5D,$0E,$0F,$00,$F6,$F1,$F2,$F3,$F4,$00,$00,$00,$0B
.byte $7F,$5F,$1A,$5D,$0E,$0F,$00,$FC,$FA,$FD,$00,$00,$00,$00,$00,$0B
.byte $7F,$5F,$1A,$5D,$0E,$0F,$00,$FC,$FA,$FD,$00,$00,$00,$00,$00,$0B
.byte $7F,$56,$1B,$5D,$0E,$0F,$00,$FE,$FF,$F5,$00,$00,$00,$00,$00,$0B
.byte $7F,$56,$1B,$5D,$0E,$0F,$00,$FE,$FF,$F5,$00,$00,$00,$00,$00,$0B
.byte $7F,$69,$2F,$5D,$0E,$0F,$00,$F6,$F1,$F2,$F3,$F4,$00,$00,$00,$0B
.byte $7F,$3F,$24,$5D,$0E,$0F,$00,$C0,$F7,$00,$00,$00,$00,$00,$00,$0B
.byte $7F,$3A,$1A,$4F,$0E,$0F,$00,$C1,$F8,$C2,$00,$00,$00,$00,$00,$0B
.byte $7F,$3A,$6A,$4F,$0E,$0F,$00,$F9,$00,$00,$00,$00,$00,$00,$00,$0B
.byte $6A,$3A,$6A,$4F,$0E,$0B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0B
.byte $7F,$19,$19,$19,$0E,$0F,$00,$0F,$00,$00,$00,$00,$00,$00,$00,$0B
.byte $7F,$10,$26,$11,$0E,$0F,$00,$C4,$C5,$C6,$C7,$C8,$C9,$CA,$CB,$10
.byte $20,$25,$14,$34,$0E,$0B,$00,$FE,$6B,$00,$00,$00,$00,$00,$00,$0E
.byte $7F,$25,$14,$34,$0E,$0F,$00,$6E,$70,$70,$EB,$6F,$70,$70,$00,$0E
.byte $7F,$25,$14,$34,$0E,$0F,$00,$6C,$FD,$00,$00,$00,$00,$00,$00,$0E
.byte $2E,$10,$24,$55,$0E,$70,$00,$31,$47,$00,$00,$00,$00,$00,$00,$11
;; ========== MAP PROPERTIES END ($2000-$3000) ==========


;; ========== map initial x positions and fill tile ($B000-$B0FF) START ==========
;; [$B000 :: 0x03000]
Map_init_xfill:
.byte $29,$23,$27,$23,$29,$0D,$00,$00,$00,$03,$00,$00,$00,$60,$60,$25
.byte $39,$25,$25,$39,$25,$39,$25,$23,$29,$25,$39,$25,$25,$39,$25,$25
.byte $39,$25,$2D,$23,$25,$39,$2B,$39,$27,$27,$3B,$2F,$29,$3D,$2D,$2D
.byte $27,$23,$20,$81,$81,$8B,$8F,$9F,$81,$8D,$9F,$21,$39,$3D,$27,$2F
.byte $00,$6F,$65,$6F,$6F,$61,$6F,$6F,$65,$2F,$23,$23,$7B,$27,$27,$27
.byte $2D,$35,$33,$29,$23,$27,$27,$67,$65,$7D,$69,$27,$27,$27,$2D,$2B
.byte $79,$2D,$67,$75,$7D,$65,$65,$27,$27,$27,$27,$63,$21,$23,$27,$27
.byte $27,$7D,$29,$62,$71,$75,$6F,$7D,$7D,$63,$6F,$7D,$7B,$27,$27,$27
.byte $21,$21,$BB,$BD,$A1,$B9,$27,$B1,$A1,$B7,$BD,$A1,$BD,$BB,$23,$2F
.byte $3D,$25,$60,$71,$7B,$63,$25,$71,$65,$6B,$25,$63,$25,$63,$25,$67
.byte $25,$7B,$25,$6D,$2D,$27,$61,$67,$75,$73,$71,$65,$6D,$6F,$7B,$6F
.byte $63,$6F,$27,$20,$A3,$27,$BD,$2B,$BB,$23,$25,$27,$25,$20,$3D,$3B
.byte $40,$27,$55,$43,$5D,$53,$27,$45,$27,$45,$2F,$27,$20,$27,$2B,$27
.byte $37,$27,$31,$27,$2B,$27,$25,$25,$CB,$D9,$CF,$C7,$DD,$27,$23,$25
.byte $25,$27,$C1,$27,$21,$27,$C1,$27,$C1,$27,$21,$27,$25,$62,$7D,$66
.byte $71,$2F,$3B,$2B,$35,$63,$76,$22,$F0,$EF,$27,$23,$23,$39,$29,$6F
;; ========== map initial x positions and fill tile ($B000-$B0FF) END ==========


;; ========== map initial y positions and fill tile ($B100-$B1FF) START ==========
;; [$B100 :: 0x03100]

.byte $14,$04,$0C,$0A,$1C,$0D,$00,$00,$00,$1C,$00,$00,$00,$00,$00,$0A
.byte $0A,$1C,$0A,$0A,$0A,$0A,$1C,$1C,$1C,$0A,$0A,$1C,$0A,$0A,$1C,$0A
.byte $0A,$1C,$1C,$04,$0A,$0A,$0E,$1C,$1C,$1C,$02,$1C,$1A,$16,$1A,$1C
.byte $1C,$14,$00,$14,$0A,$12,$1C,$1C,$1C,$10,$04,$04,$04,$12,$1C,$0F
.byte $00,$0E,$1A,$16,$0C,$1C,$12,$0D,$1C,$1A,$02,$02,$08,$1C,$1C,$1B
.byte $0E,$18,$04,$14,$18,$1C,$1B,$1C,$1A,$04,$0A,$1C,$1C,$1B,$1C,$1C
.byte $04,$1C,$14,$08,$06,$1A,$10,$1C,$1C,$1C,$1B,$14,$0E,$16,$1C,$1C
.byte $1B,$06,$1C,$04,$12,$0C,$1A,$1C,$06,$0A,$0C,$1C,$0A,$1C,$1C,$1B
.byte $1C,$1C,$0C,$1C,$1C,$1E,$1C,$16,$1A,$1A,$16,$1C,$18,$0E,$02,$0E
.byte $05,$1B,$00,$12,$18,$08,$0A,$0A,$0E,$10,$0A,$08,$0A,$1A,$0A,$1C
.byte $0A,$18,$0A,$1C,$1C,$1B,$18,$0E,$12,$10,$0C,$1C,$10,$08,$10,$0E
.byte $18,$1A,$1B,$00,$18,$1C,$02,$18,$1A,$18,$1C,$1C,$1B,$00,$1C,$12
.byte $00,$1C,$02,$02,$02,$0E,$1C,$06,$1C,$0A,$1C,$1B,$00,$1C,$0E,$1C
.byte $06,$1C,$04,$1C,$0E,$1C,$1B,$1D,$0E,$08,$0A,$18,$02,$1A,$06,$1B
.byte $03,$1C,$16,$1C,$02,$1C,$1C,$1C,$1A,$1C,$10,$1C,$1B,$06,$0C,$09
.byte $1B,$1C,$1C,$1C,$1C,$17,$14,$18,$12,$1D,$04,$1A,$14,$09,$1A,$18
;; ========== map initial y positions and fill tile ($B100-$B1FF) END ==========


;; ========== bg tilemap id for each map ($B200-$B2FF) START ==========
;; [$B200 :: 0x03200]
bg_tilemap_id:
.byte $00,$01,$02,$03,$A9,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
.byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$9B,$9C,$0E,$0E,$0E,$0E,$0E,$0E,$0E
.byte $0E,$0E,$9D,$9E,$0E,$0E,$0F,$0E,$16,$16,$10,$12,$13,$14,$14,$15
.byte $B2,$AB,$17,$18,$19,$19,$19,$19,$1A,$1A,$1A,$1B,$1B,$1B,$1C,$B3
.byte $1E,$1F,$1F,$20,$20,$20,$21,$21,$21,$22,$B4,$B4,$1F,$16,$16,$25
.byte $26,$27,$28,$29,$2A,$1C,$25,$B1,$2B,$2B,$2C,$2D,$2E,$25,$01,$AC
.byte $30,$31,$32,$33,$34,$34,$35,$16,$16,$B5,$25,$36,$37,$38,$AF,$16
.byte $25,$39,$3A,$3B,$3C,$3C,$3D,$3E,$3F,$40,$40,$39,$41,$16,$16,$25
.byte $AD,$42,$43,$43,$43,$43,$B0,$44,$44,$44,$44,$45,$45,$45,$46,$46
.byte $46,$1D,$47,$48,$49,$49,$24,$4A,$4B,$4B,$24,$4C,$24,$4D,$24,$4E
.byte $24,$4F,$24,$50,$51,$25,$52,$53,$53,$54,$54,$55,$55,$56,$56,$57
.byte $57,$58,$25,$59,$5A,$23,$5B,$5C,$5D,$AA,$5E,$5F,$1D,$80,$81,$82
.byte $83,$23,$84,$84,$85,$85,$23,$86,$23,$87,$88,$25,$89,$23,$8A,$23
.byte $8B,$23,$8C,$23,$8D,$16,$1D,$8E,$8F,$8F,$90,$91,$92,$93,$94,$1D
.byte $95,$23,$96,$23,$97,$23,$98,$23,$99,$23,$9A,$16,$1D,$9F,$A0,$A1
.byte $A2,$A3,$A3,$A4,$A4,$A2,$A5,$A6,$A7,$A8,$11,$AE,$37,$38,$AF,$22
;; ========== bg tilemap id for each map ($B200-$B2FF) END ==========


;; ========== tileset id for each map ($B300-$B3FF) START ==========
;; [$B300 :: 0x03300]
Tile_id:
.byte $43,$43,$43,$43,$23,$00,$00,$00,$00,$00,$00,$00,$00,$23,$65,$43
.byte $43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43
.byte $43,$43,$43,$43,$43,$43,$43,$43,$23,$67,$67,$43,$63,$2B,$2B,$6B
.byte $4B,$23,$69,$89,$89,$89,$89,$89,$89,$89,$89,$89,$89,$89,$49,$23
.byte $00,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23
.byte $23,$23,$23,$23,$23,$43,$23,$23,$23,$23,$23,$23,$23,$23,$43,$00
.byte $23,$23,$23,$23,$23,$23,$23,$23,$23,$83,$23,$23,$23,$23,$43,$23
.byte $23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23
.byte $43,$67,$67,$67,$67,$67,$43,$67,$67,$67,$67,$67,$67,$67,$67,$67
.byte $67,$67,$2B,$2B,$2B,$2B,$2B,$2B,$2B,$2B,$2B,$2B,$2B,$2B,$2B,$2B
.byte $2B,$2B,$2B,$2B,$2B,$2B,$89,$89,$89,$89,$89,$89,$89,$89,$89,$23
.byte $23,$23,$23,$67,$67,$67,$67,$67,$67,$67,$67,$67,$67,$4D,$4D,$8D
.byte $91,$91,$91,$91,$31,$31,$91,$91,$91,$91,$91,$91,$67,$67,$67,$67
.byte $67,$67,$67,$67,$67,$67,$67,$73,$93,$93,$93,$93,$93,$93,$93,$93
.byte $73,$93,$93,$93,$93,$93,$93,$93,$93,$93,$93,$93,$93,$83,$83,$83
.byte $83,$8F,$8F,$8F,$8F,$83,$83,$8F,$8F,$8F,$8F,$43,$23,$23,$43,$23
;; ========== tileset id for each map ($B300-$B3FF) END ==========


;; ========== world map entrance x position ($B400-$B43F) START ==========
;; [$B400 :: 0x03400]
wmap_ent_x:
.byte $09,$02,$1D,$02,$1D,$13,$13,$0F,$02,$0A,$08,$03,$1D,$0D,$0F,$09
.byte $0F,$1D,$03,$05,$0F,$1B,$1B,$1D,$01,$1D,$1B,$1D,$01,$05,$0F,$0F
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; ========== world map entrance x position ($B400-$B3FF) END ==========

;; ========== world map entrance y position ($B440-$B47F) START ==========
;; [$B440 :: 0x03440]
wmap_ent_y:
.byte $0E,$13,$19,$17,$1A,$02,$02,$02,$17,$1C,$08,$03,$03,$1D,$1D,$1D
.byte $1D,$1B,$1B,$03,$1D,$03,$19,$1B,$1A,$03,$19,$04,$18,$03,$1A,$18
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; ========== world map entrance y position ($B440-$B47F) END ==========

;; ========== world map entrance map ids ($B480-$B4BF) START ==========
;; [$B480 :: 0x03480]
wmap_ent_id:
.byte $00,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$2F,$32,$40,$41,$58
.byte $60,$6B,$71,$81,$92,$B3,$B3,$BD,$C0,$CC,$D7,$ED,$A6,$E0,$49,$FF
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; ========== world map entrance map ids ($B480-$B4BF) END ==========

;; ========== map exit x position (to world map) ($B4C0-$B4DF) START ==========
;; [$B4C0 :: 0x034C0]
.byte $5B,$AD,$AB,$78,$47,$47,$E6,$EB,$D5,$35,$6B,$39,$32,$B1,$A0,$E9
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; ========== map exit x position (to world map) ($B4C0-$B4DF) END ==========

;; ========== map exit y position (to world map) ($B4E0-$B4FF) START ==========
;; [$B4E0 :: 0x034E0]
.byte $74,$3A,$34,$E7,$4B,$48,$B3,$AE,$1C,$7B,$2B,$84,$B7,$0E,$8F,$B2
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; ========== map exit y position (to world map) ($B4E0-$B4FF) END ==========

;; ========== multi npc properties (64 * 35 bytes) ($B500-$BDFF) START ==========
;; [$B500 :: 0x03500]

.byte $DF,$A9,$0E,$E0,$87,$0E,$E1,$8B,$0E,$FF,$E9,$06,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$E2,$C8,$06,$E3,$C8,$05,$16,$02,$17,$64,$8C,$0C
.byte $65,$C9,$11,$66,$0F,$15,$67,$91,$0F,$68,$8F,$0F,$69,$08,$0D,$6A
.byte $12,$12,$6B,$8B,$13,$6C,$89,$13,$20,$A6,$06,$09,$87,$06,$E9,$C5
.byte $09,$60,$86,$0C,$60,$88,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$83,$09,$EB
.byte $C3,$0B,$EC,$C3,$0B,$E2,$C3,$06,$E3,$C3,$06,$15,$C3,$06,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $01,$87,$13,$08,$85,$13,$0D,$8B,$13,$61,$88,$1C,$61,$8A,$1C,$63
.byte $0E,$16,$62,$04,$19,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$0B,$8D,$09,$10,$0D,$10,$6D,$08,$13,$6E,$10,$14
.byte $6F,$16,$09,$AD,$C4,$12,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$73,$13,$17,$71,$14,$07,$72,$04
.byte $06,$70,$09,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$DC,$C7,$15,$14
;; [$B600 :: 0x03600]
.byte $C5,$16,$74,$17,$1A,$75,$15,$04,$76,$10,$0D,$77,$11,$15,$78,$08
.byte $0B,$79,$1A,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $7C,$18,$19,$7D,$0E,$11,$7E,$12,$09,$7F,$0F,$04,$DC,$D4,$1A,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$1A,$92,$10,$23,$D2,$10,$35,$CB,$19,$51,$0B,$1D
.byte $88,$C8,$04,$89,$11,$0B,$8A,$0F,$0E,$8B,$17,$15,$8C,$13,$07,$8D
.byte $0E,$11,$8E,$12,$0C,$8F,$12,$05,$53,$D9,$09,$82,$12,$08,$83,$11
.byte $0E,$84,$D2,$0A,$85,$07,$1A,$86,$D1,$0A,$87,$08,$06,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$B8,$0F,$05,$B9
.byte $0F,$0D,$BA,$16,$0A,$BB,$16,$0F,$BC,$1B,$16,$BD,$1C,$16,$BE,$06
.byte $16,$BF,$07,$1A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $4D,$14,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$04,$C9,$13,$0E,$CD,$13,$90,$07,$15,$90,$0A,$18
.byte $90,$0F,$19,$90,$12,$16,$91,$08,$16,$91,$0B,$18,$91,$0C,$15,$91
.byte $0C,$18,$00,$00,$00,$00,$00,$00,$15,$C8,$07,$52,$C7,$07,$52,$C9
;; [$B700 :: 0x03700]
.byte $07,$52,$C6,$08,$52,$CA,$08,$52,$C5,$09,$52,$CB,$09,$52,$C6,$0A
.byte $52,$CA,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BF,$CB,$05,$D6
.byte $AB,$06,$BF,$C7,$07,$C9,$A7,$08,$BF,$CE,$07,$CD,$AE,$08,$BF,$C3
.byte $09,$C2,$A3,$0A,$BF,$D2,$09,$D0,$B2,$0A,$00,$00,$00,$00,$00,$00
.byte $B7,$D0,$15,$DE,$B0,$16,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$DF,$A9,$0F,$00,$00,$00,$00,$00,$00,$FF,$E9,$07
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$13,$C5,$15,$22,$0B,$15,$37,$05
.byte $1B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$8E,$18,$DD
.byte $8F,$17,$7F,$83,$19,$7F,$84,$1A,$7F,$85,$19,$7F,$88,$16,$7F,$8F
.byte $13,$7F,$02,$16,$7F,$04,$13,$7F,$0F,$1C,$00,$00,$00,$00,$00,$00
.byte $30,$8F,$12,$5F,$83,$15,$5F,$84,$16,$5F,$84,$1A,$5F,$05,$15,$5F
.byte $87,$19,$5F,$09,$18,$5F,$0C,$1A,$5F,$8F,$16,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$1B,$C3,$06,$E4,$CC,$06,$00,$00,$00,$00,$00,$00
;; [$B800 :: 0x03800]
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$5F,$D7,$0D,$5F,$0E,$1B,$5F,$C3
.byte $0A,$5F,$CD,$14,$92,$0F,$14,$93,$11,$10,$94,$0B,$0F,$95,$0D,$0C
.byte $96,$03,$10,$97,$16,$0C,$98,$10,$14,$99,$19,$14,$17,$CF,$10,$9A
.byte $CD,$1D,$9B,$D1,$1D,$9C,$CE,$10,$9D,$D0,$10,$9E,$10,$15,$9F,$0B
.byte $13,$A0,$C2,$1B,$A1,$1C,$1B,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $A2,$0D,$10,$A3,$11,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$46,$A7,$05,$FE,$C7,$04,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FE
.byte $C3,$02,$00,$00,$00,$00,$00,$00,$05,$8D,$07,$0F,$91,$07,$F7,$8B
.byte $0B,$F8,$8C,$0B,$F7,$91,$0E,$F8,$92,$0E,$F7,$8C,$10,$F8,$8D,$10
.byte $2E,$BE,$04,$3F,$D1,$07,$F9,$CF,$18,$18,$CB,$07,$55,$C9,$16,$56
.byte $C9,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $57,$CD,$10,$58,$8E,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; [$B900 :: 0x03900]
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$AA,$09,$19,$AA,$0F,$16,$AB,$12,$17,$AB,$13,$17
.byte $AB,$12,$18,$AB,$13,$18,$AC,$12,$0A,$AC,$13,$0A,$AC,$12,$0B,$AC
.byte $13,$0B,$AB,$0B,$06,$D7,$1D,$0A,$A4,$CE,$0E,$A5,$D0,$0E,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$28,$8F,$07,$00
.byte $00,$00,$ED,$AF,$0B,$ED,$AF,$18,$ED,$AF,$19,$EE,$D7,$11,$EF,$CF
.byte $05,$F0,$CB,$09,$F0,$D3,$09,$F0,$CF,$0D,$00,$00,$00,$00,$00,$00
.byte $3E,$B7,$0F,$3E,$B7,$0E,$F5,$99,$0A,$F6,$D7,$0F,$AF,$AF,$0F,$AF
.byte $AF,$0E,$AF,$A7,$0F,$AF,$A7,$0E,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$3D,$A3,$1B,$3D,$A3,$1A,$F4,$C4,$1C,$F3,$C7,$12
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$EA,$C5,$05,$C0
.byte $A5,$06,$67,$C7,$05,$C3,$A7,$06,$EA,$D9,$05,$C1,$B9,$06,$67,$DC
;; [$BA00 :: 0x03A00]
.byte $05,$C4,$BC,$06,$BF,$C5,$17,$C2,$A5,$18,$34,$C2,$08,$00,$00,$00
.byte $EA,$C5,$05,$C5,$A5,$06,$EA,$D9,$05,$C6,$B9,$06,$EA,$D6,$17,$D9
.byte $B6,$18,$EA,$D9,$17,$D8,$B9,$18,$EA,$DC,$17,$DA,$BC,$18,$00,$00
.byte $00,$00,$00,$00,$EA,$C5,$05,$C7,$A5,$06,$67,$C7,$05,$CA,$A7,$06
.byte $EA,$D9,$05,$C8,$B9,$06,$BF,$C5,$17,$C9,$A5,$18,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$EA,$C5,$05,$CB,$A5,$06,$EA,$D9
.byte $05,$CC,$B9,$06,$BF,$C5,$17,$CD,$A5,$18,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$EA,$C5,$05,$CE
.byte $A5,$06,$EA,$D9,$05,$CF,$B9,$06,$BF,$C5,$17,$D0,$A5,$18,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $99,$C5,$05,$D1,$A5,$06,$99,$D9,$05,$D2,$B9,$06,$99,$C5,$17,$D3
.byte $A5,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$EA,$C5,$05,$D4,$A5,$06,$EA,$D9,$05,$D5,$B9,$06
.byte $BF,$C5,$17,$D6,$A5,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$1D,$8F,$05,$FA,$8F,$05,$FB,$EF
.byte $07,$FB,$ED,$07,$FB,$ED,$0D,$FB,$EF,$0D,$FB,$F1,$0D,$FB,$F1,$07
;; [$BB00 :: 0x03B00]
.byte $FD,$CE,$0B,$FC,$D0,$0B,$E2,$CF,$0A,$00,$00,$00,$5A,$AE,$1A,$12
.byte $03,$15,$26,$8B,$17,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $0A,$CD,$0D,$4F,$AD,$09,$80,$AD,$08,$7A,$AD,$0D,$7B,$AD,$0D,$81
.byte $AD,$0C,$81,$AD,$0B,$81,$AD,$0A,$81,$AD,$09,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$41,$EC,$12,$42,$EE,$12,$43,$EC,$10,$44,$EE,$10
.byte $45,$ED,$11,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$E2,$D0,$18,$E3,$CE,$18,$F2,$D1
.byte $18,$E0,$8D,$07,$EC,$91,$07,$F3,$93,$09,$14,$93,$0A,$22,$93,$0B
.byte $E6,$8F,$0B,$26,$8E,$0C,$E1,$8F,$0C,$FC,$90,$0C,$38,$EF,$0F,$54
.byte $AF,$0B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; [$BC00 :: 0x03C00]
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $11,$88,$16,$21,$C9,$16,$33,$85,$16,$33,$89,$1A,$33,$89,$1C,$33
.byte $81,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$19,$93,$0E,$B0,$1B,$07,$B1,$15,$06,$B2,$0C,$05
.byte $B3,$0A,$0E,$B4,$11,$19,$B5,$13,$19,$B6,$15,$17,$B7,$0B,$07,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$32,$C1,$0F,$3C,$03,$0E,$3C,$0C
.byte $10,$3C,$04,$15,$3C,$16,$0A,$3C,$CC,$0A,$3C,$CE,$0A,$3C,$D4,$0E
.byte $3C,$D6,$0E,$1C,$81,$17,$00,$00,$00,$00,$00,$00,$02,$D5,$19,$27
.byte $D4,$18,$5C,$B5,$1D,$5C,$B5,$1C,$AF,$BD,$0B,$AF,$BD,$0A,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $3B,$B5,$04,$06,$D7,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; [$BD00 :: 0x03D00]
.byte $00,$00,$00,$00,$3C,$07,$0C,$3C,$08,$12,$3C,$09,$16,$3C,$0B,$16
.byte $3C,$14,$14,$3C,$18,$16,$3C,$18,$09,$3C,$19,$0E,$3C,$0F,$18,$3C
.byte $10,$18,$3C,$13,$17,$00,$00,$00,$3C,$01,$0B,$3C,$05,$13,$3C,$0B
.byte $19,$3C,$0D,$19,$3C,$12,$18,$3C,$14,$19,$3C,$1A,$16,$3C,$1E,$11
.byte $3C,$19,$0F,$3C,$1D,$0B,$3C,$1E,$0B,$00,$00,$00,$3C,$C2,$0C,$3C
.byte $C7,$16,$3C,$C1,$1E,$3C,$C9,$16,$3C,$CF,$16,$3C,$D3,$18,$3C,$D8
.byte $16,$3C,$DF,$1E,$3C,$D9,$0C,$3C,$D7,$06,$3C,$D2,$0A,$3C,$CD,$04
.byte $39,$AE,$0F,$39,$AF,$0F,$39,$AE,$0E,$39,$AF,$0E,$E7,$D9,$0F,$E8
.byte $EE,$0F,$E8,$EF,$0F,$E8,$EE,$0E,$E8,$EF,$0E,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$24,$D7,$0E,$E5,$F7,$07,$E6,$97,$16,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$5E,$83,$10,$5D,$01,$12,$5D,$03
.byte $11,$5D,$01,$14,$5D,$03,$18,$5D,$0B,$1A,$5D,$0A,$1A,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$2B,$B9,$17,$49
.byte $B9,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; ========== multi npc properties (64 * 35 bytes) ($B500-$BDFF) END ==========


;; ========== single npc properties (64 * 3 bytes) ($BE00-$BEBF) START ==========
;; [$BE00 :: 0x03E00]
.byte $00,$00,$00,$59,$A7,$07,$DB,$AD,$1C,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$31,$9A,$1B,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$0C,$8D,$10,$4B,$A7,$17,$25,$87
.byte $12,$4A,$A7,$17,$47,$A5,$09,$3A,$BC,$0F,$4E,$AD,$13,$00,$00,$00
.byte $1E,$C5,$05,$1F,$C5,$05,$2F,$C5,$05,$29,$8F,$09,$36,$B2,$04,$48
.byte $A7,$19,$4C,$A4,$0E,$40,$CE,$1C,$00,$00,$00,$2D,$A3,$1B,$2A,$8F
.byte $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;; ========== single npc properties (64 * 3 bytes) ($BE00-$BEBF) END ==========


; ========== equipment code ($BEC0-$BFFF) START ==========

.import	Get_data_BANK_0C	;FBE6

; Name	: Load_armor_prop
; Marks	: load armor properties
;	  $5F = size of equipment data
;	  $64(ADDR) = armor properties address on BANK 0C
;	  $7A(ADDR) = character properties 1($6100,$6140,$6180,$61C0)
Load_armor_prop:
	LDA #<Armor_prop	; BEC0	$A9 $00
	STA $64			; BEC2	$85 $64
	LDA #>Armor_prop	; BEC4	$A9 $80
	STA $65			; BEC6	$85 $65		BANK 0C/8000 (armor properties)
	LDA #$70		; BEC8	$A9 $70		empty armor slot	$70
	STA equip_empty_slot	; BECA	$85 $5E
	LDA #$06		; BECC	$A9 $06		6 bytes each(armor properties data size)
	STA equip_d_size_tmp	; BECE	$85 $5F
	LDA #$FE		; BED0	$A9 $FE
	STA $4C			; BED2	$85 $4C
	LDY #$19		; BED4	$A0 $19
	LDA ($7A),Y		; BED6	$B1 $7A		helmet
	JSR Get_equip_prop	; BED8	$20 $2C $BF	load equipment properties
	INY			; BEDB	$C8
	LDA ($7A),Y		; BEDC	$B1 $7A		armor
	JSR Get_equip_prop	; BEDE	$20 $2C $BF	loadd equipment properties
	INY			; BEE1	$C8
	LDA ($7A),Y		; BEE2	$B1 $7A		gloves
	JSR Get_equip_prop	; BEE4	$20 $2C $BF	load equipment properties
	RTS			; BEE7	$60
; End of Load_armor_prop

; Name	: Update_mod
; Marks	: update mod. stats
;	  $7A(ADDR) = character properties 1($6100,$6140,$6180,$61C0)
;	  $44(ADDR) = ??
Update_mod:
	LDY #$10		; BEE8	$A0 $10		base stat ($61xx + $10)
Update_mod_init:
	LDA ($7A),Y		; BEEA	$B1 $7A		base stat(strength,agility,stamina,intellect,spirit)
	PHA			; BEEC	$48
	TYA			; BEED	$98
	CLC			; BEEE	$18
	ADC #$10		; BEEF	$69 $10
	TAY			; BEF1	$A8
	PLA			; BEF2	$68
	STA ($7A),Y		; BEF3	$91 $7A		set mod. stat ($61xx + $20) - init
	INY			; BEF5	$C8
	TYA			; BEF6	$98
	SEC			; BEF7	$38
	SBC #$10		; BEF8	$E9 $10		next stat
	TAY			; BEFA	$A8
	CPY #$15		; BEFB	$C0 $15
	BNE Update_mod_init	; BEFD	$D0 $EB		loop
	LDX #$00		; BEFF	$A2 $00
Update_mod_apply:
	LDA $44,X		; BF01	$B5 $44		pointer to equipment properties buffer
	STA $5E			; BF03	$85 $5E
	LDA $45,X		; BF05	$B5 $45
	STA $5F			; BF07	$85 $5F
	JSR Apply_stat		; BF09	$20 $13 $BF	apply armor stat boost
	INX			; BF0C	$E8
	INX			; BF0D	$E8
	CPX #$06		; BF0E	$E0 $06
	BNE Update_mod_apply	; BF10	$D0 $EF
	RTS			; BF12	$60
; End of Update_mod

; Name	: Apply_stat
; Marks	: apply armor stat boost
;	  $5E(ADDR) = pointer to equipment properties buffer
;	  $7A(ADDR) = character properties 1($6100,$6140,$6180,$61C0)
;	  Stat boost ->	00: strength +10
;			01: agility +10
;			02: stamina +10
;			03: intelligence +10
;			04: soul +10
Apply_stat:
	LDY #$04		; BF13	A0 04
	LDA ($5E),Y		; BF15	B1 5E		star to boost
	BMI Apply_stat_none	; BF17	30 12		branch if no boost
	CLC			; BF19	18
	ADC #$10		; BF1A	69 10
	TAY			; BF1C	A8
	LDA ($7A),Y		; BF1D	B1 7A		boost stat by 10 (doesn't stack)
	CLC			; BF1F	18
	ADC #$0A		; BF20	69 0A
	PHA			; BF22	48
	TYA			; BF23	98
	CLC			; BF24	18
	ADC #$10		; BF25	69 10
	TAY			; BF27	A8
	PLA			; BF28	68
	STA ($7A),Y		; BF29	91 7A
Apply_stat_none:
	RTS			; BF2B	60
; End of Apply_stat

; Name	: Get_equip_prop
; A	: equipment number(weapon, helmet, armor, gloves)
; Y	: character properties offset(19h-1Dh = helmet, armor, gloves, weapon R, weapon L)
; Marks	: load equipment properties
;	  +$44: pointers to data buffer slots at $7610
;	   $4C: data buffer slot id (increment by 2 each item)
;	  +$64: equipment properties offset/address (bank 0C)
;	   $5E: empty equipment slot id ($30 or $70)
;	   $5F: size of equipment data
;	  $7A(ADDR) = character properties 1($6100,$6140,$6180,$61C0)
;	  $00(ADDR) = weapon/armor properties address
Get_equip_prop:
	BNE Get_equip_prop_eq	; BF2C	$D0 $0E		branch if equipment is exist
	CLC			; BF2E	$18
	ADC equip_empty_slot	; BF2F	$65 $5E
	CMP #$70		; BF31	$C9 $70
	BNE Get_equip_prop_ewp	; BF33	$D0 $05		branch if equipment is empty weapon slot(may be 30h)
	SEC			; BF35	$38
	SBC #$01		; BF36	$E9 $01
	BNE Get_equip_prop_eq	; BF38	$D0 $02
Get_equip_prop_ewp:
	STA ($7A),Y		; BF3A	$91 $7A
Get_equip_prop_eq:
	STA equip_num_tmp	; BF3C	$85 $6D
	LDA equip_empty_slot	; BF3E	$A5 $5E
	CMP #$30		; BF40	$C9 $30
	BEQ Get_equip_prop_wp	; BF42	$F0 $07		branch if equipment is weapon
	CLC			; BF44	$18
	LDA equip_num_tmp	; BF45	$A5 $6D
	ADC #$01		; BF47	$69 $01
	STA equip_num_tmp	; BF49	$85 $6D
Get_equip_prop_wp:
	LDA equip_num_tmp	; BF4B	$A5 $6D
	SEC			; BF4D	$38
	SBC equip_empty_slot	; BF4E	$E5 $5E
	STA equip_num_tmp	; BF50	$85 $6D		converted weapon number is 00h-3Fh
	STA $00			; BF52	$85 $00
	LDA equip_d_size_tmp	; BF54	$A5 $5F		9 or 6 bytes
	STA $02			; BF56	$85 $02
	LDA #$00		; BF58	$A9 $00
	STA $01			; BF5A	$85 $01
	STA $03			; BF5C	$85 $03
	JSR Multi16		; BF5E	$20 $98 $FC	multiply (16-bit) -> equipment number x size of equipment data
	TYA			; BF61	$98
	PHA			; BF62	$48
	CLC			; BF63	$18
	LDA $04			; BF64	$A5 $04
	.byte $6D,$64,$00
	;ADC $0064		; BF66	6D 64 00	weapon/armor properties address
	STA $00			; BF69	85 00
	LDA $05			; BF6B	A5 05
	.byte $6D,$65,$00
	;ADC $0065		; BF6D	6D 65 00
	STA 01			; BF70	85 01
	LDA equip_empty_slot	; BF72	A5 5E
	CMP #$70		; BF74	C9 70
	BNE Get_equip_prop_nam	; BF76	D0 04
	LDY #$06		; BF78	A0 06		size of armor properties data
	BNE Get_equip_prop_am	; BF7A	D0 02
Get_equip_prop_nam:
	LDY #$0A		; BF7C	A0 0A		size of weapon properties data ?? not 09h but 0Ah ??
Get_equip_prop_am:
	JSR Get_data_BANK_0C	; BF7E	20 E6 FB	BANK 0C/8000 or 80F6 (weapon/armor properties)
	LDX $4C			; BF81	A6 4C
	INX			; BF83	E8
	INX			; BF84	E8
	TXA			; BF85	8A
	ASL			; BF86	0A
	STA $04			; BF87	85 04
	ASL			; BF89	0A
	ASL			; BF8A	0A
	CLC			; BF8B	18
	ADC $04			; BF8C	65 04
	STA $04			; BF8E	85 04
	LDA #$00		; BF90	A9 00		$7610
	STA $05			; BF92	85 05
	CLC			; BF94	18
	LDA $04			; BF95	A5 04
	ADC #$10		; BF97	69 10
	STA $04			; BF99	85 04
	LDA $05			; BF9B	A5 05
	ADC #$76		; BF9D	69 76
	STA $05			; BF9F	85 05
	LDY #$00		; BFA1	A0 00
Get_equip_prop_cp:
	LDA $7600,Y		; BFA3	B9 00 76	copy 16 bytes to buffer
	STA ($04),Y		; BFA6	91 04
	INY			; BFA8	C8
	CPY #$10		; BFA9	C0 10
	BNE Get_equip_prop_cp	; BFAB	D0 F6
	LDA $04			; BFAD	A5 04
	STA $44,X		; BFAF	95 44
	LDA $05			; BFB1	A5 05
	STA $45,X		; BFB3	95 45
	STX $4C			; BFB5	86 4C
	PLA			; BFB7	68
	TAY			; BFB8	A8
	RTS			; BFB9	60
; End of Get_equip_prop

; Name	: Get_weapon_prop_
; X	:
; Y	:
; Marks	: $48(ADDR) = source data
;	  $44(ADDR) = pointer table ??
;	  $4A-$5B = destination data(odd, even)
;	  +$44: pointers to data buffer slots at $7610
;	  get weapon properties from pointer to $4A-
Get_weapon_prop_:
	LDA $44,X		; BFBA	B5 44
	STA $48			; BFBC	85 48
	LDA $45,X		; BFBE	B5 45
	STA $49			; BFC0	85 49
	TYA			; BFC2	98
	TAX			; BFC3	AA
	LDY #$00		; BFC4	A0 00
L03FC6:
	LDA ($48),Y		; BFC6	B1 48
	STA $4A,X		; BFC8	95 4A
	INX			; BFCA	E8
	INX			; BFCB	E8
	INY			; BFCC	C8
	CPY #$09		; BFCD	C0 09
	BNE L03FC6		; BFCF	D0 F5		loop
	RTS			; BFD1	60
; End of Get_weapon_prop_

; Name	: Get_wpn_lv
; X	: main or off hand
; Marks	: $5C = characters weapon level
;	  $7E(ADDR) = character properties 2($6200,$6240,$6280,$62C0)
;	  Get weapon level
Get_wpn_lv:
	LDA $4A,X		; BFD2	$B5 $4A		weapon type
	ASL			; BFD4	$0A
	TAY			; BFD5	$A8
	LDA ($7E),Y		; BFD6	$B1 $7E
	ADC #$01		; BFD8	$69 $01
	STA $5C,X		; BFDA	$95 $5C
	RTS			; BFDC	$60
; End of Get_wpn_lv

; Name	: Set_wpn_element
; X	:
; Y	: stats offset
; Marks	: Set weapon elemental properties
;	  $80(ADDR) = battle stats($7D7A,$7DAA,$7DDA,$7E0A)
;	  $54 is series of $4A
;	  hand 1 = $4A,$4C,$4E,$50,$52,$54,$56,$58,$5A
;	  hand 2 = $4B,$4D,$4F,$51,$53,$55,$57,$59,$5B
Set_wpn_element:
	TXA 			; BFDD	8A
	CLC			; BFDE	18
	ADC #$06		; BFDF	69 06
	STA $62			; BFE1	85 62
L03FE3:
	LDA $54,X		; BFE3	B5 54
	STA ($80),Y		; BFE5	91 80
	INY			; BFE7	C8
	INX			; BFE8	E8
	INX			; BFE9	E8
	CPX $62			; BFEA	E4 62
	BNE L03FE3		; BFEC	D0 F5
	RTS			; BFEE	60
; End of Set_wpn_element

;BFEF - stale data = same as 0C/BFF5
.byte $D8
.byte $5A,$94,$86,$94,$41,$9D,$75,$9F,$86,$94,$41,$9D,$75,$9F,$9F,$9F
; ========== equipment code ($BEC0-$BFFF) END ==========

