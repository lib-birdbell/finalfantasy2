.include "Constants.inc"
.include "variables.inc"

.export	Map_rnd_battle_rate	;8000
.export	Nmap_battle_grp		;8100
.export	Wmap_battle_grp		;8200
.export	Rnd_battle_grp		;8280

.export	Char_pose_0B		;9612
.export	Chk_mag_target_0B	;9615
.export	Set_front_0B		;9618
.export	Mob_dead_ani_0B		;961B
.export	Attack_0B		;961E
.export	Copy_cursor_0B		;9621
.export	Load_char_0B		;9624
.export	Win_celemony_0B		;9627
.export	Fade_out_0B		;962A
.export	Set_status_gfx_0B	;962D
.export	Status_ani_0B		;9630
.export	Run_away_0B		;9633
.export	Battle_defeat_0B	;9636
.export	Init_battle		;9639

.import	Ret_to_map		;FA0F
.import Wait_NMI_set		;FA2A
.import	SR_BattleMain		;FB06
.import	SR_SortVal		;FB0C
.import	SR_Init_battle_stats	;FB17
.import	Set_mob_gfx		;FB62
.import	Load_text_gfx		;FB84
.import	Copy_char_tile		;FBBA	- not character tile
.import	LoadBattleAniFX		;FBC3
.import	Set_wpn_pal		;FC03
.import	Multi			;FC79
.import	Multi16			;FC98
.import DoDivision		;FCC3
.import	Get_nybble		;FD07
.import Random			;FD11
.import	Ctrl_Scroll		;FD4B
.import	Weapon_type		;FDC7
.import Wait_NMI_end		;FD46
.import	Wait_MENU_snd		;FD5B
.import	CpPRGtoPPU_Xlen		;FD6F
.import	Set_PpuAddr_00		;FD7E
.import	OnReset			;FE2E

.segment "BANK_0B"

; ========== map random battle rates ($8000-$80FF) START ==========
;; [$8000 :: 0x2C000]
Map_rnd_battle_rate:
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$00,$00,$09,$09,$09
.byte $09,$00,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00
.byte $04,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$10,$00,$80
.byte $09,$09,$09,$09,$09,$09,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $09,$00,$09,$09,$09,$09,$09,$10,$10,$09,$80,$00,$09,$00,$00,$00
.byte $80,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$10,$10,$80
.byte $00,$09,$09,$09,$09,$09,$00,$09,$09,$09,$09,$09,$09,$09,$09,$09
.byte $09,$80,$09,$09,$20,$20,$09,$09,$20,$20,$09,$09,$09,$09,$09,$09
.byte $09,$09,$09,$00,$00,$80,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
.byte $09,$09,$80,$09,$09,$09,$09,$09,$09,$00,$00,$09,$80,$09,$00,$09
.byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$80,$09,$09,$09,$09
.byte $09,$09,$09,$09,$09,$09,$80,$09,$09,$09,$09,$09,$09,$00,$08,$80
.byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$80,$09,$09,$09
.byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$80,$00,$00,$00,$00,$00
; ========== map random battle rates ($8000-$80FF) END ==========


; ========== normal map battle groups ($8100-$81FF) START ==========
;; [$8100 :: 0x2C100]
Nmap_battle_grp:
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$6F,$00,$00,$00,$0B,$0B,$0C
.byte $0C,$00,$22,$23,$24,$24,$24,$24,$25,$25,$25,$26,$26,$26,$26,$00
.byte $01,$30,$30,$31,$31,$31,$32,$32,$32,$32,$32,$32,$30,$70,$00,$32
.byte $33,$34,$35,$6D,$6E,$6E,$6E,$32,$00,$00,$00,$00,$00,$00,$00,$00
.byte $0E,$00,$15,$16,$17,$17,$18,$71,$71,$18,$18,$00,$2F,$00,$00,$2F
.byte $2F,$54,$54,$54,$55,$55,$56,$57,$58,$59,$59,$5A,$5A,$72,$72,$5A
.byte $00,$28,$29,$29,$29,$29,$00,$2A,$2A,$2A,$2A,$2B,$2B,$2B,$2C,$2C
.byte $2C,$2C,$41,$42,$43,$43,$43,$44,$45,$45,$45,$46,$46,$47,$47,$48
.byte $48,$49,$49,$00,$00,$49,$4C,$4D,$4D,$4E,$4E,$4F,$4F,$50,$50,$51
.byte $51,$51,$51,$06,$07,$07,$08,$09,$0A,$00,$00,$0A,$0A,$3D,$00,$3E
.byte $1B,$1B,$1C,$1C,$1D,$1D,$1D,$1E,$1E,$1F,$1F,$1F,$38,$38,$39,$39
.byte $3A,$3A,$3B,$3B,$3C,$3C,$3C,$10,$11,$11,$12,$13,$14,$00,$14,$14
.byte $5D,$5D,$5E,$5E,$5F,$5F,$60,$60,$61,$61,$62,$60,$62,$63,$64,$65
.byte $66,$67,$67,$68,$68,$66,$69,$6A,$6B,$6C,$73,$00,$2F,$00,$00,$00
; ========== normal map battle groups ($8100-$81FF) END ==========


; ========== world map battle groups ($8200-$827F) START ==========
; $8200-$823F : before tornado
; $8240-$827F : after tornado
; world map devide as 32 x 32 area
;; [$8200 :: 0x2C200]
Wmap_battle_grp:
.byte $19,$20,$05,$0F,$0F,$0F,$27,$19,$19,$19,$05,$05,$03,$04,$27,$27
.byte $1A,$00,$00,$02,$03,$04,$04,$04,$1A,$40,$00,$00,$04,$0D,$0D,$0D
.byte $36,$40,$36,$36,$36,$2D,$2E,$2E,$36,$37,$37,$36,$20,$2D,$2E,$2E
.byte $36,$37,$37,$20,$20,$2D,$2E,$2E,$20,$20,$20,$21,$20,$20,$1A,$1A
.byte $4B,$3F,$4A,$4A,$0F,$0F,$27,$4B,$4B,$4B,$4B,$4A,$4A,$4A,$27,$27
.byte $4B,$4B,$4A,$4A,$4A,$4A,$4A,$4A,$4B,$40,$4A,$4A,$4A,$52,$52,$52
.byte $5B,$40,$5B,$5B,$5C,$53,$53,$53,$5B,$5B,$5B,$5B,$3F,$52,$53,$53
.byte $5B,$5B,$5B,$3F,$3F,$52,$53,$53,$3F,$3F,$3F,$21,$3F,$3F,$4B,$4B
; ========== world map battle groups ($8200-$827F) END ==========


; ========== random battle groups (116 * 8 bytes) ($8280-$861F) START ==========
;; [$8280 :: 0x2C280]
Rnd_battle_grp:
.byte $5F,$5F,$20,$20,$A0,$A0,$21,$21,$5F,$20,$20,$A0,$A0,$21,$21,$E4
.byte $20,$A0,$21,$E4,$DF,$E0,$23,$24,$21,$E4,$DF,$E0,$23,$24,$A2,$27
.byte $E4,$DF,$E0,$23,$24,$A2,$27,$60,$DF,$E0,$23,$24,$A2,$27,$60,$A6
.byte $E0,$24,$27,$60,$A6,$E1,$6B,$A7,$24,$27,$60,$A6,$E1,$6B,$A7,$57
.byte $27,$60,$A6,$E1,$6B,$A7,$57,$61,$60,$A6,$E1,$6B,$A7,$57,$61,$2F
.byte $A6,$E1,$6B,$A7,$57,$61,$2F,$A4,$6B,$61,$2F,$A1,$A4,$EB,$22,$A3
.byte $61,$2F,$A1,$A4,$EB,$22,$A3,$30,$2F,$A1,$A4,$EB,$22,$A3,$30,$84
.byte $A1,$A4,$EB,$22,$A3,$30,$84,$6F,$25,$25,$25,$25,$A5,$A5,$A5,$A5

;; [$8300 :: 0x2C300]

.byte $AF,$25,$82,$81,$A5,$B0,$B1,$26,$25,$82,$81,$A5,$B0,$B1,$26,$8A
.byte $82,$81,$A5,$B0,$B1,$26,$8A,$01,$81,$A5,$B0,$B1,$26,$8A,$01,$64
.byte $A5,$B0,$B1,$26,$8A,$01,$64,$02,$02,$A8,$31,$03,$B2,$70,$AA,$29
.byte $A8,$31,$03,$B2,$70,$AA,$29,$A9,$31,$03,$B2,$70,$AA,$29,$A9,$83
.byte $03,$B2,$70,$AA,$29,$A9,$83,$87,$03,$AA,$29,$2B,$F0,$A9,$28,$AC
.byte $AA,$29,$2B,$F0,$A9,$28,$AC,$04,$83,$87,$04,$32,$8D,$63,$42,$E3
.byte $87,$04,$32,$8D,$63,$42,$E3,$FA,$04,$32,$8D,$63,$42,$E3,$FA,$3F
.byte $32,$8D,$63,$42,$E3,$FA,$3F,$AB,$8D,$63,$42,$E3,$FA,$3F,$AB,$05
.byte $BE,$3E,$3F,$C0,$40,$40,$BF,$BF,$D7,$D7,$C2,$C2,$AD,$AD,$D6,$D6
.byte $D7,$C2,$C2,$AD,$AD,$D6,$D6,$C1,$C2,$C2,$AD,$AD,$D6,$D6,$C1,$C1
.byte $AD,$AD,$D6,$D6,$C1,$C1,$41,$41,$D6,$D6,$C1,$C1,$41,$41,$2D,$2D
.byte $C1,$C1,$41,$41,$2D,$2D,$48,$48,$2A,$2A,$80,$80,$07,$07,$86,$86
.byte $80,$80,$07,$07,$86,$86,$92,$92,$07,$07,$86,$86,$92,$92,$34,$34
.byte $86,$86,$92,$92,$34,$34,$AE,$AE,$92,$92,$34,$34,$AE,$AE,$2C,$2C
.byte $34,$34,$AE,$AE,$2C,$2C,$88,$88,$0A,$88,$33,$33,$B3,$B3,$43,$43
.byte $33,$33,$B3,$B3,$43,$43,$C3,$C3,$49,$AB,$B7,$B4,$B6,$6C,$B5,$36

;; [$8400 :: 0x2C400]

.byte $AB,$B7,$0B,$B4,$B6,$6C,$B5,$36,$B7,$0B,$B4,$B6,$6C,$B5,$36,$C9
.byte $0B,$B4,$B6,$6C,$B5,$36,$C9,$8C,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$89
.byte $62,$62,$62,$62,$62,$62,$62,$89,$58,$58,$58,$58,$58,$58,$58,$89
.byte $58,$FB,$38,$B8,$44,$C8,$0E,$F7,$FB,$38,$B8,$44,$C8,$0E,$D9,$F7
.byte $38,$B8,$44,$C8,$0E,$D9,$59,$F2,$B8,$44,$C8,$0E,$D9,$59,$F2,$E2
.byte $C8,$0E,$D9,$59,$F2,$E2,$F1,$0F,$0E,$D9,$59,$F2,$E2,$F1,$0F,$8F
.byte $59,$F2,$E2,$F1,$0F,$8F,$47,$91,$45,$45,$46,$46,$C5,$C5,$C6,$C6
.byte $45,$45,$46,$46,$C5,$C5,$C6,$C6,$45,$45,$46,$46,$C5,$C5,$C6,$C6
.byte $10,$11,$F5,$CA,$4B,$5E,$90,$97,$11,$F5,$CA,$4B,$5E,$90,$97,$37
.byte $F5,$CA,$4B,$5E,$90,$97,$37,$4E,$CA,$4B,$90,$4E,$4A,$BA,$CE,$CB
.byte $4B,$5E,$90,$97,$37,$4E,$4A,$BA,$5E,$90,$37,$4E,$4A,$BA,$8E,$4F
.byte $90,$97,$37,$4E,$4A,$BA,$8E,$CE,$97,$37,$4E,$4A,$BA,$8E,$CE,$DE
.byte $37,$4E,$4A,$BA,$8E,$CE,$DE,$4F,$4E,$4A,$BA,$8E,$CE,$DE,$4F,$CB
.byte $35,$35,$EF,$EF,$C7,$C7,$EE,$EE,$35,$EF,$EF,$C7,$C7,$EE,$EE,$EE
.byte $C7,$3B,$EE,$C4,$7D,$66,$13,$6D,$3B,$EE,$C4,$7D,$66,$13,$6D,$ED
.byte $EE,$C4,$7D,$66,$13,$6D,$ED,$CC,$C4,$7D,$66,$13,$6D,$ED,$CC,$65

;; [$8500 :: 0x2C500]

.byte $7D,$66,$13,$6D,$ED,$CC,$65,$E5,$66,$13,$6D,$ED,$CC,$65,$E5,$D8
.byte $B9,$B9,$4D,$4D,$39,$39,$CD,$17,$B9,$4D,$4D,$39,$39,$CD,$CD,$17
.byte $D8,$5B,$4C,$3A,$BB,$3C,$15,$17,$5B,$4C,$3A,$BB,$3C,$15,$E6,$17
.byte $4C,$3A,$BB,$3C,$15,$E6,$F4,$17,$3A,$BB,$3C,$15,$E6,$F4,$DB,$EC
.byte $BB,$3C,$15,$E6,$F4,$DB,$EC,$93,$3C,$15,$E6,$F4,$DB,$EC,$93,$95
.byte $15,$E6,$F4,$DB,$EC,$93,$95,$E7,$D4,$D4,$CF,$51,$5A,$55,$53,$D1
.byte $D4,$CF,$51,$5A,$55,$53,$D1,$54,$55,$94,$53,$D1,$54,$D3,$3D,$50
.byte $94,$53,$D1,$54,$D3,$3D,$50,$52,$53,$D1,$54,$D3,$3D,$50,$52,$DA
.byte $D1,$54,$D3,$3D,$50,$52,$DA,$96,$54,$D3,$3D,$50,$52,$DA,$96,$BD
.byte $D3,$3D,$50,$52,$DA,$96,$BD,$D5,$5C,$DC,$5D,$98,$F6,$DD,$FF,$BC
.byte $5D,$98,$F6,$DD,$FF,$BC,$67,$F8,$98,$F6,$DD,$FF,$BC,$67,$F8,$D0
.byte $DD,$FF,$BC,$67,$F8,$D0,$18,$D2,$FF,$BC,$67,$F8,$D0,$18,$D2,$68
.byte $67,$F8,$D0,$18,$D2,$E9,$EA,$68,$F8,$D0,$18,$D2,$E9,$EA,$FC,$68
.byte $18,$D2,$E9,$EA,$FC,$99,$9A,$F9,$D2,$E9,$EA,$FC,$99,$9A,$F9,$69
.byte $EA,$FC,$99,$9A,$F9,$69,$6A,$9B,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$89
.byte $8B,$8B,$8B,$8B,$8B,$8B,$8B,$89,$0F,$8F,$47,$91,$F1,$E2,$F2,$59

;; [$8600 :: 0x2C600]

.byte $B5,$36,$C9,$8C,$6C,$B6,$B4,$0B,$29,$A9,$83,$87,$AA,$70,$B2,$03
.byte $EC,$93,$95,$E7,$DB,$F4,$E6,$15,$F9,$69,$6A,$9B,$9A,$99,$FC,$EA
; ========== random battle groups (116 * 8 bytes) ($8280-$861F) END ==========



; ========== battle properties (128 * 8 bytes) ($8620-$8A1F) START ==========
;; [$8620 :: 0x2C620]
Battle_prop:
.byte $68,$56,$36,$23,$54,$02,$08,$46,$6D,$00,$11,$4D,$4E,$25,$5F,$60
.byte $79,$21,$23,$27,$29,$06,$21,$22,$79,$02,$30,$25,$2A,$07,$01,$00
.byte $3D,$01,$01,$4E,$4F,$31,$72,$71,$3D,$23,$23,$3C,$28,$28,$29,$64
.byte $2D,$23,$81,$3C,$22,$26,$61,$58,$39,$23,$23,$29,$2A,$09,$2A,$29
.byte $5A,$45,$57,$36,$37,$11,$1E,$2F,$2C,$01,$00,$45,$00,$1D,$2C,$19
.byte $78,$57,$34,$58,$54,$03,$0D,$15,$28,$43,$77,$23,$54,$04,$1A,$19
.byte $0D,$23,$23,$28,$00,$28,$65,$14,$39,$23,$02,$2A,$26,$08,$0A,$02
.byte $39,$23,$23,$2A,$26,$0A,$27,$2B,$59,$73,$64,$2F,$2B,$0D,$2F,$33
.byte $1D,$23,$81,$22,$47,$26,$25,$62,$99,$73,$64,$2B,$2F,$0D,$2C,$32
.byte $6C,$10,$10,$47,$46,$1C,$01,$24,$59,$55,$17,$28,$2E,$0E,$36,$24
.byte $0E,$A0,$00,$55,$56,$35,$08,$08,$ED,$82,$32,$2C,$22,$2F,$6D,$6E
.byte $0E,$A0,$00,$57,$58,$36,$08,$08,$6C,$30,$10,$48,$47,$1E,$08,$51
.byte $8D,$55,$40,$15,$50,$2C,$6A,$69,$0E,$A0,$00,$59,$5A,$37,$08,$08
.byte $0E,$90,$00,$53,$54,$34,$08,$08,$0E,$A0,$00,$5B,$5C,$38,$08,$08

;; [$8700 :: 0x2C700]

.byte $2A,$30,$67,$35,$2A,$13,$08,$30,$0E,$C0,$00,$5F,$75,$3A,$08,$79
.byte $0F,$D0,$00,$76,$77,$3B,$08,$79,$0F,$E0,$00,$78,$79,$3C,$08,$79
.byte $90,$01,$01,$1E,$1D,$00,$00,$01,$90,$01,$01,$1E,$1D,$00,$02,$05
.byte $90,$01,$01,$1E,$1D,$00,$04,$06,$90,$01,$01,$1E,$1D,$00,$0B,$07
.byte $25,$23,$40,$3C,$00,$27,$08,$34,$20,$42,$32,$1F,$21,$01,$00,$2F
.byte $A0,$42,$32,$1F,$21,$01,$0C,$34,$80,$42,$32,$20,$21,$01,$0E,$0F
.byte $60,$56,$36,$23,$54,$02,$0D,$10,$60,$56,$36,$23,$54,$02,$11,$12
.byte $60,$56,$36,$23,$54,$02,$03,$13,$25,$23,$40,$3C,$00,$27,$63,$00
.byte $60,$57,$34,$58,$54,$03,$16,$0E,$60,$43,$77,$23,$54,$04,$0E,$18
.byte $30,$63,$56,$23,$58,$05,$1C,$0F,$71,$21,$23,$27,$29,$06,$1D,$00
.byte $71,$21,$23,$27,$29,$06,$1E,$2F,$71,$21,$23,$27,$29,$06,$20,$1F
.byte $71,$02,$30,$25,$2A,$07,$02,$24,$79,$42,$36,$2C,$26,$0B,$1D,$2D
.byte $11,$42,$36,$26,$21,$0B,$2C,$2E,$35,$23,$23,$28,$22,$32,$74,$73
.byte $11,$23,$67,$26,$2F,$0C,$30,$75,$11,$23,$67,$26,$2F,$0C,$31,$2C
.byte $94,$30,$10,$47,$48,$1E,$50,$25,$51,$73,$64,$2F,$2D,$0D,$25,$1B
.byte $51,$55,$17,$28,$2E,$0E,$34,$35,$44,$22,$80,$49,$4E,$20,$55,$56

;; [$8800 :: 0x2C800]

.byte $51,$55,$17,$28,$2E,$0E,$38,$00,$41,$46,$00,$2D,$30,$0F,$15,$23
.byte $52,$20,$16,$33,$2F,$10,$3B,$2C,$52,$20,$16,$2F,$38,$10,$03,$0E
.byte $52,$20,$16,$2F,$38,$10,$3C,$6E,$52,$45,$57,$36,$37,$11,$0D,$15
.byte $E1,$01,$30,$26,$25,$07,$25,$26,$52,$45,$57,$36,$37,$11,$5F,$3D
.byte $02,$32,$17,$32,$2A,$12,$24,$3E,$82,$30,$67,$31,$2A,$13,$2C,$2F
.byte $92,$30,$67,$31,$35,$13,$41,$0E,$82,$44,$57,$36,$5A,$14,$42,$0D
.byte $53,$00,$14,$39,$3A,$15,$01,$2C,$53,$00,$14,$39,$3A,$15,$24,$0C
.byte $43,$32,$64,$3D,$3B,$16,$78,$2C,$43,$32,$64,$3D,$3B,$16,$3A,$0E
.byte $63,$32,$64,$3D,$41,$16,$2F,$30,$43,$54,$70,$44,$3D,$17,$2F,$47
.byte $43,$54,$70,$3F,$3D,$17,$0D,$48,$63,$12,$50,$30,$5D,$18,$2F,$01
.byte $63,$12,$50,$30,$5D,$18,$49,$2C,$03,$25,$34,$3E,$32,$19,$24,$0E
.byte $C3,$25,$34,$3E,$5D,$19,$4A,$4B,$33,$34,$57,$3E,$40,$1A,$2F,$0E
.byte $33,$34,$57,$3E,$40,$1A,$12,$4C,$23,$73,$76,$42,$40,$1B,$0E,$4D
.byte $64,$10,$10,$47,$46,$1C,$00,$4E,$24,$01,$00,$45,$47,$1D,$3B,$37
.byte $44,$42,$00,$3B,$49,$1F,$34,$54,$53,$00,$14,$39,$3A,$15,$46,$45
.byte $64,$42,$40,$3B,$4E,$21,$57,$28,$44,$58,$80,$49,$4B,$23,$5B,$56

;; [$8900 :: 0x2C900]

.byte $64,$54,$85,$4C,$49,$24,$0D,$15,$44,$54,$85,$4C,$49,$24,$11,$58
.byte $44,$42,$00,$3B,$49,$1F,$53,$76,$65,$00,$11,$4D,$00,$25,$0D,$5C
.byte $65,$00,$11,$4D,$4E,$25,$52,$5D,$65,$00,$11,$4D,$4E,$25,$37,$5E
.byte $53,$00,$14,$39,$3A,$15,$44,$0E,$25,$23,$40,$3C,$24,$27,$2F,$1F
.byte $90,$42,$32,$1F,$21,$01,$52,$08,$35,$23,$54,$22,$31,$2B,$2C,$32
.byte $35,$23,$54,$22,$15,$2B,$4C,$03,$35,$23,$54,$22,$15,$2B,$5F,$68
.byte $06,$B0,$00,$5D,$5E,$39,$08,$79,$25,$81,$10,$5B,$47,$2D,$34,$6B
.byte $25,$81,$10,$4F,$47,$2E,$34,$6C,$C5,$10,$20,$3C,$4E,$30,$70,$4C
.byte $19,$23,$67,$26,$2F,$0C,$2F,$0E,$6C,$35,$80,$4A,$4B,$22,$00,$58
.byte $2D,$28,$10,$22,$47,$2A,$08,$67,$4D,$24,$30,$28,$24,$29,$08,$66
.byte $68,$57,$34,$58,$54,$03,$08,$17,$1A,$32,$17,$34,$36,$12,$08,$0E
.byte $6C,$10,$10,$47,$46,$1C,$08,$4F,$8D,$20,$00,$00,$2C,$3F,$08,$08
.byte $1A,$32,$17,$32,$36,$12,$40,$3F,$1A,$44,$57,$5A,$36,$14,$08,$43
.byte $6D,$55,$40,$50,$15,$2C,$08,$6F,$0E,$90,$00,$51,$52,$33,$08,$08
.byte $59,$55,$17,$28,$2E,$0E,$08,$39,$3B,$73,$76,$43,$00,$1B,$08,$34
.byte $6D,$81,$10,$5B,$4F,$2D,$08,$00,$2D,$81,$10,$4F,$47,$2E,$08,$77

;; [$8A00 :: 0x2CA00]

.byte $4D,$81,$00,$51,$47,$3E,$08,$69,$6C,$35,$80,$4A,$4B,$22,$59,$5A
.byte $0F,$F0,$00,$7A,$7B,$3D,$08,$79,$1C,$54,$85,$4C,$49,$24,$09,$56
; ========== battle properties (128 * 8 bytes) ($8620-$8A1F) END ==========


; ========== surprise rate for each battle ($8A20-$8A9F) START ==========
;; [$8A20 :: 0x2CA20]
Surpise_rate:
.byte $24,$10,$14,$14,$14,$18,$18,$28,$18,$20,$1C,$28,$18,$18,$20,$20
.byte $20,$24,$1C,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28
.byte $10,$10,$10,$10,$10,$14,$18,$10,$14,$18,$1C,$18,$28,$18,$28,$10
.byte $10,$18,$14,$1C,$1C,$1C,$1C,$20,$24,$24,$24,$24,$28,$28,$18,$18
.byte $18,$18,$18,$28,$24,$20,$20,$20,$1C,$18,$20,$20,$24,$28,$20,$24
.byte $28,$28,$28,$28,$28,$28,$18,$18,$20,$24,$28,$28,$28,$28,$24,$10
.byte $10,$10,$1C,$18,$10,$20,$28,$24,$2C,$28,$28,$10,$24,$20,$20,$18
.byte $14,$18,$20,$24,$28,$20,$28,$20,$28,$28,$18,$20,$28,$24,$2C,$28
; ========== surprise rate for each battle ($8A20-$8A9F) END ==========


; ========== monster sets (64 * 4 bytes) ($8AA0-$8B9F) START ==========
Mob_sets:
.byte $00,$02,$01,$03,$09,$04,$06,$05,$0C,$0D,$07,$0E,$0B,$10,$07,$0A
.byte $0A,$08,$10,$11,$0E,$08,$0B,$0F,$16,$14,$17,$1A,$12,$18,$1B,$13
.byte $18,$1B,$13,$19,$17,$1A,$18,$1B,$18,$1B,$19,$1C,$1E,$19,$1C,$22
.byte $19,$1C,$22,$25,$25,$1D,$23,$1F,$20,$21,$15,$26,$1F,$24,$00,$00
.byte $2C,$27,$29,$33,$30,$31,$32,$35,$2D,$2B,$2A,$37,$2E,$28,$34,$36
.byte $2F,$30,$32,$37,$38,$39,$3A,$40,$3E,$3C,$46,$41,$43,$41,$49,$00

;; [$8B00 :: 0x2CB00]

.byte $3B,$3D,$45,$00,$3D,$45,$3F,$42,$3F,$42,$44,$4A,$48,$3F,$4A,$47
.byte $4F,$4C,$51,$4D,$4B,$50,$4D,$00,$55,$4D,$4F,$4E,$56,$52,$00,$00
.byte $52,$53,$5D,$00,$56,$53,$57,$00,$54,$59,$5C,$00,$5A,$5C,$5D,$00
.byte $5B,$58,$5E,$5A,$5F,$60,$62,$63,$66,$6A,$71,$65,$66,$6A,$6D,$00
.byte $66,$6A,$67,$6B,$67,$6D,$6B,$00,$68,$71,$65,$00,$68,$6C,$6F,$6E
.byte $70,$6F,$6E,$00,$72,$64,$65,$00,$73,$64,$65,$00,$74,$68,$6C,$69
.byte $62,$60,$66,$00,$60,$62,$61,$64,$67,$6B,$68,$6C,$75,$00,$00,$00
.byte $76,$00,$00,$00,$77,$00,$00,$00,$78,$00,$00,$00,$79,$00,$00,$00
.byte $7A,$00,$00,$00,$7B,$00,$00,$00,$7C,$00,$00,$00,$7D,$00,$00,$00
.byte $7E,$00,$00,$00,$7F,$00,$00,$00,$74,$65,$00,$00,$69,$00,$00,$00
; ========== monster sets (64 * 4 bytes) ($8AA0-$8B9F) END ==========


; ========== monster min/max counts (122 * 4 bytes) ($8BA0-$8D87) START ==========
;; [$8BA0 :: 0x2CBA0]
Mob_minmax_cnt:
.byte $00,$42,$00,$00,$52,$00,$00,$00,$31,$31,$00,$00,$00,$00,$42,$00
.byte $50,$00,$62,$00,$40,$40,$42,$00,$00,$77,$00,$11,$40,$70,$50,$11
.byte $11,$00,$00,$00,$00,$00,$00,$44,$30,$40,$20,$31,$00,$00,$31,$00
.byte $00,$30,$31,$00,$41,$00,$00,$00,$00,$00,$00,$51,$30,$00,$00,$31
.byte $00,$31,$00,$00,$21,$20,$00,$00,$00,$20,$00,$21,$10,$21,$00,$10
.byte $00,$00,$00,$81,$00,$41,$00,$00,$21,$20,$20,$00,$00,$10,$00,$31

;; [$8C00 :: 0x2CC00]

.byte $00,$00,$20,$31,$00,$73,$00,$00,$00,$31,$30,$30,$40,$00,$00,$31
.byte $20,$21,$20,$20,$42,$00,$00,$00,$21,$21,$00,$00,$20,$20,$21,$00
.byte $00,$00,$00,$62,$00,$00,$31,$31,$21,$21,$10,$10,$20,$31,$00,$00
.byte $00,$00,$62,$00,$00,$00,$00,$52,$50,$00,$00,$41,$30,$30,$20,$31
.byte $41,$21,$00,$00,$30,$30,$21,$00,$21,$31,$21,$31,$30,$30,$40,$41
.byte $00,$52,$00,$00,$31,$00,$00,$20,$00,$40,$31,$00,$00,$00,$41,$00
.byte $00,$00,$21,$20,$20,$20,$21,$20,$30,$31,$00,$00,$20,$10,$21,$00
.byte $31,$00,$00,$00,$00,$00,$00,$31,$20,$00,$00,$11,$00,$00,$62,$00
.byte $00,$00,$21,$21,$00,$31,$00,$20,$40,$31,$00,$00,$62,$00,$00,$00
.byte $00,$30,$00,$21,$21,$20,$10,$10,$00,$00,$73,$00,$00,$00,$21,$42
.byte $00,$88,$00,$00,$00,$21,$20,$10,$00,$20,$20,$21,$21,$00,$00,$20
.byte $30,$20,$21,$00,$00,$00,$30,$21,$20,$20,$20,$11,$00,$30,$21,$00
.byte $20,$21,$00,$00,$41,$00,$20,$00,$00,$10,$20,$21,$31,$20,$00,$10
.byte $30,$00,$21,$00,$00,$00,$20,$11,$00,$40,$00,$52,$21,$40,$30,$30
.byte $00,$40,$00,$32,$00,$20,$20,$42,$00,$72,$00,$00,$20,$41,$00,$00
.byte $41,$21,$00,$00,$62,$11,$00,$00,$20,$00,$11,$00,$52,$00,$11,$00

;; [$8D00 :: 0x2CD00]

.byte $00,$00,$21,$00,$00,$20,$11,$00,$11,$22,$11,$00,$20,$11,$00,$00
.byte $74,$00,$00,$00,$40,$41,$00,$00,$30,$20,$41,$00,$00,$00,$00,$61
.byte $30,$40,$40,$21,$10,$10,$11,$00,$00,$00,$11,$41,$50,$21,$00,$00
.byte $30,$40,$41,$00,$00,$00,$42,$31,$42,$20,$42,$00,$21,$11,$20,$00
.byte $42,$00,$00,$20,$11,$50,$00,$00,$11,$00,$50,$00,$11,$00,$43,$00
.byte $11,$00,$42,$00,$00,$00,$00,$21,$00,$30,$30,$11,$11,$20,$20,$00
.byte $00,$71,$11,$00,$76,$00,$21,$00,$00,$20,$00,$41,$21,$21,$21,$21
.byte $70,$60,$11,$00,$20,$00,$00,$31,$00,$62,$00,$00,$00,$60,$21,$00
.byte $82,$00,$00,$00,$00,$00,$00,$00
; ========== monster min/max counts (122 * 4 bytes) ($8BA0-$8D87) END ==========


; ========== weapon palettes offset (53 bytes) ($8D88-$8DBD) START ==========
; by weapon( from Knife(3Ah(00h)) to Yoichi Bow(6Fh(35h))
; bank_00 -> $9700,X $9780,X $9800,X
;; [$8D88 :: 0x2CD88]
Wpn_pal_ofs:
.byte $60,$65,$67,$63,$6E,$6D,$6B,$6F
.byte $60,$67,$70,$6A,$69,$61,$63,$73,$60,$64,$67,$70,$6F,$61,$6A,$71
.byte $63,$6D,$64,$67,$71,$68,$66,$62,$6F,$61,$6A,$63,$6B,$6C,$60,$60
.byte $64,$67,$6F,$69,$62,$63,$6F,$60,$67,$74,$61,$6A,$69,$72
; ========== weapon palettes offset (53 bytes) ($8D88-$8DBD) END ==========


; ========== monster widths ($8DBE-$8DCD) START ==========
;; [$8DBE :: 0x2CDBE] 16 bytes
Mob_width:
.byte $04,$04,$04,$04,$06,$06,$06,$06,$06,$0C,$0C,$0C,$0C,$0C,$0C,$12
; ========== monster widths ($8DBE-$8DCD) END ==========


; ========== monster heights ($8DCE-$8DDD) START ==========
;; [$8DCE :: 0x2CDCE] 16 bytes
Mob_height:
.byte $04,$04,$06,$06,$06,$06,$06,$06,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
; ========== monster heights ($8DCE-$8DDD) END ==========


; ========== boss tilemaps (6 * 144 bytes) ($8DDE-$9215) START ==========
;; [$8DDE :: 0x2CDDE]
Boss_tile:
.byte $00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$21

;; [$8E00 :: 0x2CE00]

.byte $00,$00,$00,$00,$00,$00,$00,$00,$22,$23,$24,$25,$26,$27,$28,$29
.byte $2A,$00,$2B,$2C,$2D,$2E,$2F,$30,$31,$32,$00,$00,$33,$34,$35,$36
.byte $37,$38,$39,$3A,$3B,$3C,$00,$00,$3D,$3E,$3F,$40,$41,$42,$43,$44
.byte $45,$46,$00,$00,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F,$50,$00,$00
.byte $51,$52,$53,$54,$55,$56,$86,$87,$88,$00,$00,$00,$00,$00,$89,$8A
.byte $00,$00,$8B,$8C,$8D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $58,$59,$5A,$00,$00,$00,$5B,$5C,$5D,$00,$00,$5E,$5F,$60,$61,$62
.byte $63,$64,$65,$66,$67,$00,$00,$00,$00,$68,$69,$6A,$6B,$6C,$6D,$6E
.byte $00,$00,$00,$00,$00,$00,$6F,$70,$71,$72,$73,$00,$00,$00,$00,$00
.byte $00,$00,$74,$75,$76,$77,$78,$00,$00,$00,$00,$00,$00,$00,$00,$79
.byte $7A,$7B,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$7D,$7E,$7F,$80,$81
.byte $82,$00,$00,$00,$00,$00,$00,$83,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$84,$85,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

;; [$8F00 :: 0x2CF00]

.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$91,$92,$93,$94,$00,$00
.byte $00,$00,$00,$00,$00,$95,$96,$97,$98,$99,$9A,$00,$00,$00,$00,$00
.byte $9B,$9C,$9D,$9E,$9F,$A0,$A1,$00,$00,$00,$00,$00,$A2,$A3,$A4,$A5
.byte $A6,$A7,$A8,$00,$00,$00,$00,$00,$00,$A9,$AA,$AB,$AC,$AD,$AE,$AF
.byte $00,$00,$00,$00,$00,$B0,$B1,$B2,$B3,$B4,$B5,$B6,$00,$00,$00,$00
.byte $00,$B7,$B8,$B9,$BA,$BB,$BC,$00,$00,$00,$00,$00,$BD,$BE,$BF,$C0
.byte $C1,$C2,$00,$00,$00,$00,$00,$00,$C4,$C5,$C6,$00,$C7,$C3,$8E,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$C8,$C9,$CA,$CB,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$CC,$CD,$CE,$CF,$D0,$D1,$D2,$00,$00,$00,$00
.byte $00,$D3,$D4,$D5,$D6,$D7,$D8,$D9,$DA,$00,$00,$00,$00,$DB,$DC,$DD
.byte $DE,$DF,$E0,$E1,$E2,$00,$00,$00,$00,$E3,$E4,$E5,$E6,$E7,$E8,$00
.byte $E9,$00,$00,$00,$00,$EA,$EB,$EC,$ED,$EE,$EF,$00,$00,$00,$00,$00
.byte $00,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$00,$00,$00,$00,$F8,$F9,$FA

;; [$9000 :: 0x2D000]

.byte $FB,$FC,$FD,$FE,$00,$00,$00,$00,$00,$00,$00,$FF,$57,$8F,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$21,$22,$23,$24,$00
.byte $00,$00,$00,$00,$00,$00,$25,$26,$27,$28,$29,$00,$00,$00,$00,$00
.byte $00,$2A,$2B,$2C,$2D,$2E,$2F,$30,$00,$00,$00,$00,$00,$31,$32,$33
.byte $34,$35,$36,$37,$00,$00,$00,$00,$00,$38,$39,$3A,$3B,$3C,$3D,$3E
.byte $00,$00,$00,$00,$00,$3F,$40,$41,$42,$43,$44,$45,$00,$00,$00,$00
.byte $00,$46,$47,$48,$49,$4A,$4B,$4C,$00,$00,$00,$00,$00,$4D,$4E,$4F
.byte $50,$51,$52,$53,$00,$00,$00,$00,$00,$00,$54,$55,$00,$56,$57,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$58,$59
.byte $00,$00,$5A,$5B,$00,$00,$00,$00,$00,$5C,$5D,$5E,$5F,$60,$61,$62
.byte $00,$00,$00,$00,$63,$64,$65,$66,$67,$68,$69,$6A,$00,$00,$00,$00
.byte $6B,$6C,$6D,$6E,$6F,$70,$71,$72,$00,$00,$00,$00,$73,$74,$75,$76
.byte $77,$78,$79,$7A,$7B,$7C,$00,$7D,$7E,$00,$7F,$80,$81,$82,$83,$84

;; [$9100 :: 0x2D100]

.byte $85,$86,$00,$00,$00,$00,$87,$88,$89,$8A,$8B,$00,$00,$00,$00,$00
.byte $00,$00,$8C,$8D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$8F,$90,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$91,$92,$93,$94,$00,$00,$96,$00,$00
.byte $00,$00,$00,$00,$00,$97,$98,$99,$9A,$9B,$9C,$9D,$9E,$9F,$FF,$A0
.byte $00,$00,$00,$00,$00,$00,$00,$00,$A1,$A2,$A3,$A4,$A5,$A6,$A7,$A8
.byte $A9,$00,$00,$B4,$B5,$00,$00,$00,$00,$00,$AA,$AB,$AC,$AD,$AE,$AF
.byte $B0,$B1,$B2,$B3,$B4,$C2,$C3,$00,$00,$00,$B6,$B7,$B8,$B9,$BA,$BB
.byte $BC,$BD,$BE,$BF,$C0,$C1,$C2,$C3,$00,$00,$00,$00,$C4,$C5,$C6,$C7
.byte $C8,$C9,$CA,$CB,$CC,$CD,$CE,$CF,$D0,$00,$00,$00,$00,$D1,$D2,$D3
.byte $D4,$D5,$D6,$D7,$D8,$D9,$DA,$DB,$DC,$DD,$DE,$DF,$00,$00,$00,$E1
.byte $E2,$E3,$E4,$E5,$E6,$E7,$E8,$E9,$00,$EB,$00,$00,$00,$00,$00,$00
.byte $00,$EC,$00,$ED,$EE,$EF,$F0,$F1,$F2,$F3,$F4,$00,$00,$00,$00,$00
.byte $00,$00,$00,$F5,$00,$F6,$00,$F7,$00,$F8,$F9,$FA,$FB,$00,$00,$00

;; [$9200 :: 0x2D200]

.byte $00,$00,$00,$00,$00,$FC,$00,$00,$00,$FD,$00,$00,$EB,$FE,$00,$00
.byte $00,$00,$00,$00,$00,$00
; ========== boss tilemaps (6 * 144 bytes) ($8DDE-$9215) END ==========


; ========== (??? * 9 bytes) ($9216-$9263) START ==========
; monster id per data(09h-0Fh)
; ??? table, OAM index ??
;; [$9216 :: 0x2D216]
Bigmob_attr_tbl:
.byte $00,$00,$15,$15,$51,$50,$05,$50,$00
;921F
.byte $55,$51,$54,$04,$40,$50,$05,$00,$00
;9228
.byte $00,$00,$00,$00,$00,$54,$05,$40,$00
;9231
.byte $00,$01,$04,$10,$51,$45,$00,$00,$00
;923A
.byte $00,$00,$50,$00,$00,$00,$00,$00,$00
;9243
.byte $00,$00,$10,$00,$00,$00,$00,$00,$00
;924C
.byte $00,$04,$05,$55,$01,$41,$40,$50,$00
;9255
.byte $00,$00,$00,$00,$00
;925A-925B
Mask_pal:
.byte $2B,$00
;925C:
.byte $EE,$EF,$F0,$F1
.byte $F2,$F3,$F4,$00
;; [$9264 :: 0x2D264] (6 * 6 bytes)
Sprite_X_tbl:
.byte $00,$08,$00,$08,$00,$08
.byte $F8,$00,$08,$F8,$00,$08
.byte $FC,$04,$FC,$04,$FC,$04
;9276 - character graphics type
Sprite_Y_tbl:
.byte $00,$00,$08,$08,$10,$10
.byte $08,$08,$08,$10,$10,$10
.byte $F8,$F8,$00,$00,$08,$08
;; [$9288 :: 0x2D288] (8 * 6 bytes) - character tile index table
Status_tile_idx_tbl:
.byte $00,$01,$02,$03,$04,$05
.byte $00,$01,$02,$03,$06,$07
.byte $00,$01,$08,$09,$0A,$0B
.byte $00,$0F,$02,$11,$06,$07
.byte $0E,$0F,$10,$11,$12,$13
.byte $00,$01,$0C,$0D,$06,$07
.byte $14,$15,$16,$17,$18,$19
.byte $1A,$1B,$1C,$1D,$1E,$1F

; ========== status info (4 * 15 bytes) ($92B8-$92F3) START ==========
;$92B8 - status priority
Status_pri:
.byte $00,$09,$01,$0A,$02,$03,$0C,$04,$0F,$0B,$0E,$0D,$05,$06,$07
;$92C7 - text id
Text_id:
.byte $F6,$F6,$F7,$F0,$F8,$F9,$F2,$FA,$F5,$F1,$F4,$F3,$FB,$FC,$FD
;$92D6 - status pose
Status_pose:
.byte $00,$02,$02,$02,$02,$02,$02,$02,$00,$02,$02,$00,$00,$03,$04
;$92E5 - status graphics
Status_gfx:
.byte $FF,$FF,$00,$01,$01,$02,$05,$03,$06,$04,$FF,$FF,$FF,$FF,$FF
; ========== status info (4 * 15 bytes) ($92B8-$92F3) END ==========


;; [$92F4-$9305 :: 0x2D2F4] (3 * 6 bytes)
Sprite_idx_A:
.byte $00,$01,$02,$03,$04,$05
.byte $00,$01,$02,$03,$06,$07
.byte $20,$21,$22,$23,$24,$25


; ========== battle songs ($9306-$930A) START ==========
;; [$9306 :: 0x2D306]
Battle_songs:
.byte $52	; battle
.byte $53	; final battle
.byte $54	; fall sound
.byte $55	; battle win
.byte $56	; game over
; ========== battle sound effects ($930B-$9332) START ==========
;; [$930B :: 0x2D30B] - 69 bytes
Battle_snd_eft_tbl:
.byte $00,$01,$05,$08,$04
.byte $04,$1F,$03,$02,$06,$07,$00,$00,$0A,$1D,$00,$0B,$0C,$09,$11,$20
.byte $0D,$16,$13,$14,$15,$0E,$0E,$0F,$0F,$0E,$19,$1C,$1C,$10,$18,$10
.byte $17,$05,$17
Mov_step:
.byte $00,$00,$00,$02,$01,$02,$02,$01
Mov_y_step:
.byte $00,$00,$00,$FB,$FF,$00,$03,$03
Char_low_step:
.byte $01,$01,$02,$02,$02,$02,$02,$01

Char_low_pos:
.byte $01,$02,$07,$07,$08

; ========== spell targeting (1 bit per sepll) ($9350-$9354) START ==========
;; [$9350 :: 0x2D350]
Spell_target:
.byte $FF,$FF,$01,$E0,$F7
; $9355 - (15 x 5 byte) = OAM INDEX + OAM ATTR table (Weapon with character OAM INDEX)
; index, index, index, index, attribute table id(/4) on $93A0
OAM_INDEX_wpn:
.byte $50,$51,$52,$53,$00	; 9355	- 0(sword front)
.byte $51,$50,$53,$52,$01	; 935A	- 1(sword back)
.byte $53,$50,$50,$50,$00	; 935F	- 2
.byte $50,$51,$51,$50,$00	; 9364	- 3
.byte $51,$50,$50,$51,$02	; 9369	- 4
.byte $52,$53,$53,$53,$02	; 936E	- 5
.byte $53,$52,$53,$53,$02	; 9373	- 6
.byte $53,$53,$53,$52,$02	; 9378	- 7
.byte $53,$52,$53,$53,$02	; 937D	- 8
.byte $54,$54,$54,$54,$02	; 9382	- 9
.byte $55,$55,$55,$55,$02	; 9387	- A
.byte $56,$56,$56,$56,$02	; 938C	- B
.byte $57,$57,$57,$57,$02	; 9391	- C
.byte $54,$00,$55,$00,$00	; 9396	- D
.byte $56,$57,$00,$00,$00	; 939B	- E(Bow aming)
; $93A0 - OAM ATTR ?? (?? x 4 byte)
OAM_ATTR:
.byte $02,$02,$02,$02		; 93A0	- 0
.byte $42,$42,$42,$42		; 93A4	- 1
.byte $02,$42,$82,$C2		; 93A8	- 2
; $93AC
OAM_XY:
.byte $08,$F8,$F0,$00
.byte $10,$F8,$FC,$04,$FC,$0A
Pal_color:	;93B6 - palette color
.byte $08,$02,$31,$04,$00,$33,$04,$02,$35,$04
.byte $00,$37,$04,$04,$39,$04,$00,$3B,$04,$05,$3D,$04,$00,$3F,$04,$00
.byte $08,$00,$00,$08,$52,$53,$00,$51,$50,$53,$52,$01,$53,$50
; $93DE - weapon action type from weapon type(property)
; weapon type	weapon action type
; 00h(fist)	00h
; 01h(shield)	00h
; 02h(knife)	01h
; .
; .
; .
; 07h(bow)	03h
; undefined	02h(fist)
Wpn_act_type_tbl:
.byte $00			; 93DE	00h - fist
.byte $00			; 93DF	01h - Shield
.byte $01			; 93E0	02h - Knife
.byte $01			; 93E1	03h - Staff
.byte $01			; 93E2	04h - Spear
.byte $01			; 93E3	05h - Sword
.byte $01			; 93E4	06h - Axe
.byte $03			; 93E5	07h - bow
; $93E6 - right hand - action pose A / B
Wpn_prop_A:
.byte $01,$03,$02,$06,$05
; $93EB	-
Wpn_prop_B:
.byte $01,$02,$02,$06,$05
; Wpn_prop_ left hand
.byte $01,$04,$02,$02,$05
.byte $01,$06,$02,$02,$05
OAM_Y_tbl:			; 93FA
.byte $00,$00,$08,$08,$10,$10

;; [$9400 :: 0x2D400]

.byte $18,$18,$20,$20,$28,$28,$00,$00,$08,$08,$10,$10,$18,$18,$20,$20
.byte $28,$28,$00,$08,$08,$10,$10,$18,$18,$18,$18,$20,$20,$20,$00,$00
.byte $00,$00,$00,$00,$00,$08,$08,$08,$08,$08,$00,$08,$00,$08,$08,$18
.byte $08,$28,$00,$20,$10,$08,$20,$10,$00,$00,$08,$08,$10,$10,$10,$10
.byte $18,$18,$18,$18,$08,$00,$08,$00,$08,$00,$08,$00,$00,$08,$00,$00
.byte $08,$08,$00,$08,$08,$08,$08,$10,$08,$10,$00,$00,$08,$08,$00,$00
.byte $08,$08,$00,$00,$08,$08,$00,$08,$08,$00,$08,$08,$00,$08,$08,$00
.byte $08,$10,$00,$08,$10,$02,$05,$02,$11,$14
OAM_INDEX_tbl:			; 947A
.byte $44,$45,$46,$47,$48,$49
.byte $4A,$4B,$4C,$4D,$4E,$4F,$45,$44,$47,$46,$49,$48,$4B,$4A,$4D,$4C
.byte $4F,$4E,$44,$45,$46,$44,$44,$46,$45,$45,$46,$45,$44,$44,$45,$46
.byte $47,$48,$49,$4A,$4B,$44,$45,$46,$47,$45,$47,$47,$49,$4A,$4B,$44
.byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$45,$46,$47,$47,$46,$46,$47
.byte $45,$44,$44,$45,$44,$45,$45,$46,$46,$47,$47,$47,$46,$45,$4B,$4A
.byte $49,$48,$44,$44,$44,$45,$45,$46,$48,$49,$60,$61,$62,$63,$64,$65
.byte $66,$67,$68,$69,$6A,$6B,$48,$48,$48,$49,$49,$49,$4A,$4A,$4A,$44
.byte $45,$46,$47,$48,$49,$24,$12,$00,$00,$00
OAM_ATTR_tbl:			; 94FA
.byte $02,$02,$02,$02,$02,$02

;; [$9500 :: 0x2D500]

.byte $02,$02,$02,$02,$02,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42
.byte $42,$42,$02,$02,$02,$42,$02,$42,$42,$02,$02,$42,$42,$02,$02,$02
.byte $02,$02,$02,$02,$02,$82,$82,$82,$82,$82,$02,$82,$02,$02,$02,$02
.byte $42,$82,$C2,$02,$42,$82,$C2,$02,$02,$02,$02,$02,$C2,$C2,$82,$82
.byte $C2,$C2,$82,$82,$C2,$42,$C2,$42,$C2,$42,$C2,$C2,$C2,$C2,$C2,$C2
.byte $C2,$C2,$42,$82,$C2,$02,$C2,$02,$02,$02,$02,$02,$02,$02,$02,$02
.byte $02,$02,$02,$02,$02,$02,$42,$82,$C2,$42,$82,$C2,$42,$82,$C2,$42
.byte $42,$42,$42,$42,$42,$00,$01,$00,$00,$00
OAM_X_tbl:			; 957A
.byte $00,$08,$00,$08,$00,$08
.byte $00,$08,$00,$08,$00,$08,$00,$08,$00,$08,$00,$08,$00,$08,$00,$08
.byte $00,$08,$0A,$0A,$12,$08,$12,$00,$08,$12,$18,$02,$11,$1A,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$08,$00
.byte $08,$08,$10,$10,$18,$20,$20,$28,$10,$18,$10,$18,$00,$08,$10,$18
.byte $00,$08,$10,$18,$08,$08,$08,$08,$08,$08,$08,$00,$08,$00,$00,$08
.byte $00,$08,$08,$00,$08,$00,$08,$00,$00,$00,$00,$08,$00,$08,$00,$08
.byte $00,$08,$00,$08,$00,$08,$08,$00,$08,$08,$00,$08,$08,$00,$08,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00



; ========== battle graphics code ($9600-$BFFF) START ==========
;; [$9600 :: 0x2D600]
; Subroutine list
	JMP Set_ppu_data_00	; 9600	$4C $63 $9D
	JMP Set_ppu_data	; 9603	$4C $68 $9D
	JMP Apply_palettes	; 9606	$4C $7C $9D
	JMP Fill_ppu_inc_00	; 9609	$4C $58 $9D
	JMP Fill_ppu_inc	; 960C	$4C $5B $9D
	JMP Copy_tile_ppu	; 960F	$4C $A2 $9D	tile copy ppu
Char_pose_0B:
	JMP Char_pose		; 9612	$4C $BA $A5
Chk_mag_target_0B:
	JMP Chk_mag_target	; 9615	$4C $A2 $A6
Set_front_0B:
	JMP Set_mob_front	; 9618	$4C $30 $9A
Mob_dead_ani_0B:
	JMP Mob_dead_ani	; 961B	$4C $70 $A9
Attack_0B:
	JMP Attack		; 961E	$4C $71 $B0
Copy_cursor_0B:
	JMP Copy_cursor_gfx	; 9621	$4C $EE $9C
Load_char_0B:
	JMP Load_char_gfx	; 9624	$4C $DE $AB
Win_celemony_0B:
	JMP Win_celemony	; 9627	$4C $BF $AD
Fade_out_0B:
	JMP Fade_out		; 962A	$4C $79 $9E
Set_status_gfx_0B:
	JMP Set_status_gfx	; 962D	$4C $32 $AF
Status_ani_0B:
	JMP Status_ani		; 9630	$4C $CB $AF
Run_away_0B:
	JMP Run_away		; 9633	$4C $6E $AE
Battle_defeat_0B:
	JMP Battle_defeat	; 9636	$4C $F2 $AE
; End of Subroutine list

; Marks	: init battle
;	  loop for battle
Init_battle:
	JSR Init_ppu		; 9639	$20 $C3 $96	init ppu
	JSR Make_rng_tbl	; 963C	$20 $D5 $97	init rng
	JSR LoadBattleAniFX	; 963F	$20 $C3 $FB	load battle animation(fx) graphics
	JSR Load_battle_prop	; 9642	$20 $3D $98	load battle properties
	JSR SR_Init_battle_stats	; 9645	$20 $17 $FB
	LDA $7B4C		; 9648	$AD $4C $7B	monster graphics set
	AND #$03		; 964B	$29 $03
	LDX #$0E		; 964D	$A2 $0E
	JSR Multi		; 964F	$20 $79 $FC
	LDA $02			; 9652	$A5 $02
	ADC #$80		; 9654	$69 $80
	STA $03			; 9656	$85 $03
	LDA #$00		; 9658	$A9 $00		BANK 07/8000 (monster graphics)
	STA $02			; 965A	$85 $02
	STA $00			; 965C	$85 $00
	LDA #$12		; 965E	$A9 $12
	STA $01			; 9660	$85 $01
	JSR Set_mob_gfx		; 9662	$20 $62 $FB	load monster graphics
	JSR Load_text_gfx	; 9665	$20 $84 $FB	load text graphics
	JSR Init_attr_tbl	; 9668	$20 $6C $97	init attribute table
	JSR Copy_l_attr		; 966B	$20 $E4 $A1	copy left attribute table to ppu
	JSR Copy_r_attr		; 966E	$20 $F9 $A1	copy right attribute tale to ppu
	JSR Init_tile_bg	; 9671	$20 $9F $9E	init tilemap for battle bg
	JSR Init_tilemap_mobs	; 9674	$20 $FA $9E	init tilemap for monsters
	LDX #$00		; 9677	$A2 $00
	LDA mob_gfx_id		; 9679	$AD $72 $7B
	CMP #$09		; 967C	$C9 $09
	BCC L2D686		; 967E	$90 $06		branch if not a boss
	BIT $7B48		; 9680	$2C $48 $7B
	BMI L2D686		; 9683	$30 $01		branch if "B" battle
	INX			; 9685	$E8
L2D686:
	LDA Battle_songs,X	; 9686	$BD $06 $93	battle song (normal battle song)
	STA $E0			; 9689	$85 $E0
	JSR Copy_OAM		; 968B	$20 $4E $9E
	LDA #$1E		; 968E	$A9 $1E		enable sprites and background
	STA $3C			; 9690	$85 $3C
	STA PpuMask_2001	; 9692	$8D $01 $20
	JSR Mob_entry		; 9695	$20 $4E $A0	monster entry
	LDX $7B49		; 9698	$AE $49 $7B	battle bg
	LDY #$09		; 969B	$A0 $09		bg palette 2
	JSR Set_wpn_pal		; 969D	$20 $03 $FC
	JSR Snd_wait_NMI_OAM_PAL; 96A0	$20 $54 $9E
	JSR Fadein_battle_bg	; 96A3	$20 $AE $9F	fade in battle bg
	JSR Init_char_sprite	; 96A6	$20 $BD $A3	init character sprite data
	JSR Init_char_gfx	; 96A9	$20 $43 $9B	init character graphics
	JSR Char_entry		; 96AC	$20 $8D $A0	character entry
	LDA #$00		; 96AF	$A9 $00
	STA $79B5		; 96B1	$8D $B5 $79
	LDA #$30		; 96B4	$A9 $30
	STA $79B7		; 96B6	$8D $B7 $79
	JSR Apply_OAM_pal	; 96B9	$20 $33 $9E
	LDA #$08		; 96BC	$A9 $08
	STA $36			; 96BE	$85 $36
	JMP SR_BattleMain	; 96C0	$4C $06 $FB
; End of Battle_code

; Name	: Init_ppu
; Marks	: init ppu
Init_ppu:
	JSR Reset_all_pal	; 96C3	$20 $3E $97
	JSR Wait_NMI_set	; 96C6	$20 $2A $FA	Wait NMI
	JSR Apply_palettes	; 96C9	$20 $7C $9D
	LDA #$90		; 96CC	$A9 $90
	STA PpuControl_2000	; 96CE	$8D $00 $20
	STA $3A			; 96D1	$85 $3A
	STA $3B			; 96D3	$85 $3B
	LDA #$00		; 96D5	$A9 $00
	STA PpuMask_2001	; 96D7	$8D $01 $20
	STA $3C			; 96DA	$85 $3C
	STA $38			; 96DC	$85 $38
	STA $39			; 96DE	$85 $39
	STA $37			; 96E0	$85 $37
	LDX #$FF		; 96E2	$A2 $FF
	STX $36			; 96E4	$86 $36
	TAY			; 96E6	$A8
	JSR Fill_ppu_blk	; 96E7	$20 $2B $97
	LDY #$27		; 96EA	$A0 $27
L2D6EC:
	JSR Set_ppu_data	; 96EC	$20 $68 $9D	PPU set #$00(zero) : ($1100-$11FF)
	DEY			; 96EF	$88
	BNE L2D6EC		; 96F0	$D0 $FA
	LDY #$04		; 96F2	$A0 $04
	JSR Fill_ppu_blk	; 96F4	$20 $2B $97
	LDX #$60		; 96F7	$A2 $60
	JSR Set_ppu_data	; 96F9	$20 $68 $9D
	LDY #$26		; 96FC	$A0 $26
	STY $01			; 96FE	$84 $01
	JSR Set_ppu_data_00	; 9700	$20 $63 $9D
	LDX #$60		; 9703	$A2 $60
	JSR Set_ppu_data	; 9705	$20 $68 $9D
	LDY #$08		; 9708	$A0 $08
	JSR Fill_ppu_blk	; 970A	$20 $2B $97
	LDX #$26		; 970D	$A2 $26
	STX $01			; 970F	$86 $01
	LDX #$20		; 9711	$A2 $20
	JSR Set_ppu_data_00	; 9713	$20 $63 $9D	X will be 0
L2D716:
	LDA Sprite0_init_data,X	; 9716	$BD $D1 $97
	STA $0200,X		; 9719	$9D $00 $02	OAM[0]
	INX			; 971C	$E8
	CPX #$04		; 971D	$E0 $04
	BNE L2D716		; 971F	$D0 $F5		loop
	LDX #$FC		; 9721	$A2 $FC
	JSR Rst_OAM_buf		; 9723	$20 $E9 $9D
	JSR Set_underbar_tile	; 9726	$20 $4F $97
	LDY #$0C		; 9729	$A0 $0C
; Name	: Fill_ppu_blk
; Y	: offset
; Marks	: is subroutine ?? - fill ppu block
;	  $00(ADDR) = ppu address
Fill_ppu_blk:
	LDA Ppu_init_data,Y	; 972B	$B9 $B5 $97
	STA $00			; 972E	$85 $00
	LDA Ppu_init_data+1,Y	; 9730	$B9 $B6 $97
	STA $01			; 9733	$85 $01
	LDA Ppu_init_data+2,Y	; 9735	$B9 $B7 $97
	LDX Ppu_init_data+3,Y	; 9738	$BE $B8 $97
	JMP Set_ppu_data_00	; 973B	$4C $63 $9D
; End of Fill_ppu_blk
; End of Init_ppu

; Name	: Reset_all_pal
; Marks	: reset all palettes
Reset_all_pal:
	LDX #$00		; 973E	$A2 $00
	LDY #$20		; 9740	$A0 $20
; Name	: Reset_pal
; X	: Start offset
; Y	: Size to copy
; Marks	: Reset palettes
Reset_pal:
	LDA #$0F		; 9742	$A9 $0F
L2D744:
	STA $79A8,X		; 9744	$9D $A8 $79	color palettes($79A8-$79C7)
	INX			; 9747	$E8
	DEY			; 9748	$88
	BNE L2D744		; 9749	$D0 $F9		loop
	RTS			; 974B	$60
; End of Reset_pal
; End of Reset_all_pal

; ????? - unused
	JSR Wait_MENUs_NMI	; 974C	$20 $3F $9E

; Name	: Set_underbar_tile
; Marks	: ppu $1050-$105F = 00h
;	  ppu $105F	  = FFh
;	  background tile id 5 set to underbar tile
Set_underbar_tile:
	LDY #$10		; 974F	$A0 $10
	JSR Fill_ppu_blk	; 9751	$20 $2B $97
	LDY #$14		; 9754	$A0 $14
	JSR Fill_ppu_blk	; 9756	$20 $2B $97
	JMP Wait_NMI_end	; 9759	$4C $46 $FD
; End of Set_underbar_tile

; unused ??
	JSR Wait_MENUs_NMI	; 975C	$20 $3F $9E
	LDY #$10		; 975F	$A0 $10
	JSR Fill_ppu_blk	; 9761	$20 $2B $97
	LDY #$18		; 9764	$A0 $18
	JSR Fill_ppu_blk	; 9766	$20 $2B $97
	JMP Wait_NMI_end	; 9769	$4C $46 $FD
; End of

; Name	: Init_attr_tbl
; Marks	:
;	  init attribute table
Init_attr_tbl:
	LDX #$00		; 976C	$A2 $00
	LDA #$FF		; 976E	$A9 $FF
L2D770:
	STA $79C8,X		; 9770	$9D $C8 $79	left screen attribute table
	INX			; 9773	$E8
	CPX #$80		; 9774	$E0 $80
	BNE L2D770		; 9776	$D0 $F8
	LDA #$00		; 9778	$A9 $00
	STA $00			; 977A	$85 $00
	STA $01			; 977C	$85 $01
	LDX #$10		; 977E	$A2 $10
	LDA #$03		; 9780	$A9,$03
	LDY #$02		; 9782	$A0 $02
	JSR Calc_attr_tbl	; 9784	$20 $0F $A1
	LDA #$08		; 9787	$A9 $08
	STA $00			; 9789	$85 $00
	LDA #$03		; 978B	$A9 $03
	STA $01			; 978D	$85 $01
	LDX #$0E		; 978F	$A2 $0E
	LDA #$06		; 9791	$A9 $06
	LDY #$02		; 9793	$A0 $02
	JSR Calc_attr_tbl	; 9795	$20 $0F $A1
	LDA #$00		; 9798	$A9 $00
	STA $0C			; 979A	$85 $0C
L2D79C:
	LDA $0C			; 979C	$A5 $0C
	JSR Init_mob_attr	; 979E	$20 $05 $A2
	INC $0C			; 97A1	$E6 $0C
	LDA $0C			; 97A3	$A5 $0C
	CMP #$08		; 97A5	$C9 $08
	BNE L2D79C		; 97A7	$D0 $F3		loop
	LDX #$40		; 97A9	$A2 $40
L2D7AB:
	LDA $79C7,X		; 97AB	$BD $C7 $79	last of color palettes
	STA $7A07,X		; 97AE	$9D $07 $7A	last of attribute table
	DEX			; 97B1	$CA
	BNE L2D7AB		; 97B2	$D0 $F7
	RTS			; 97B4	$60
; End of Init_attr_tbl

; ppu init fill data (8 * 4 bytes)
;   +$00: ppu address
;    $02: fill value
;    $03: size (zero = 256 bytes)
; data block $97B5-$97D4 - 00h-1Bh
Ppu_init_data:
.byte $00,$00,$00,$00	; ppu $0000-$00FF <- $00 (clear all ppu ram)
.byte $60,$22,$FF,$00	; ppu $2260-$235F <- $FF
.byte $40,$22,$05,$20	; ppu $2240-$225F <- $05
.byte $DF,$06,$FF,$01	; ppu $06DF	  <- $FF
.byte $50,$10,$00,$10	; ppu $1050-$105F <- $00
.byte $5F,$10,$FF,$01	; ppu $105F	  <- $FF
.byte $58,$10,$FF,$08	; ppu $1058-$105F <- $FF

; 97D1 - data block = raster timing sprite data(OAM) Y,INDEX,ATTR,X
Sprite0_init_data:
.byte $8F,$6D,$23,$F8

; Name	: Make_rng_tbl
; Marks	: init rng
;	  some $00-$FF -> store $42
;	  AND 02h
;	  ADC 03h -> 03h or 05h store $0A
;	  $08 = 1, $09 = 00
;	  Make random table
Make_rng_tbl:
	LDX #$00		; 97D5	$A2 $00
L2D7D7:
	ADC $00,X		; 97D7	$75 $00
	INX			; 97D9	$E8
	BNE L2D7D7		; 97DA	$D0 $FB		loop
.byte $8D,$42,$00
	;STA $0042		; 97DC	$8D $42 $00
	AND #$02		; 97DF	$29 $02
	CLC			; 97E1	$18
	ADC #$03		; 97E2	$69 $03
	STA $0A			; 97E4	$85 $0A
	LDA #$01		; 97E6	$A9 $01
	STA $08			; 97E8	$85 $08
	LDA #$00		; 97EA	$A9 $00
	STA $09			; 97EC	$85 $09
	TAY			; 97EE	$A8
L2D7EF:
	LDA $0A			; 97EF	$A5 $0A
	STA $00			; 97F1	$85 $00
	LDA #$00		; 97F3	$A9 $00
	STA $01			; 97F5	$85 $01
	LDA $08			; 97F7	$A5 $08
	STA $02			; 97F9	$85 $02
	LDA $09			; 97FB	$A5 $09
	STA $03			; 97FD	$85 $03
	JSR Multi16		; 97FF	$20 $98 $FC
	LDA $04			; 9802	$A5 $04
	STA $00			; 9804	$85 $00
	LDA $05			; 9806	$A5 $05
	STA $01			; 9808	$85 $01
	LDA #$00		; 980A	$A9 $00
	STA $02			; 980C	$85 $02
	LDA #$04		; 980E	$A9 $04
	STA $03			; 9810	$85 $03
	JSR DoDivision		; 9812	$20 $C3 $FC
	SEC			; 9815	$38
	LDA $07			; 9816	$A5 $07
	SBC #$02		; 9818	$E9 $02
	ORA $06			; 981A	$05 $06
	BEQ L2D82C		; 981C	$F0 $0E
	BCC L2D82C		; 981E	$90 $0C
	LDA #$00		; 9820	$A9 $00
	SBC $06			; 9822	$E5 $06
	STA $06			; 9824	$85 $06
	LDA #$04		; 9826	$A9 $04
	SBC $07			; 9828	$E5 $07
	STA $07			; 982A	$85 $07
L2D82C:
	LDA $07			; 982C	$A5 $07
	STA $09			; 982E	$85 $09
	LSR A			; 9830	$4A
	LDA $06			; 9831	$A5 $06
	STA $08			; 9833	$85 $08
	ROR A			; 9835	$6A
	STA rng_tbl,Y		; 9836	$99 $48 $7A
	INY			; 9839	$C8
	BNE L2D7EF		; 983A	$D0 $B3		loop
	RTS			; 983C	$60
; End of Make_rng_tbl

; Name	: Load_battle_prop
; Marks	: load battle properties
;	  BANK 0B/8620 (battle properties format)
;	  BANK 0B/8A20 (surprise rate for each battle)
;	  BANK 0B/8AA0 (monster sets)
;	  BANK 0B/8BA0 (monster min max counts)
;	  BANK 0B/8DBE (monster widths)
;	  BANK 0B/8DCE (monster heights)
;	  $00 pppp?ggg
;	        p: monster palettes
;	        g: monster graphics set -> $7B4C
;	  $01
;	  $02
;	  $03 monster palette 1
;	  $04 monster palette 2
;	  $05 monster id
;	  $06 monster count (A)
;	  $07 monster count (B)
Load_battle_prop:
	LDX #$00		; 983D	$A2 $00		roll for characters
	LDA #$63		; 983F	$A9 $63
	JSR Random		; 9841	$20 $11 $FD
	STA $0A			; 9844	$85 $0A
	LDX #$00		; 9846	$A2 $00
	LDA #$63		; 9848	$A9 $63
	JSR Random		; 984A	$20 $11 $FD
	STA $0B			; 984D	$85 $0B
	LDX #$00		; 984F	$A2 $00
	STX $00			; 9851	$86 $00
	LDA $7B48		; 9853	$AD $48 $7B	battle id
	AND #$7F		; 9856	$29 $7F
	PHA			; 9858	$48
	TAY			; 9859	$A8
	LDA Surpise_rate,Y	; 985A	$B9 $20 $8A	BANK 0B/8A20 (surprise rate for each battle)
	CMP $0A			; 985D	$C5 $0A
	BEQ L2D865		; 985F	$F0 $04
	BCC L2D865		; 9861	$90 $02
	INC $00			; 9863	$E6 $00		monsters get a point
L2D865:
	LDY #$21		; 9865	$A0 $21
	LDA $6100,Y		; 9867	$B9 $00 $61	agility
	CMP $0B			; 986A	$C5 $0B
	BEQ L2D871		; 986C	$F0 $03
	BCC L2D871		; 986E	$90 $01
	INX			; 9870	$E8		characters get a point
L2D871:
	TXA			; 9871	$8A
	EOR $00			; 9872	$45 $00
	BEQ L2D87A		; 9874	$F0 $04		branch if scores are equal
	TXA			; 9876	$8A
	ASL A			; 9877	$0A
	ORA $00			; 9878	$05 $00
L2D87A:
	STA $7B4A		; 987A	$8D $4A $7B	set battle type
	PLA			; 987D	$68
	LDX #$08		; 987E	$A2 $08
	JSR Multi		; 9880	$20 $79 $FC
	LDA $02			; 9883	$A5 $02
	ADC #<Battle_prop	; 9885	$69 $20
	STA $0A			; 9887	$85 $0A
	LDA $03			; 9889	$A5 $03
 	ADC #>Battle_prop	; 988B	$69 $86
	STA $0B			; 988D	$85 $0B		BANK 0B/8620 (battle properties)
	LDA $7B48		; 988F	$AD $48 $7B
	ROL A			; 9892	$2A
	LDA #$00		; 9893	$A9 $00
	ADC #$06		; 9895	$69 $06
	TAY			; 9897	$A8
	LDA ($0A),Y		; 9898	$B1 $0A
	LDX #$04		; 989A	$A2 $04
	JSR Multi		; 989C	$20 $79 $FC
	LDA $02			; 989F	$A5 $02
	ADC #<Mob_minmax_cnt	; 98A1	$69 $A0
	STA $0C			; 98A3	$85 $0C
	LDA $03			; 98A5	$A5 $03
	ADC #>Mob_minmax_cnt	; 98A7	$69 $8B
	STA $0D			; 98A9	$85 $0D		BANK 0B/8BA0 (monster min max counts)
	LDY #$05		; 98AB	$A0 $05
	LDA ($0A),Y		; 98AD	$B1 $0A
	LDX #$04		; 98AF	$A2 $04
	JSR Multi		; 98B1	$20 $79 $FC
	LDA $02			; 98B4	$A5 $02
	ADC #<Mob_sets		; 98B6	$69 $A0
	STA $0E			; 98B8	$85 $0E
	LDA $03			; 98BA	$A5 $03
	ADC #>Mob_sets		; 98BC	$69 $8A		BANK 0B/8AA0 (monster sets)
	STA $0F			; 98BE	$85 $0F
	LDY #$00		; 98C0	$A0 $00
L2D8C2:
	LDA ($0C),Y		; 98C2	$B1 $0C
	JSR Get_nybble		; 98C4	$20 $07 $FD	get low/high nybble
	JSR Random		; 98C7	$20 $11 $FD
	STA $7B52,Y		; 98CA	$99 $52 $7B	set monster count
	LDA ($0E),Y		; 98CD	$B1 $0E
	STA $7B4E,Y		; 98CF	$99 $4E $7B	set monster id
	INY			; 98D2	$C8
	CPY #$04		; 98D3	$C0 $04
	BNE L2D8C2		; 98D5	$D0 $EB
	LDY #$00		; 98D7	$A0,$00
	LDA ($0A),Y		; 98D9	$B1 $0A
	AND #$07		; 98DB	$29 $07
	STA $7B4C		; 98DD	$8D $4C $7B	set monster graphics set
	LDA ($0A),Y		; 98E0	$B1 $0A
	LDX #$00		; 98E2	$A2 $00
L2D8E4:
	STY $0C,X		; 98E4	$94 $0C
	ASL A			; 98E6	$0A
	ROL $0C,X		; 98E7	$36 $0C
	INX			; 98E9	$E8
	CPX #$04		; 98EA	$E0 $04
	BNE L2D8E4		; 98EC	$D0 $F6
	ASL A			; 98EE	$0A
	TYA			; 98EF	$98
	ROL A			; 98F0	$2A
	STA $7B4B		; 98F1	$8D $4B $7B
	INY			; 98F4	$C8
	LDA ($0A),Y		; 98F5	$B1 $0A
	JSR Get_nybble		; 98F7	$20 $07 $FD
	STA $000F,Y		; 98FA	$99 $0F $00
	STX $10,Y		; 98FD	$96 $10
	INY			; 98FF	$C8
	LDA ($0A),Y		; 9900	$B1 $0A
	JSR Get_nybble		; 9902	$20 $07 $FD
	STA $0010,Y		; 9905	$99 $10 $00
	STX $11,Y		; 9908	$96 $11
	INY			; 990A	$C8
	LDA ($0A),Y		; 990B	$B1 $0A
	STA $7B56		; 990D	$8D $56 $7B	monster palette 1
	INY			; 9910	$C8
	LDA ($0A),Y		; 9911	$B1 $0A
	STA $7B57		; 9913	$8D $57 $7B
	LDX #$3F		; 9916	$A2 $3F		monster palette 2
	LDA #$FF		; 9918	$A9 $FF
L2D91A:
	STA $7B62,X		; 991A	$9D $62 $7B
	DEX			; 991D	$CA
	BPL L2D91A		; 991E	$10 $FA
	LDX #$03		; 9920	$A2 $03
L2D922:
	LDA $7B52,X		; 9922	$BD $52 $7B
	BNE L2D92E		; 9925	$D0 $07		branch if monster count is nonzero
	STA $10,X		; 9927	$95 $10
	LDA #$FF		; 9929	$A9 $FF
	STA $7B4E,X		; 992B	$9D $4E $7B	set monster id to $FF
L2D92E:
	DEX			; 992E	$CA
	BPL L2D922		; 992F	$10 $F1
	LDA #$0F		; 9931	$A9 $0F
	STA $04			; 9933	$85 $04
	LDA #$00		; 9935	$A9 $00
	STA $05			; 9937	$85 $05
	LDA #$FF		; 9939	$A9 $FF		$75FF
	STA $06			; 993B	$85 $06
	LDA #$75		; 993D	$A9 $75
	STA $07			; 993F	$85 $07
	LDA #$01		; 9941	$A9 $01
	STA $02			; 9943	$85 $02
	LDA #$04		; 9945	$A9 $04
	JSR SR_SortVal		; 9947	$20 $0C $FB	sort value
	LDY #$00		; 994A	$A0 $00
L2D94C:
	LDX $7600,Y		; 994C	$BE $00 $76
	LDA $7B4E,X		; 994F	$BD $4E $7B
	STA $7604,Y		; 9952	$99 $04 $76
	LDA $7B52,X		; 9955	$BD $52 $7B
	STA $7608,Y		; 9958	$99 $08 $76
	LDA $0C,X		; 995B	$B5 $0C
	STA $760C,Y		; 995D	$99 $0C $76
	INY			; 9960	$C8
	CPY #$04		; 9961	$C0 $04
	BNE L2D94C		; 9963	$D0 $E7
	LDX #$00		; 9965	$A2 $00
	LDA $7B48		; 9967	$AD $48 $7B
	AND #$80		; 996A	$29 $80
	BNE L2D986		; 996C	$D0 $18
; "A" battle
L2D96E:
	LDA $7604,X		; 996E	$BD $04 $76	put monsters in order
	STA $7B4E,X		; 9971	$9D $4E $7B
	LDA $7608,X		; 9974	$BD $08 $76
	STA $7B52,X		; 9977	$9D $52 $7B
	LDA $760C,X		; 997A	$BD $0C $76
	STA $0C,X		; 997D	$95 $0C
	INX			; 997F	$E8
	CPX #$04		; 9980	$E0 $04
	BNE L2D96E		; 9982	$D0 $EA
	BEQ L2D9B0		; 9984	$F0 $2A
; "B" battle
L2D986:
	LDA $10,X		; 9986	$B5 $10
	STA $7610,X		; 9988	$9D $10 $76
	INX			; 998B	$E8
	CPX #$04		; 998C	$E0 $04
	BNE L2D986		; 998E	$D0 $F6
	LDX #$00		; 9990	$A2 $00
	LDY #$03		; 9992	$A0 $03
L2D994:
	LDA $7604,Y		; 9994	$B9 $04 $76
	STA $7B4E,X		; 9997	$9D $4E $7B
	LDA $7608,Y		; 999A	$B9 $08 $76
	STA $7B52,X		; 999D	$9D $52 $7B
	LDA $760C,Y		; 99A0	$B9 $0C $76
	STA $0C,X		; 99A3	$95 $0C
	LDA $7610,Y		; 99A5	$B9 $10 $76
	STA $10,X		; 99A8	$95 $10
	DEY			; 99AA	$88
	INX			; 99AB	$E8
	CPX #$04		; 99AC	$E0 $04
	BNE L2D994		; 99AE	$D0 $E4
L2D9B0:
	LDX #$00		; 99B0	$A2 $00
L2D9B2:
	LDA $10,X		; 99B2	$B5 $10
	CMP #$09		; 99B4	$C9 $09
	BCS L2D9BF		; 99B6	$B0 $07		branch if monster is big or boss
	INX			; 99B7	$E8
	CPX #$04		; 99B9	$E0 $04
	BNE L2D9B2		; 99BB	$D0 $F5		loop
	BEQ L2D9E2		; 99BD	$F0 $23
L2D9BF:
	STA $10			; 99BF	$85 $10		CASE: big or boss monster
	LDA $7B4E,X		; 99C1	$BD $4E $7B
	STA $7B4E		; 99C4	$8D $4E $7B
	LDA #$01		; 99C7	$A9 $01
	STA $7B52		; 99C9	$8D $52 $7B
	LDX #$01		; 99CC	$A2 $01
L2D9CE:
	LDA #$00		; 99CE	$A9 $00		clear rest data
	STA $10,X		; 99D0	$95 $10
	STA $7B52,X		; 99D2	$9D $52 $7B	monster counts
	LDA #$FF		; 99D5	$A9 $FF
	STA $7B4E,X		; 99D7	$9D $4E $7B	monster ids ($FF = none)
	INX			; 99DA	$E8
	CPX #$04		; 99DB	$E0 $04
	BNE L2D9CE		; 99DD	$D0 $EF		loop
	JMP L2DA5B		; 99DF	$4C $5B $9A
L2D9E2:
	LDX #$03		; 99E2	$A2 $03
L2D9E4:
	LDY $10,X		; 99E4	$B4 $10
	LDA Mob_width,Y		; 99E6	$B9 $BE $8D	BANK 0B/8DBE (monster widths)
	STA $18,X		; 99E9	$95 $18
	LDA Mob_height,Y	; 99EB	$B9 $CE $8D	BANK 0B/8DCE (monster heights)
	STA $1C,X		; 99EE	$95 $1C
	CPY #$02		; 99F0	$C0 $02
	BCS L2D9F8		; 99F2	$B0 $04
	INC $1C,X		; 99F4	$F6 $1C
	INC $1C,X		; 99F6	$F6 $1C
L2D9F8:
	DEX			; 99F8	$CA
	BPL L2D9E4		; 99F9	$10 $E9		loop for 3,2,1,0
	LDX #$03		; 99FB	$A2 $03
L2D9FD:
	LDA $7B52,X		; 99FD	$BD $52 $7B	monster counts
	STA $14,X		; 9A00	$95 $14
	DEX			; 9A02	$CA
	BPL L2D9FD		; 9A03	$10 $F8
	JSR Chk_mob_grp_remain	; 9A05	$20 $AD $9A
	LDX #$07		; 9A08	$A2 $07
L2DA0A:
	LDA mob_gfx_id,X	; 9A0A	$BD $72 $7B
	CMP #$02		; 9A0D	$C9 $02
	BCS L2DA1D		; 9A0F	$B0 $0C
	INC mob_y_poss,X	; 9A11	$FE $92 $7B
	INC mob_y_poss,X	; 9A14	$FE $92 $7B
	DEC mob_heights,X	; 9A17	$DE $82 $7B
	DEC mob_heights,X	; 9A1A	$DE $82 $7B
L2DA1D:
	CMP #$FF		; 9A1D	$C9 $FF
	BEQ L2DA2A		; 9A1F	$F0 $09
	LDA mob_x_poss,X	; 9A21	$BD $9A $7B
	CLC			; 9A24	$18
	ADC #$02		; 9A25	$69 $02
	STA mob_x_poss,X	; 9A27	$9D $9A $7B
L2DA2A:
	DEX			; 9A2A	$CA
	BPL L2DA0A		; 9A2B	$10 $DD
	JSR Chk_mob_remaining	; 9A2D	$20 $97 $9A
; Name	: Set_mob_front
; Marks	:
Set_mob_front:
	LDA #$00		; 9A30	$A9 $00
	STA $00			; 9A32	$85 $00
	TAX			; 9A34	$AA
L2DA35:
	STA $7B5A,X		; 9A35	$9D $5A $7B	monster rows(0:front, 1:back)
	INX			; 9A38	$E8
	CPX #$08		; 9A39	$E0 $08
	BNE L2DA35		; 9A3B	$D0 $F8
	DEX			; 9A3D	$CA
L2DA3E:
	LDY $7B62,X		; 9A3E	$BC $62 $7B	monster id in each slot
	INY			; 9A41	$C8
	BNE L2DA48		; 9A42	$D0 $04		branch if monster id is FFh
	DEX			; 9A44	$CA
	BPL L2DA3E		; 9A45	$10 $F7		loop
	RTS			; 9A47	$60		no more remaining monster
; End of Set_mob_front
; End of Load_battle_prop
L2DA48:
	TXA			; 9A48	$8A
	LSR A			; 9A49	$4A
	SEC			; 9A4A	$38
	SBC #$02		; 9A4B	$E9 $02
	BCC L2DA5A		; 9A4D	$90 $0B
	ASL A			; 9A4F	$0A
	TAX			; 9A50	$AA
	INX			; 9A51	$E8
	LDA #$01		; 9A52	$A9 $01
L2DA54:
	STA $7B5A,X		; 9A54	$9D $5A $7B	monster rows(0:f, 1:b)
	DEX			; 9A57	$CA
	BPL L2DA54		; 9A58	$10 $FA
L2DA5A:
	RTS			; 9A5A	$60
; End of Load_battle_prop
L2DA5B:
	LDA #$00		; 9A5B	$A9 $00
	STA $7B5A		; 9A5D	$8D $5A $7B	monster rows(f=0,b=1): first value only
	LDA $7B4E		; 9A60	$AD $4E $7B	monster ids ($FF = none): first value only
	STA $7B62		; 9A63	$8D $62 $7B	monster id in each slot: first value only
	LDA $10			; 9A66	$A5 $10
	STA mob_gfx_id		; 9A68	$8D $72 $7B
	CMP #$0F		; 9A6B	$C9 $0F
	BEQ L2DA83		; 9A6D	$F0 $14		branch if finall boss
	LDA #$0C		; 9A6F	$A9 $0C
	STA mob_heights		; 9A71	$8D $82 $7B
	STA mob_widths		; 9A74	$8D $8A $7B
	LDA #$06		; 9A77	$A9 $06
	STA mob_y_poss		; 9A79	$8D $92 $7B
	LDA #$04		; 9A7C	$A9 $04
	STA mob_x_poss		; 9A7E	$8D $9A $7B
	BNE Chk_mob_remaining	; 9A81	$D0 $14
L2DA83:
	LDA #$0C		; 9A83	$A9 $0C
	STA mob_heights		; 9A85	$8D $82 $7B
	LDA #$12		; 9A88	$A9 $12
	STA mob_widths		; 9A8A	$8D $8A $7B
	LDA #$06		; 9A8D	$A9 $06
	STA mob_y_poss		; 9A8F	$8D $92 $7B
	LDA #$02		; 9A92	$A9 $02
	STA mob_x_poss		; 9A94	$8D $9A $7B
; Name	: Chk_mob_remaining
; Marks	:
Chk_mob_remaining:
	LDA #$00		; 9A97	$A9 $00
	STA $7B4D		; 9A99	$8D $4D $7B	clear number of monsters remaining
	LDX #$07		; 9A9C	$A2 $07
L2DA9E:
	LDA $7B62,X		; 9A9E	$BD $62 $7B	monster id in each slot
	STA $7B6A,X		; 9AA1	$9D $6A $7B	item dropped by each monster
	BMI L2DAA9		; 9AA4	$30 $03
	INC $7B4D		; 9AA6	$EE $4D $7B	increment number of monsters remaining
L2DAA9:
	DEX			; 9AA9	$CA
	BPL L2DA9E		; 9AAA	$10 $F2		loop
	RTS			; 9AAC	$60
; End of

; Name	: Chk_mob_grp_remain
; Marks	; $0C,X=??
;	  $14,$15,$16,$17 = monster group count
;	  check something ??
Chk_mob_grp_remain:
	LDA #$00		; 9AAD	$A9 $00
	TAX			; 9AAF	$AA
	TAY			; 9AB0	$A8
	STA $02			; 9AB1	$85 $02
	LDA #$06		; 9AB3	$A9 $06
	STA $03			; 9AB5	$85 $03
L2DAB7:
	LDA $14,X		; 9AB7	$B5 $14
	BNE L2DAC1		; 9AB9	$D0 $06
	INX			; 9ABB	$E8
	CPX #$04		; 9ABC	$E0 $04
	BNE L2DAB7		; 9ABE	$D0 $F7		loop
L2DAC0:
	RTS			; 9AC0	$60
; End of
L2DAC1:
	CPY #$08		; 9AC1	$C0 $08
	BCS L2DAC0		; 9AC3	$B0 $FB
	LDA $02			; 9AC5	$A5 $02
	CLC			; 9AC6	$18
	ADC $18,X		; 9AC8	$75 $18
	CMP #$13		; 9ACA	$C9 $13
	BCS L2DAC0		; 9ACC	$B0 $F2
	LDA $10,X		; 9ACE	$B5 $10
	STA mob_gfx_id,Y	; 9AD0	$99 $72 $7B
	LDA $7B4E,X		; 9AD3	$BD $4E $7B
	STA $7B62,Y		; 9AD6	$99 $62 $7B
	LDA $0C,X		; 9AD9	$B5 $0C
	STA $7B7A,Y		; 9ADB	$99 $7A $7B
	LDA $02			; 9ADE	$A5 $02
	STA mob_x_poss,Y	; 9AE0	$99 $9A $7B
	LDA $03			; 9AE3	$A5 $03
	STA mob_y_poss,Y	; 9AE5	$99 $92 $7B
	LDA $18,X		; 9AE8	$B5 $18
	STA mob_widths,Y	; 9AEA	$99 $8A $7B
	STA $00			; 9AED	$85 $00
	LDA $1C,X		; 9AEF	$B5 $1C
	STA mob_heights,Y	; 9AF1	$99 $82 $7B
	STA $01			; 9AF4	$85 $01
	LDA $03			; 9AF6	$A5 $03
	CLC			; 9AF8	$18
	ADC $01			; 9AF9	$65 $01
	STA $03			; 9AFB	$85 $03
	CMP #$12		; 9AFD	$C9 $12
	BCC L2DB0C		; 9AFF	$90 $0B
	LDA #$06		; 9B01	$A9 $06
	STA $03			; 9B03	$85 $03
	LDA $02			; 9B05	$A5 $02
	CLC			; 9B07	$18
	ADC $00			; 9B08	$65 $00
	STA $02			; 9B0A	$85 $02
L2DB0C:
	INY			; 9B0C	$C8
	LDA $10,X		; 9B0D	$B5 $10
	CMP #$08		; 9B0F	$C9 $08
	BNE L2DB14		; 9B11	$D0 $01
	INY			; 9B13	$C8
L2DB14:
	DEC $14,X		; 9B14	$D6 $14
	BNE L2DAB7		; 9B16	$D0 $9F
L2DB18:
	LDA $14,X		; 9B18	$B5 $14
	BNE L2DB22		; 9B1A	$D0 $06
	INX			; 9B1C	$E8
	CPX #$04		; 9B1D	$E0 $04
	BNE L2DB18		; 9B1F	$D0 $F7		loop
	RTS			; 9B21	$60
; End of
L2DB22:
	LDA $03			; 9B22	A5 03     
	CMP #$06		; 9B24	C9 06     
	BEQ L2DAB7		; 9B26	F0 8F     
	LDA $1C,X		; 9B28	B5 1C     
	CMP #$07		; 9B2A	C9 07     
	BCS L2DB34		; 9B2C	B0 06     
	LDA $00			; 9B2E	A5 00     
	CMP $18,X		; 9B30	D5 18     
	BEQ L2DAB7		; 9B32	F0 83     
L2DB34:
	LDA $02			; 9B34	A5 02     
	CLC			; 9B36	18        
	ADC $00			; 9B37	65 00     
	STA $02			; 9B39	85 02     
	INY			; 9B3B	C8        
	LDA #$06		; 9B3C	A9 06     
	STA $03			; 9B3E	85 03     
	JMP L2DAB7		; 9B40	$4C $B7 $9A	loop
; End of Chk_mob_grp_remain

; Name	: Init_char_gfx
; Marks	:
;	  init character graphics
Init_char_gfx:
	LDX #$00		; 9B43	$A2 $00
Get_char_id_loop:
	TXA			; 9B45	$8A
	JSR Calc_char_addr	; 9B46	$20 $A2 $AD	asl6
	TAY			; 9B49	$A8
	LDA $6100,Y		; 9B4A	$B9 $00 $61	character id
	AND #$0F		; 9B4D	$29 $0F
	STA $7BBA,X		; 9B4F	$9D $BA $7B	character id
	INX			; 9B52	$E8
	CPX #$04		; 9B53	$E0 $04
	BNE Get_char_id_loop	; 9B55	$D0 $EE		loop
	BIT $62F5		; 9B57	$2C $F5 $62
	BPL L2DB5D		; 9B5A	$10 $01
	DEX			; 9B5C	$CA
L2DB5D:
	STX $7BDE		; 9B5D	$8E $DE $7B	number of characters (3 or 4)
	LDY #$03		; 9B60	$A0 $03
L2DB62:
	LDA #$F0		; 9B62	$A9 $F0
	STA char_x_cpos,Y	; 9B64	$99 $CA $7B	set character x positions offscreen
	TYA			; 9B67	$98
	LDX #$1B		; 9B68	$A2 $1B		y = slot * 27 + 44
	JSR Multi		; 9B6A	$20 $79 $FC
	LDA $02			; 9B6D	$A5 $02
	ADC #$2C		; 9B6F	$69 $2C
	STA char_y_pos,Y	; 9B71	$99 $CE $7B
	LDA #$00		; 9B74	$A9 $00
	STA $7BD6,Y		; 9B75	$99 $D6 $7B
	STA $7BDA,Y		; 9B78	$99 $DA $7B
	DEY			; 9B7C	$88
	BPL L2DB62		; 9B7D	$10 $E3
	JSR Init_char_spritep	; 9B7F	$20 $8B $9C	init character sprite pointers
	LDX #$03		; 9B82	$A2 $03
L2DB84:
	STX $27			; 9B84	$86 $27		target id(character index)
	JSR Load_char_gfx	; 9B86	$20 $DE $AB	load character graphics
	LDX $27			; 9B89	$A6 $27		target id(character index)
	DEX			; 9B8B	$CA
	BPL L2DB84		; 8B8C	$10 $F6		loop
	RTS			; 9B8E	$60
; End of Init_char_gfx

; Name	: Init_char_pal_id
; Marks	: $00, $01
;	  init character palette id
Init_char_pal_id:
	LDA Mask_pal		; 9B8F	$AD $5A $92	palette for each character
	STA $00			; 9B92	$85 $00
	LDA Mask_pal+1		; 9B94	$AD $5B $92
	STA $01			; 9B97	$85 $01
	LDX $7BBA,Y		; 9B99	$BE $BA $7B
	JSR Check_bit		; 9B9C	$20 $D1 $9C	check bit ini +$00
	PHP			; 9B9F	$08
	LDX #$00		; 9BA0	$A2 $00		use sprite palette 0 or 1
	PLP			; 9BA2	$28
	BEQ L2DBA6		; 9BA3	$F0 $01
	INX			; 9BA5	$E8
L2DBA6:
	LDA $7BAE,Y		; 9BA6	$B9 $AE $7B	character pose
	CMP #$03		; 9BA9	$C9 $03
	BNE L2DBAF		; 9BAB	$D0 $02		branch if no toad ??
	LDX #$03		; 9BAD	$A2 $03		use sprite palette 3
L2DBAF:
	TXA			; 9BAF	$8A
	STA $7BB6,Y		; 9BB0	$99 $B6 $7B	set character palette id(7BB6-7BB9)
	RTS			; 9BB3	$60
; End of Init_char_pal_id

; Name	: Init_battle_stat
; X	: target id
; Marks	: +$00 = character battle stats
;	  Get status ?? Init status ??
Init_battle_stat:
	STX $06			; 9BB4	$86 $06
	LDA #$30		; 9BB6	$A9 $30
	JSR Multi		; 9BB8	$20 $79 $FC
	LDA $02			; 9BBB	$A5 $02
	ADC #$7A		; 9BBD	$69 $7A
	STA $00			; 9BBF	$85 $00
	LDA $03			; 9BC1	$A5 $03
	ADC #$7D		; 9BC3	$69 $7D
	STA $01			; 9BC5	$85 $01		7D7A (character battle stats)
	LDY #$08		; 9BC7	$A0 $08
	LDA ($00),Y		; 9BC9	$B1 $00		status 1
	AND #$FE		; 9BCB	$29 $FE
	STA $02			; 9BCD	$85 $02
	INY			; 9BCF	$C8
	LDA ($00),Y		; 9BD0	$B1 $00		status 1
	AND #$FE		; 9BD2	$29 $FE
	STA $03			; 9BD4	$85 $03
	LDY #$2C		; 9BD6	$A0 $2C
	LDA ($00),Y		; 9BD8	$B1 $00		previous status 1
	AND #$FE		; 9BDA	$29 $FE
	STA $04			; 9BDC	$85 $04
	INY			; 9BDE	$C8
	LDA ($00),Y		; 9BDF	$B1 $00		previous status 2
	AND #$FE		; 9BE1	$29 $FE
	STA $05			; 9BE3	$85 $05
	LDA $02			; 9BE5	$A5 $02
	EOR $04			; 9BE7	$45 $04
	AND $02			; 9BE9	$25 $02
	AND #$DE		; 9BEB	$29 $DE		ignore toad
	STA $00			; 9BED	$85 $00
	LDA $03			; 9BEF	$A5 $03
	EOR $05			; 9BF1	$45 $05
	AND $03			; 9BF3	$25 $03
	AND #$DE		; 9BF5	$29 $DE		ignore mini
	STA $01			; 9BF7	$85 $01
	LDX $06			; 9BF9	$A6 $06
	CPX #$03		; 9BFB	$E0 $03
	BNE L2DC04		; 9BFD	$D0 $05
	LDA $62F5		; 9BFF	$AD $F5 $62
	BMI L2DC1C		; 9C02	$30 $18
L2DC04:
	LDA $02			; 9C04	$A5 $02
	BPL L2DC0C		; 9C06	$10 $04
	LDA #$00		; 9C08	$A9 $00
	BEQ L2DC1C		; 9C0A	$F0 $10
L2DC0C:
	AND #$20		; 9C0C	$29 $20
	BEQ L2DC14		; 9C0E	$F0 $04
	LDA #$02		; 9C10	$A9 $02
	BNE L2DC1C		; 9C12	$D0 $08
L2DC14:
	LDA $03			; 9C14	$A5 $03
	AND #$20		; 9C16	$29 $20
	BEQ L2DC1C		; 9C18	$F0 $02
	LDA #$01		; 9C1A	$A9 $01
L2DC1C:
	STA $7BA2,X		; 9C1C	$9D $A2 $7B
	LDA $02			; 9C1F	$A5 $02
	AND #$DE		; 9C21	$29 $DE
	STA $02			; 9C23	$85 $02
	LDA $03			; 9C25	$A5 $03
	AND #$DE		; 9C27	$29 $DE
	STA $03			; 9C29	$85 $03
	LDY #$0E		; 9C2B	$A0 $0E
	BIT $02			; 9C2D	$24 $02
	BMI L2DC5C		; 9C2F	$30 $2B
	DEY			; 9C31	$88
	BVS L2DC5C		; 9C32	$70 $28
	LDY #$0E		; 9C34	$A0 $0E
L2DC36:
	LDX Status_pri,Y	; 9C36	$BE $B8 $92
	JSR Check_bit		; 9C39	$20 $D1 $9C	check bit in +$00
	BNE L2DC5C		; 9C3C	$D0 $1E
	DEY			; 9C3E	$88
	BNE L2DC36		; 9C3F	$D0 $F5
	LDA $02			; 9C41	$A5 $02
	AND #$1E		; 9C43	$29 $1E
	STA $00			; 9C45	$85 $00
	LDA $03			; 9C47	$A5 $03
	AND #$DE		; 9C49	$29 $DE
	STA $01			; 9C4B	$85 $01
	LDY #$0E		; 9C4D	$A0 $0E
L2DC4F:
	LDX Status_pri,Y	; 9C4F	$BE $B8 $92
	JSR Check_bit		; 9C52	$20 $D1 $9C	check bit in +$00
	BNE L2DC5C		; 9C55	$D0 $05
	DEY			; 9C57	$88
	BNE L2DC4F		; 9C58	$D0 $F5
	LDY #$00		; 9C5A	$A0 $00
L2DC5C:
	LDX $06			; 9C5C	$A6 $06
	TYA			; 9C5E	$98
	STA $7BAA,X		; 9C5F	$9D $AA $7B
	CPY #$00		; 9C62	$C0 $00
	BNE L2DC75		; 9C64	$D0 $0F
	LDA $7BA2,X		; 9C66	$BD $A2 $7B	character graphics type
	AND #$7F		; 9C69	$29 $7F
	BEQ L2DC75		; 9C6B	$F0 $08
	LDY #$0C		; 9C6D	$A0 $0C
	CMP #$02		; 9C6F	$C9 $02
	BEQ L2DC75		; 9C71	$F0 $02
	LDY #$0B		; 9C73	$A0 $0B
L2DC75:
	LDA Text_id,Y		; 9C75	$B9 $C7 $92
	STA $7BA6,X		; 9C78	$9D $A6 $7B	status text id
	LDY $7BAA,X		; 9C7B	$BC $AA $7B
	LDA Status_pose,Y	; 9C7E	$B9 $D6 $92
	STA $7BAE,X		; 9C81	$9D $AE $7B	character pose
	LDA Status_gfx,Y	; 9C84	$B9 $E5 $92
	STA $7BB2,X		; 9C87	$9D $B2 $7B	status graphics
	RTS			; 9C8A	$60
; End of Init_battle_stat


; 0B/92B8: 00 09 01 0A 02 03 0C 04 0F 0B 0E 0D 05 06 07  ; status priority
; 0B/92C7: F6 F6 F7 F0 F8 F9 F2 FA F5 F1 F4 F3 FB FC FD  ; text id
; 0B/92D6: 00 02 02 02 02 02 02 02 00 02 02 00 00 03 04  ; status pose
; 0B/92E5: FF FF 00 01 01 02 05 03 06 04 FF FF FF FF FF  ; status graphics


; Name	: Init_char_spritep
; Marks	: Check and set back/front row
;	  Set pointers to character sprite data
;	  init character sprite pointers
;	  +$2C = 02A0
;	  +$2E = 02B8
;	  +$30 = 02D0
;	  +$32 = 02E8
Init_char_spritep:
	LDX #$03		; 9C8B	$A2 $03
L2DC8D:
	TXA			; 9C8D	$8A
	JSR Calc_char_addr	; 9C8E	$20 $A2 $AD	as16
	TAY			; 9C91	$A8
	LDA $6235,Y		; 9C92	$B9 $35 $62	back row/frond row ?
	AND #$01		; 9C95	$29 $01
	STA $7BBE,X		; 9C97	$9D $BE $7B	character row (0=front,1=back)
	DEX			; 9C9A	$CA
	BPL L2DC8D		; 9C9B	$10 $F0		loop
	LDA #$02		; 9C9D	$A9 $02
	STA $2D			; 9C9F	$85 $2D		pointers to character sprite data ($2C-$33)
	STA $2F			; 9CA1	$85 $2F
	STA $31			; 9CA3	$85 $31
	STA $33			; 9CA5	$85 $33
	LDA #$A0		; 9CA7	$A9 $A0		02A0
	STA $2C			; 9CA9	$85 $2C
	LDA #$B8		; 9CAB	$A9 $B8		02B8
	STA $2E			; 9CAD	$85 $2E
	LDA #$D0		; 9CAF	$A9 $D0		02D0
	STA $30			; 9CB1	$85 $30
	LDA #$E8		; 9CB3	$A9 $E8		02E8
	STA $32			; 9CB5	$85 $32
	RTS			; 9CB7	$60
; End of Init_char_spritep

; Name	: Set_mob_arr
; A	: monster y position
; X	: monster x position
; Ret	: $00, $01
; Marks	: $00 = Y -> 6543 20yx
;	  $01 = ? -> 0000 00yx
Set_mob_arr:
	LSR A			; 9CB8	$4A
	LSR A			; 9CB9	$4A
	PHA			; 9CBA	$48
	LDA #$00		; 9CBB	$A9 $00
	ROL A			; 9CBD	$2A
	STA $01			; 9CBE	$85 $01
	TXA			; 9CC0	$8A
	LSR A			; 9CC1	$4A
	LSR A			; 9CC2	$4A
	ROL $01			; 9CC3	$26 $01
	STA $00			; 9CC5	$85 $00
	PLA			; 9CC7	$68
	ASL A			; 9CC8	$0A
	ASL A			; 9CC9	$0A
	ASL A			; 9CCA	$0A
	CLC			; 9CCB	$18
	ADC $00			; 9CCC	$65 $00
	STA $00			; 9CCE	$85 $00
	RTS			; 9CD0	$60
; End of Set_mob_arr

; Name	: Check_bit
; X	: bit = 0-15
; Marks	: check bit in +$00
Check_bit:
	LDA Bit_mask,X		; 9CD1	$BD $DE $9C
	CPX #$08		; 9CD4	$E0 $08
	BCC Check_bit_low	; 9CD6	$90 $03
	BIT $01			; 9CD8	$24 $01
	RTS			; 9CDA	$60
; End of Check_bit
Check_bit_low:
	BIT $00			; 9CDB	$24 $00
	RTS			; 9CDD	$60
; End of Check_bit

; $9CDE-$9CED(16 bytes) - data block = bit masks
Bit_mask:
.byte $01,$02,$04,$08,$10,$20,$40,$80,$01,$02,$04,$08,$10,$20,$40,$80

; Name	: Copy_cursor_gfx
; Marks	: use BANK 09
;	  copy cursor graphics to ppu
Copy_cursor_gfx:
	JSR Reset_cursor_sprites	; 9CEE	$20 $06 $9D	reset cursor sprites
	LDA #$80		; 9CF1	$A9 $80
	STA $00			; 9CF3	$85 $00
	LDA #$04		; 9CF5	$A9 $04		ppu $0400
	STA $01			; 9CF7	$85 $01
	LDA #$C0		; 9CF9	$A9 $C0
	STA $02			; 9CFB	$85 $02
	LDA #$89		; 9CFD	$A9 $89
	STA $03			; 9CFF	$85 $03		BANK 09/89C0
	LDX #$40		; 9D01	$A2 $40		size $40 bytes
	JMP $FBAE		; 9D03	$4C $AE $FB	load some buffer
; End of Copy_cursor_gfx

; Name	: Reset_cursor_sprites
; Marks	: reset cursor sprites OAM buffer
;	  $24(ADDR), $26(ADDR), $28(ADDR), $2A(ADDR) = OAM buffer address
Reset_cursor_sprites:
	LDA #$02		; 9D06	$A9 $02
	STA $25			; 9D08	$85 $25
	STA $27			; 9D0A	$85 $27
	STA $29			; 9D0C	$85 $29
	STA $2B			; 9D0E	$85 $2B
	LDA #$40		; 9D10	$A9 $40		use sprites OAM[16-31] (4 * 4 sprites)
	STA $24			; 9D12	$85 $24
	LDA #$50		; 9D14	$A9 $50
	STA $26			; 9D16	$85 $26
	LDA #$60		; 9D18	$A9 $60
	STA $28			; 9D1A	$85 $28
	LDA #$70		; 9D1C	$A9 $70
	STA $2A			; 9D1E	$85 $2A
	LDY #$3F		; 9D20	$A0 $3F
	LDA #$F0		; 9D22	$A9 $F0		hide all cursors
L2DD24:
	STA ($24),Y		; 9D24	$91 $24		$0240-$027F <- 0Fh
	DEY			; 9D26	$88
	BPL L2DD24		; 9D27	$10 $FB
	LDA #$03		; 9D29	$A9 $03		use palette 3
	STA $0242		; 9D2B	$8D $42 $02	OAM[16-19] ATTR
	STA $0246		; 9D2E	$8D $46 $02
	STA $024A		; 9D31	$8D $4A $02
	STA $024E		; 9D34	$8D $4E $02
	LDX #$48		; 9D37	$A2 $48
	STX $0241		; 9D39	$8E $41 $02	OAM[16-19] INDEX
	INX			; 9D3C	$E8
	STX $0245		; 9D3D	$8E $45 $02
	INX			; 9D40	$E8
	STX $0249		; 9D41	$8E $49 $02
	INX			; 9D44	$E8
	STX $024D		; 9D45	$8E $4D $02
	LDY #$00		; 9D48	$A0 $00
L2DD4A:
	LDA ($24),Y		; 9D4A	$B1 $24		copy cursors 1 to cursors 2-4
	STA ($26),Y		; 9D4C	$91 $26
	STA ($28),Y		; 9D4E	$91 $28
	STA ($2A),Y		; 9D50	$91 $2A
	INY			; 9D52	$C8
	CPY #$10		; 9D53	$C0 $10
	BNE L2DD4A		; 9D55	$D0 $F3		loop
	RTS			; 9D57	$60
; End of Reset_cursor_sprites

; Name	: Fill_ppu_inc_00
; X	: size
; Y	: first value
; Marks	: fill ppu sequential (set address)
;	  +$00: ppu address
Fill_ppu_inc_00:
	JSR Set_PpuAddr_00	; 9D58	$20 $7E $FD
; Name	: Fill_ppu_inc
; Marks	: fill ppu sequential
Fill_ppu_inc:
	STY PpuData_2007	; 9D5B	$8C $07 $20
	INY			; 9D5E	$C8
	DEX			; 9D5F	$CA
	BNE Fill_ppu_inc	; 9D60	$D0 $F9		loop
	RTS			; 9D62	$60
; End of Fill_ppu_inc
; End of Fill_ppu_inc_00

; Name	: Set_ppu_data_00
; A	: fill value
; X	: size
; Marks	: fill ppu (set address)
;	  +$00: ppu address
;	  Set ppu data as specific address(+$00)
Set_ppu_data_00:
	PHA			; 9D63	$48
	JSR Set_PpuAddr_00	; 9D64	$20 $7E $FD
	PLA			; 9D67	$68
; Name	: Set_ppu_buf_d
; A	: fill value
; X	: size
; Marks	: fill ppu
;	  Set ppu data
Set_ppu_data:
	STA PpuData_2007	; 9D68	$8D $07 $20
	DEX			; 9D6B	$CA
	BNE Set_ppu_data	; 9D6C	$D0 $FA		loop
	RTS			; 9D6E	$60
; End of Set_ppu_data
; End of Set_ppu_data_00

;9D6F
; Marks	:
	LDA #$0F		; 9D6F	A9 0F     
; Name	: Set_pal_x0
; A	: color value
; Marks	: set palette
Set_pal_x0:
	LDX #$1C		; 9D71	$A2 $1C		start from sprite_3.0
L2DD73:
	STA $79A8,X		; 9D73	$9D $A8 $79	color palette
	JSR X_dec4		; 9D76	$20 $03 $9E
	BPL L2DD73		; 9D79	$10 $F8
	RTS			; 9D7B	$60
; End of Set_pal_x0

; Name	: Apply_palettes
; Marks	: Copy color palettes to ppu
Apply_palettes:
	LDA PpuStatus_2002	; 9D7C	$AD $02 $20	latch ppu
	JSR Set_PpuAddr_3F00	; 9D7F	$20 $97 $9D	set ppu address for color palette
L2DD82:
	LDA $79A8,X		; 9D82	$BD $A8 $79	copy color palettes to ppu
	STA PpuData_2007	; 9D85	$8D $07 $20
	INX			; 9D88	$E8
	CPX #$20		; 9D89	$E0 $20
	BNE L2DD82		; 9D8B	$D0 $F5		loop
	JSR Set_PpuAddr_3F00	; 9D8D	$20 $97 $9D	set ppu address for color palette
	STX PpuAddr_2006	; 9D90	$8E $06 $20	set ppu address to zero
	STX PpuAddr_2006	; 9D93	$8E $06 $20
	RTS			; 9D96	$60
; End of Apply_palettes

; Name	: Set_PpuAddr_3F00
; Ret	: X = 00h
; Marks	: palette RAM indexes($3F00-$3F1F)
Set_PpuAddr_3F00:
	LDA #$3F		; 9D97	$A9 $3F
	STA PpuAddr_2006	; 9D99	$8D $06 $20
	LDX #$00		; 9D9C	$A2 $00
	STX PpuAddr_2006	; 9D9E	$8E $06 $20
	RTS			; 9DA1	$60
; End of Set_PpuAddr_3F00

; Name	: Copy_tile_ppu
; SRC	: $02(ADDR) - tile address
; DEST	: $00(ADDR) - PPU address
; Marks	: Tile copy to PPU $00(ADDR) size is #$7F
Copy_tile_ppu:
	LDY #$00		; 9DA2	$A0 $00
	JSR Wait_NMI_set	; 9DA4	$20 $2A $FA	Wait NMI
	LDA $01			; 9DA7	$A5 $01
	STA PpuAddr_2006	; 9DA9	$8D $06 $20
	LDA $00			; 9DAC	$A5 $00
	STA PpuAddr_2006	; 9DAE	$8D $06 $20
L2DDB1:
	LDA ($02),Y		; 9DB1	$B1 $02
	STA PpuData_2007	; 9DB3	$8D $07 $20
	INY			; 9DB6	$C8
	BPL L2DDB1		; 9DB7	$10 $F8		loop
	RTS			; 9DB9	$60
; End of Copy_tile_ppu

; Name	: Apply_OAM_tile
; X	: Size to copy
; SRC	: $02(ADDR) = $7600
; DEST	: $00(ADDR) = ppu address
; Marks	: Copy buffer to ppu
Apply_OAM_tile:
	JSR Set_02_gfxbuf	; 9DBA	$20 $C6 $9D
; Name	: Apply_OAM_buf
; Marks	: not set graphics buffer, just copy
Apply_OAM_buf:
	JSR Wait_NMI_set	; 9DBD	$20 $2A $FA	Wait NMI
	JSR Copy_OAM_dma_	; 9DC0	$20 $60 $9E
	JMP CpPRGtoPPU_Xlen	; 9DC3	$4C $6F $FD
; End of Apply_OAM_buf
; End of Apply_OAM_tile

; Name	: Set_02_gfxbuf
; Marks	: Set $02(ADDR) to $7600
;	  Init ppu data buffer address to $7600
Set_02_gfxbuf:
	LDA #$00		; 9DC6	$A9 $00
	STA $02			; 9DC8	$85 $02
	LDA #$76		; 9DCA	$A9 $76
	STA $03			; 9DCC	$85 $03
	RTS			; 9DCE	$60
; End of Set_02_gfxbuf

; Name	: Init_gfx_buf
; Marks	: Init graphic buffer ??
;	  Clear ppu data buffer
Init_gfx_buf:
	LDY #$00		; 9DCF	$A0 $00
	LDA #$00		; 9DD1	$A9 $00
L2DDD3:
	STA $7600,Y		; 9DD3	$99 $00 $76
	INY			; 9DD6	$C8
	BNE L2DDD3		; 9DD7	$D0 $FA		loop
	RTS			; 9DD9	$60
; End of Init_gfx_buf

; Name	; Rst_char_OAM_buf
; X	: Character index
; Marks	: Reset OAM buffer. 2x3 6 tile each
;	  Character 0 OAM buffer = $02A0(OAM[40])
; 	  Character 1 OAM buffer = $02B8(OAM[46])
; 	  Character 2 OAM buffer = $02D0(OAM[52])
; 	  Character 3 OAM buffer = $02E8(OAM[58])
;	  Y (A0h, B8h, D0h, E8h) - character OAM buffer offset
;	  hide character sprite
Rst_char_OAM_buf:
	LDY OAM_char_start,X	; 9DDA	$BC $F5 $9D
	LDX #$18		; 9DDD	$A2 $18
	BNE L2DDEB		; 9DDF	$D0 $0A
; Name	: Rst_act_OAM_buf
; Marks	: Reset Action OAM buffer. From $0270-$029F(OAM[28]-OAM[39])
;	  Character OAM[28]-[33], Weapon OAM[34]-[39]
;	  X = size
;	  Y = start offset
;	  hide ??? sprites
Rst_act_OAM_buf:
	LDY #$70		; 9DE1	$A0 $70
	LDX #$30		; 9DE3	$A2 $30
	BNE L2DDEB		; 9DE5	$D0 $04
; Name	: Rst_all_act_OAM_buf
; Marks	: Reset ?? OAM buffer. From $0204-$029F(OAM[1]-OAM[39])
;	  hide ??? sprites
Rst_all_act_OAM_buf:
	LDX #$9C		; 9DE7	$A2 $9C
; Name	: Rst_OAM_buf
; X	: size
; Marks	: Reset all OAM buffer
Rst_OAM_buf:
	LDY #$04		; 9DE9	$A0 $04
L2DDEB:
	LDA #$F0		; 9DEB	$A9 $F0
L2DDED:
	STA $0200,Y		; 9DED	$99 $00 $02
	INY			; 9DF0	$C8
	DEX			; 9DF1	$CA
	BNE L2DDED		; 9DF2	$D0 $F9		loop
	RTS			; 9DF4	$60
; End of Rst_OAM_buf
; End of Rst_all_act_OAM_buf
; End of Rst_act_OAM_buf
; End of Rst_char_OAM_buf

;9DF5 - data block : character OAM buffer
OAM_char_start:
.byte $A0,$B8,$D0,$E8

; Name	: Set_OAM_val
; A	: value
; Y	: offset (increment after)
; Marks	: Set value to OAM buffer
Set_OAM_val:
	STA $0200,Y		; 9DF9	$99 $00 $02
; Name	: Y_inc4
; Marks	: increase Y
Y_inc4:
	INY			; 9DFC	$C8
	INY			; 9DFD	$C8
	INY			; 9DFE	$C8
	INY			; 9DFF	$C8
	RTS			; 9E00	$60
; End of Y_inc4
; End of Set_OAM_val

target_id_tmp = $27

; Name	: Target_to_mob_id
; Ret	: X = monster target id
; Marks	: Get target monster id ??
Target_to_mob_id:
	LDX target_id_tmp	; 9E01	$A6 $27		target id ??
; Name	: X_dec4
; Marks	: decrease X
X_dec4:
	DEX			; 9E03	$CA
	DEX			; 9E04	$CA
	DEX			; 9E05	$CA
	DEX			; 9E06	$CA
	RTS			; 9E07	$60
; End of X_dec4
; End of Target_to_mob_id

; Name	: Set_OAM_buf
; Y	: OAM buffer offset
; Makrs	: Copy sprite to OAM data
;	  $00 = X
;	  $01 = Y
;	  $02 = INDEX
;	  $03 = ATTR
Set_OAM_buf:
	LDA $01			; 9E08	A5 01
	STA $0200,Y		; 9E0A	99 00 02
	LDA $02			; 9E0D	A5 02
	STA $0201,Y		; 9E0F	99 01 02
	LDA $03			; 9E12	A5 03
	STA $0202,Y		; 9E14	99 02 02
	LDA $00			; 9E17	A5 00
	STA $0203,Y		; 9E19	99 03 02
	JMP Y_inc4		; 9E1C	4C FC 9D	next sprite (Y+4)
; End of Set_OAM_buf

; Name	: Gfx_delay
; A	: delay count
; Marks	: motion delay. wait
L2DE1F:
Gfx_delay:
	PHA			; 9E1F	$48
	JSR Apply_OAM_pal	; 9E20	$20 $33 $9E
	PLA			; 9E23	$68
	SEC			; 9E24	$38
	SBC #$01		; 9E25	$E9 $01
	BNE L2DE1F		; 9E27	$D0 $F6
	RTS			; 9E29	$60
; End of

; Name	: Apply_OAM
; Marks	: Have to be called in scanline 241 - 151(before MENU/sprite 0 hit)
;	  Use 1 frame
;	  NMIe -> NMIe
Apply_OAM:
	JSR Wait_MENUs_NMI	; 9E2A	$20 $3F $9E
	JSR Copy_OAM_dma_	; 9E2D	$20 $60 $9E
	JMP Wait_NMI_end	; 9E30	$4C $46 $FD
; End of Apply_OAM

; Name	: Apply_OAM_pal
; Marks	: Wait MENU with sound -> Wait NMI -> Copy OAM -> Copy palette -> NMI end
Apply_OAM_pal:
	JSR Wait_MENUs_NMI	; 9E33	$20 $3F $9E
	JSR Copy_OAM_dma_	; 9E36	$20 $60 $9E
	JSR Apply_palettes	; 9E39	$20 $7C $9D
	JMP Wait_NMI_end	; 9E3C	$4C $46 $FD
; End of Apply_OAM_pal

; Name	: Wait_MENUs_NMI
; Marks	: Wait MENU with sound -> Wait NMI
Wait_MENUs_NMI:
	JSR Wait_MENU_snd	; 9E3F	$20 $5B $FD
	JMP Wait_NMI_set	; 9E42	$4C $2A $FA	Wait NMI
; End of Wait_MENUs_NMI



;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
;9E45 - unused
	JSR Wait_NMI_set	; 9E45	$20 $2A $FA	Wait NMI
	JSR $9E36		; 9E48	$20 $36 $9E
	JMP $FA48		; 9E4B	$4C $48 $FA	update sound
;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx



; Name	: Copy_OAM
; Marks	:
Copy_OAM:
	JSR Wait_NMI_set	; 9E4E	$20 $2A $FA	Wait NMI
	JMP Copy_OAM_dma_	; 9E51	$4C $60 $9E
; End of Copy_OAM

; Name	: Snd_wait_NMI_OAM_PAL
; Marks	: wait for vblank (OAM & color update)
;	  processing on NMI
Snd_wait_NMI_OAM_PAL:
	JSR $FA48		; 9E54	$20 $48 $FA	update sound
	JSR Copy_OAM		; 9E57	$20 $4E $9E
	JSR Apply_palettes	; 9E5A	$20 $7C $9D
	JMP Ctrl_Scroll		; 9E5D	$4C $4B $FD
; End of Snd_wait_NMI_OAM_PAL

; Name	: Copy_OAM_dma_
; Marks	: Copy OAM by DMA from 0x0200 to PPU OAM
Copy_OAM_dma_:
	LDA #$00		; 9E60	$A9 $00
	STA $2003		; 9E62	$8D $03 $20	OamAddr_2003
	LDA #$02		; 9E65	$A9 $02
	STA SpriteDma_4014	; 9E67	$8D $14 $40
	RTS			; 9E6A	$60
; End of Copy_OAM_dma_

; Name	: Play_mag_snd_eft
; Marks	: Play magic sound effect
Play_mag_snd_eft:
	LDA atk_ani_id		; 9E6B	$AD $B0 $7C
	CLC			; 9E6E	$18
	ADC #$10		; 9E6F	$69 $10
	TAX			; 9E70	$AA
; Name	: Play_snd_eft:
; X	: Sound effect index
; Marks	: Play battle sound effect
Play_snd_eft:
	LDA Battle_snd_eft_tbl,X; 9E72	$BD $0B $93	battle sound effect ??
	TAX			; 9E75	$AA
	JMP $FA59		; 9E76	$4C $59 $FA	play sound effect
; End of Play_snd_eft
; End of Play_mag_snd_eft

; Name	: Fade_out
; Marks	: Fade out palettes
;	  $00 = offset of last color
;	  $01 = repeat count
Fade_out:
	LDA #$1F		; 9E79	$A9 $1F
	STA $00			; 9E7B	$85 $00
Fade_out_:
; SRC	: $00
	LDA #$04		; 9E7D	A9 04		repeat count
	STA $01			; 9E7F	85 01
; start of loop
Fade_out_loop:
	LDX $00			; 9E81	A6 00
L2DE83:
	LDA $79A8,X		; 9E83	BD A8 79	color palettes ($79A8-$79C7)
	CMP #$10		; 9E86	C9 10
	BCS Fade_out_darkning	; 9E88	B0 02
	LDA #$1F		; 9E8A	A9 1F		black
Fade_out_darkning:
	SEC			; 9E8C	38
	SBC #$10		; 9E8D	E9 10		decrement color brightness
	STA $79A8,X		; 9E8F	9D A8 79
	DEX			; 9E92	CA
	BPL L2DE83		; 9E93	10 EE		loop
	LDA #$06		; 9E95	A9 06
	JSR Gfx_delay		; 9E97	20 1F 9E	wait 6 frames
	DEC $01			; 9E9A	C6 01
	BNE Fade_out_loop	; 9E9C	D0 E3		loop
	RTS			; 9E9E	60
; End of Fade_out

; Name	: Init_tile_bg
; Marks	: init tilemap for battle bg
Init_tile_bg:
	LDA #$20		; 9E9F	$A9 $20
	STA $01			; 9EA1	$85 $01
	LDA #$20		; 9EA3	$A9 $20
	STA $00			; 9EA5	$85 $00		$2020
	JSR Set_PpuAddr_00	; 9EA7	$20 $7E $FD
	LDA #$10		; 9EAA	$A9 $10
	STA $02			; 9EAC	$85 $02
	LDA #$04		; 9EAE	$A9 $04
	STA $05			; 9EB0	$85 $05
	LDA $7B49		; 9EB2	$AD $49 $7B	battle bg
	CMP #$07		; 9EB5	$C9 $07
	BEQ L2DEE4		; 9EB7	$F0 $2B
L2DEB9:
	LDA #$04		; 9EB9	$A9 $04
	STA $04			; 9EBB	$85 $04
L2DEBD:
	LDY $02			; 9EBD	$A4 $02
	LDX #$04		; 9EBF	$A2 $04
	JSR Fill_ppu_inc	; 9EC1	$20 $5B $9D
	LDY $02			; 9EC4	$A4 $02
	INY			; 9EC6	$C8
	INY			; 9EC7	$C8
	LDX #$02		; 9EC8	$A2 $02
	JSR Fill_ppu_inc	; 9ECA	$20 $5B $9D
	LDY $02			; 9ECD	$A4 $02
	LDX #$02		; 9ECF	$A2 $02
	JSR Fill_ppu_inc	; 9ED1	$20 $5B $9D
	DEC $04			; 9ED4	$C6 $04
	BNE L2DEBD		; 9ED6	$D0 $E5
	LDA $02			; 9ED8	$A5 $02
	CLC			; 9EDA	$18
	ADC #$04		; 9EDB	$69 $04
	STA $02			; 9EDD	$85 $02
	DEC $05			; 9EDF	$C6 $05
	BNE L2DEB9		; 9EE1	$D0 $D6
	RTS			; 9EE3	$60
; End of Init_tile_bg
L2DEE4:
	LDA #$08		; 9EE4	A9 08
	STA $04			; 9EE6	85 04
L2DEE8:
	LDY $02			; 9EE8	A4 02
	LDX #$04		; 9EEA	A2 04
	JSR Fill_ppu_inc	; 9EEC	20 5B 9D	fill ppu sequential
	DEC $04			; 9EEF	C6 04
	BNE L2DEE8		; 9EF1	D0 F5
	STY $02			; 9EF3	84 02
	DEC $05			; 9EF5	C6 05
	BNE L2DEE4		; 9EF7	D0 EB		loop
	RTS			; 9EF9	60
; End of Init_tile_bg

; Name	: Init_tilemap_mobs
; Marks	:
Init_tilemap_mobs:
	LDA mob_gfx_id		; 9EFA	$AD $72 $7B
	CMP #$09		; 9EFD	$C9 $09
	BCS Init_boss_tilemap	; 9EFF	$B0 $56		branch if big monster
	LDY #$07		; 9F01	$A0 $07
	STY $04			; 9F03	$84 $04
L2DF05:
	LDY $04			; 9F05	$A4 $04
	LDA $7B62,Y		; 9F07	$B9 $62 $7B	monster id in each slot
	BMI L2DF0F		; 9F0A	$30 $03
	JSR Init_mob_tilemap	; 9F0C	$20 $14 $9F
L2DF0F:
	DEC $04			; 9F0F	$C6 $04
	BPL L2DF05		; 9F11	$10 $F2
	RTS			; 9F13	$60
; End of Init_tilemap_mobs

; Name	: Init_mob_tilemap
; Y	: monster graphics id
; Marks	: $00,$01,$02,$03
Init_mob_tilemap:
	LDX mob_gfx_id,Y	; 9F14	$BE $72 $7B
	LDA Mob_tile_1st_tile,X	; 9F17	$BD $A5 $9F
	STA $05			; 9F1A	$85 $05
	LDA mob_y_poss,Y	; 9F1C	$B9 $92 $7B
	LDX #$20		; 9F1F	$A2 $20
	JSR Multi		; 9F21	$20 $79 $FC
	LDA $02			; 9F24	$A5 $02
	ADC mob_x_poss,Y	; 9F26	$79 $9A $7B
	STA $00			; 9F29	$85 $00
	LDA $03			; 9F2B	$A5 $03
	ADC #$20		; 9F2D	$69 $20
	STA $01			; 9F2F	$85 $01
	LDA mob_widths,Y	; 9F31	$B9 $8A $7B
	STA $02			; 9F34	$85 $02
	LDA mob_heights,Y	; 9F36	$B9 $82 $7B
	STA $03			; 9F39	$85 $03
	JSR Wait_NMI_set	; 9F3B	$20 $2A $FA	Wait NMI
L2DF3E:
	LDY $05			; 9F3E	$A4 $05		start value
	LDX $02			; 9F40	$A6 $02		size - monster width
	JSR Fill_ppu_inc_00	; 9F42	$20 $58 $9D
	STY $05			; 9F45	$84 $05
	LDA $00			; 9F47	$A5 $00
	CLC			; 9F49	$18
	ADC #$20		; 9F4A	$69 $20		add address 20h
	STA $00			; 9F4C	$85 $00
	BCC L2DF52		; 9F4E	$90 $02
	INC $01			; 9F50	$E6 $01
L2DF52:
	DEC $03			; 9F52	$C6 $03
	BNE L2DF3E		; 9F54	$D0 $E8		loop
	RTS			; 9F56	$60
; End of Init_mob_tilemap

;; [$9F57 :: 0x2DF57]
; Marks	: init boss tilemap
;	  BANK 0B/8DDE (boss tile map)
Init_boss_tilemap:
	LDA mob_gfx_id		; 9F57	AD 72 7B
	PHA			; 9F5A	48
	SEC			; 9F5B	38
	SBC #$09		; 9F5C	E9 09
	LDX #$90		; 9F5E	A2 90
	JSR Multi		; 9F60	20 79 FC	multiply
	LDA $02			; 9F63	A5 02     
	ADC #<Boss_tile		; 9F65	69 DE		BANK 0B/8DDE (boss tile map)
	STA $02			; 9F67	85 02
	LDA $03			; 9F69	A5 03
	ADC #>Boss_tile		; 9F6B	69 8D
	STA $03			; 9F6D	85 03
	LDA mob_heights		; 9F6F	AD 82 7B
	STA $04			; 9F72	85 04
	LDA #$C4		; 9F74	A9 C4
	STA $00			; 9F76	85 00
	LDA #$20		; 9F78	A9 20
	STA $01			; 9F7A	85 01
	PLA			; 9F7C	68
	CMP #$0F		; 9F7D	C9 0F
	BNE L2DF85		; 9F7F	D0 04
	DEC $00			; 9F81	C6 00
	DEC $00			; 9F83	C6 00
L2DF85:
	LDX mob_widths		; 9F85	AE 8A 7B
	JSR CpPRGtoPPU_Xlen	; 9F88	20 6F FD	copy data to ppu
	TYA			; 9F8B	98
	CLC			; 9F8C	18
	ADC $02			; 9F8D	65 02
	STA $02			; 9F8F	85 02
	BCC L2DF95		; 9F91	90 02
	INC $03			; 9F93	E6 03
L2DF95:
	LDA $00			; 9F95	A5 00
	CLC			; 9F97	18
	ADC #$20		; 9F98	69 20
	STA $00			; 9F9A	85 00
	BCC L2DFA0		; 9F9C	90 02
	INC $01			; 9F9E	E6 01
L2DFA0:
	DEC $04			; 9FA0	C6 04
	BNE L2DF85		; 9FA2	D0 E1
	RTS			; 9FA4	60
; End of Init_mob_tilemap

; 9FA5 - data block = first tile index for each monster (0-8)
Mob_tile_1st_tile:
.byte $20,$30,$40,$58,$70,$94,$B8,$DC,$B8

; Name	: Fadein_battle_bg
; Marks	: Fade in battle bg
;	  BANK 07/B800 or 08/B800 (battle bg graphics)
Fadein_battle_bg:
	LDA $7B49		; 9FAE	$AD $49 $7B	battle bg
	AND #$07		; 9FB1	$29 $07
	CLC			; 9FB3	$18
	ADC #$B8		; 9FB4	$69 $B8
	STA $01			; 9FB6	$85 $01
	LDA #$00		; 9FB8	$A9 $00
	STA $00			; 9FBA	$85 $00		BANK 07/B800 or 08/B800
	JSR $FB53		; 9FBC	$20 $53 $FB	copy battle bg grahipcs to buffer
	; Init to #$00(zero) $7700-$77FF
	LDA #$00		; 9FBF	$A9 $00
	TAX			; 9FC1	$AA
L2DFC2:
	STA $7700,X		; 9FC2	$9D $00 $77	clear 2nd half of buffer
	INX			; 9FC5	$E8
	BNE L2DFC2		; 9FC6	$D0 $FA		loop
	; Set RAM $07=$08,$09=$00,$05,$06=$01,$08=$10
	LDA #$08		; 9FC8	$A9 $08
	STA $07			; 9FCA	$85 $07
	LDA #$00		; 9FCC	$A9 $00
	STA $09			; 9FCE	$85 $09
	LDA #$01		; 9FD0	$A9 $01
	STA $05			; 9FD2	$85 $05
	STA $06			; 9FD4	$85 $06
Fadein_battle_bg_loop:
	LDA #$10		; 9FD6	$A9 $10
	STA $08			; 9FD8	$85 $08
	; $06->$05
	LDA $06			; 9FDA	$A5 $06
	STA $05			; 9FDC	$85 $05
	; $7700,X = ($7600,X & $05) | $7700,X
	LDX $09			; 9FDE	$A6 $09
L2DFE0:
	LDY #$08		; 9FE0	$A0 $08
L2DFE2:
	LDA $7600,X		; 9FE2	$BD $00 $76
L2DFE5:
	AND $05			; 9FE5	$25 $05
	ORA $7700,X		; 9FE7	$1D $00 $77
	STA $7700,X		; 9FEA	$9D $00 $77
	ASL $05			; 9FED	$06 $05
	BCC L2DFF5		; 9FEF	$90 $04
	LDA #$01		; 9FF1	$A9 $01
	STA $05			; 9FF3	$85 $05
L2DFF5:
	INX			; 9FF5	$E8
	DEY			; 9FF6	$88
	BNE L2DFE2		; 9FF7	$D0 $E9
	TXA			; 9FF9	$8A
	CLC			; 9FFA	$18
	ADC #$08		; 9FFB	$69 $08
	TAX			; 9FFD	$AA
	DEC $08			; 9FFE	$C6 $08
	BNE L2DFE0		; A000	$D0 $DE
	ASL $06			; A002	$06 $06
	BCC L2E00A		; A004	$90 $04
	LDA #$01		; A006	$A9 $01
	STA $06			; A008	$85 $06
L2E00A:
	LDA #$00		; A00A	$A9 $00
	STA $00			; A00C	$85 $00
	LDA #$11		; A00E	$A9 $11
	STA $01			; A010	$85 $01
	LDA #$00		; A012	$A9 $00
	STA $02			; A014	$85 $02
	LDA #$77		; A016	$A9 $77
	STA $03			; A018	$85 $03
L2E01A:
	; Copy tile to PPU as fade in effect(Diagonal)
	JSR Copy_tile_ppu	; A01A	$20 $A2 $9D	copy 8 tile to PPU
	TYA			; A01D	$98
	CLC			; A01E	$18
	ADC $00			; A01F	$65 $00
	STA $00			; A021	$85 $00
	TYA			; A023	$98
	CLC			; A024	$18
	ADC $02			; A025	$65 $02
	STA $02			; A027	$85 $02
	BCC L2E02D		; A029	$90 $02
	INC $03			; A02B	$E6 $03
L2E02D:
	JSR Wait_NMI_end	; A02D	$20 $46 $FD
	JSR $FA48		; A030	$20 $48 $FA	update sound
	LDA $00			; A033	$A5 $00
	BNE L2E01A		; A035	$D0 $E3
	DEC $07			; A037	$C6 $07		repeat count
	BEQ L2E03E		; A039	$F0 $03
	JMP Fadein_battle_bg_loop	; A03B	$4C $D6 $9F
L2E03E:
	LDA #$08		; A03E	$A9 $08
	STA $07			; A040	$85 $07
	LDA $09			; A042	$A5 $09
	EOR #$08		; A044	$49 $08
	STA $09			; A046	$85 $09
	BEQ L2E04D		; A048	$F0 $03
	JMP Fadein_battle_bg_loop	; A04A	$4C $D6 $9F
L2E04D:
	RTS			; A04D	$60
; End of Fadein_battle_bg
	
; Name	: Mob_entry
; Marks	: Monster entry
;	  monster moving effect on battle start
Mob_entry:
	LDX $7B56		; A04E	$AE $56 $7B	monster palette 1
	LDY #$01		; A051	$A0 $01		bg palette 0
	JSR Set_wpn_pal		; A053	$20 $03 $FC	load battle palette
	LDX $7B57		; A056	$AE $57 $7B	monster palette 2
	LDY #$05		; A059	$A0 $05		bg palette 1
	JSR Set_wpn_pal		; A05B	$20 $03 $FC
	LDA #$A0		; A05E	$A9 $A0		initial bg horizontal scroll position
	STA $01			; A060	$85 $01
; start of frame loop
Mob_entry_start:
	JSR Snd_wait_NMI_OAM_PAL; A062	$20 $54 $9E
	LDA $01			; A065	$A5 $01
	SEC			; A067	$38
	SBC #$10		; A068	$E9 $10
	STA $01			; A06A	$85 $01
	BCS L2E06F		; A06C	$B0 $01
	RTS			; A06E	$60
; End of Mob_entry
L2E06F:
	LDA #$31		; A06F	$A9 $31		skip 40 scanlines for battle bg
	STA $00			; A071	$85 $00
L2E073:
	BIT PpuStatus_2002	; A073	$2C $02 $20	wait for end of vblank
	BVS L2E073		; A076	$70 $FB
L2E078:
	LDX #$12		; A078	$A2 $12		(2)		\
	JSR Wait_78c		; A07A	$20 $89 $A0	(6) + 78 = 84	| 93 * 49 = 4557 cycles
	DEC $00			; A07D	$C6 $00		(5)		|  ~40 scanlines
	BNE L2E078		; A07F	$D0 $F7		(2)		/
	LDA $01			; A081	$A5 $01
	STA PpuScroll_2005	; A083	$8D $05 $20	set ppu horizontal scroll
	JMP Mob_entry_start	; A086	$4C $62 $A0	loop
; Mob_entry loop

; Name	: Wait_78c
; Marks	: wait 78 cycles
Wait_78c:
	DEX			; A089	$CA		(2) * 18 = 36
	BNE Wait_78c		; A08A	$D0 $FD		(2) * 18 = 36
	RTS			; A08C	$60		(6)
; End of

; Name	: Char_entry
; Marks	: character entry
Char_entry:
	LDX #$7D		; A08D	$A2 $7D
	LDY #$1D		; A08F	$A0 $1D		sprite palette 3
	JSR Set_wpn_pal		; A091	$20 $03 $FC
	INX			; A094	$E8
	LDY #$11		; A095	$A0 $11		sprite palette 0
	JSR Set_wpn_pal		; A097	$20 $03 $FC
	INX			; A09A	$E8
	LDY #$15		; A09B	$A0 $15		sprite palette 1
	JSR Set_wpn_pal		; A09D	$20 $03 $FC
	LDX #$03		; A0A0	$A2 $03
L2E0A2:
	STX $10			; A0A2	$86 $10
	LDA #$00		; A0A4	$A9 $00
	LDY $7BAE,X		; A0A6	$BC $AE $7B	character pose
	CPY #$03		; A0A9	$C0 $03
	BCS L2E0AF		; A0AB	$B0 $02
	LDA #$02		; A0AD	$A9 $02
L2E0AF:
	STA $7BC2,X		; A0AF	$9D $C2 $7B	character lower sprite pose ??
	STA $7BC6,X		; A0B2	$9D $C6 $7B	init character base x positions
	JSR Init_char_x		; A0B5	$20 $02 $A1
	LDX $10			; A0B8	$A6 $10
	JSR Draw_char		; A0BA	$20 $3A $A4
	LDX $10			; A0BD	$A6 $10
	DEX			; A0BF	$CA
	BPL L2E0A2		; A0C0	$10 $E0
; start of frame loop
L2E0C2:
	JSR Apply_OAM_pal	; A0C2	$20 $33 $9E
	LDX #$03		; A0C5	$A2 $03
L2E0C7:
	STX $10			; A0C7	$86 $10
	LDA char_x_cpos,X	; A0C9	$BD $CA $7B
	CMP char_x_bpos,X	; A0CC	$DD $D2 $7B
	BEQ L2E0D6		; A0CF	$F0 $05		branch if character is done moving
	LDA #$80		; A0D1	$A9 $80		move left
	JSR Calc_mov_pos	; A0D3	$20 $12 $A5	move character
L2E0D6:
	LDX $10			; A0D6	$A6 $10
	JSR Draw_char		; A0D8	$20 $3A $A4
	LDX $10			; A0DB	$A6 $10		next character
	DEX			; A0DD	$CA
	BPL L2E0C7		; A0DE	$10 $E7
	LDX #$03		; A0E0	$A2 $03
L2E0E2:
	LDA char_x_cpos,X	; A0E2	$BD $CA $7B
	CMP char_x_bpos,X	; A0E5	$DD $D2 $7B
	BNE L2E0C2		; A0E8	$D0 $D8		wait nutil all characters are done moving
	DEX			; A0EA	$CA
	BPL L2E0E2		; A0EB	$10 $F5
	JSR Apply_OAM_pal	; A0ED	$20 $33 $9E
	LDX #$03		; A0F0	$A2 $03
L2E0F2:
	STX $10			; A0F2	$86 $10
	JSR Set_char_low_pos	; A0F4	$20 $FD $AB
	JSR Draw_char		; A0F7	$20 $3A $A4
	LDX $10			; A0FA	$A6 $10
	DEX			; A0FC	$CA
	BPL L2E0F2		; A0FD	$10 $F3
	JMP Apply_OAM_pal	; A0FF	$4C $33 $9E
; End of Char_entry

; Name	: Init_char_x
; X	: Character index(00h-03h)
; Marks	: Character back/front row to character x position (base)
;	  Initialize character base x position to back/front row value
Init_char_x:
	LDA #$D0		; A102	$A9 $D0		x = 208, front row
	LDY $7BBE,X		; A104	$BC $BE $7B
	BEQ L2E10B		; A107	$F0 $02		branch if in front row
	LDA #$E0		; A109	$A9 $E0		x = 224, back row
L2E10B:
	STA char_x_bpos,X	; A10B	$9D $D2 $7B
	RTS			; A10E	$60
; End of Init_char_x

; Name	: Calc_attr_tbl
; A	: repeat count($03) - monster height
; X	: repeat count($02) - monster width
; Y	: ($04) - 03h = attribute value ??
; SRC	: $00 = Y -> 6543 20yx
;	  $01 = monster xy array 0000 00yx
; Marks	: attribute = bit76,54,32,10 = bottom right | bottom left | top right | top left
Calc_attr_tbl:
	STX $02			; A10F	$86 $02
	STA $03			; A111	$85 $03
	STY $04			; A113	$84 $04
L2E115:
	LDA $04			; A115	$A5 $04
	STA $05			; A117	$85 $05
	LDA #$FC		; A119	$A9 $FC		start from top left(xxxx xxoo)
	LDY $01			; A11B	$A4 $01
	STY $07			; A11D	$84 $07
	BEQ L2E12B		; A11F	$F0 $0A
L2E121:
	SEC			; A121	$38
	ROL A			; A122	$2A
	ROL A			; A123	$2A
	ASL $05			; A124	$06 $05
	ASL $05			; A126	$06 $05
	DEY			; A128	$88
	BNE L2E121		; A129	$D0 $F6
L2E12B:
	STA $06			; A12B	$85 $06		bit mask
	LDX $02			; A12D	$A6 $02
	LDY $00			; A12F	$A4 $00
L2E131:
	LDA $79C8,Y		; A131	$B9 $C8 $79	left screen attribute table
	AND $06			; A134	$25 $06		bit mask(FC,F3,3F,CF)
	ORA $05			; A136	$05 $05		bit fill data, each 2bit
	STA $79C8,Y		; A138	$99 $C8 $79	left screen attribute table
	LDA $07			; A13B	$A5 $07
	EOR #$01		; A13D	$49 $01
	STA $07			; A13F	$85 $07
	AND #$01		; A141	$29 $01
	SEC			; A143	$38
	BEQ L2E150		; A144	$F0 $0A		branch if before attribute is right
	ROL $06			; A146	$26 $06
	ROL $06			; A148	$26 $06
	ASL $05			; A14A	$06 $05
	ASL $05			; A14C	$06 $05
	BCC L2E159		; A14E	$90 $09		branch if FCh(top left)
L2E150:
	ROR $06			; A150	$66 $06
	ROR $06			; A152	$66 $06
	LSR $05			; A154	$46 $05
	LSR $05			; A156	$46 $05
	INY			; A158	$C8
L2E159:
	DEX			; A159	$CA
	BNE L2E131		; A15A	$D0 $D5		loop
	LDA $01			; A15C	$A5 $01
	EOR #$02		; A15E	$49 $02
	STA $01			; A160	$85 $01
	AND #$02		; A162	$29 $02
	BNE L2E16D		; A164	$D0 $07
	LDA $00			; A166	$A5 $00
	CLC			; A168	$18
	ADC #$08		; A169	$69 $08
	STA $00			; A16B	$85 $00
L2E16D:
	DEC $03			; A16D	$C6 $03
	BNE L2E115		; A16F	$D0 $A4		loop
	RTS			; A171	$60
; End of Calc_attr_tbl

; A	: repeat count
; X	: repeat count B
; Marks	: $02(ADDR) = ??? table, big monster attribute ??
;	  $00 = ??, $01 = ??
;	  $09 = ??
;A172
Last_attr:
	STX $05			; A172	86 05
	STA $04			; A174	85 04
	LDY #$00		; A176	A0 00
	JSR Set_attr_9216	; A178	20 DA A1	$06=??, $07=04h
L2E17B:
	LDA $00			; A17B	A5 00
	STA $0B			; A17D	85 0B
	LDA $05			; A17F	A5 05
	STA $0A			; A181	85 0A
	LDA $01			; A183	A5 01
	STA $09			; A185	85 09
L2E187:
	LDA #$00		; A187	A9 00
	STA $08			; A189	85 08
	ASL $06			; A18B	06 06
	ROL $08			; A18D	26 08
	ASL $06			; A18F	06 06
	ROL $08			; A191	26 08
	LDA #$FC		; A193	A9 FC
	LDX $09			; A195	A6 09
	BEQ L2E1A3		; A197	F0 0A
L2E199:
	SEC			; A199	38
	ROL			; A19A	2A
	ROL			; A19B	2A
	ASL $08			; A19C	06 08
	ASL $08			; A19E	06 08
	DEX			; A1A0	CA
	BNE L2E199		; A1A1	D0 F6		loop
L2E1A3:
	LDX $0B			; A1A3	A6 0B
	AND $79C8,X		; A1A5	3D C8 79	left screen attribute table
	ORA $08			; A1A8	05 08
	STA $79C8,X		; A1AA	9D C8 79	left screen attribute table
	LDA $09			; A1AD	A5 09
	EOR #$01		; A1AF	49 01
	STA $09			; A1B1	85 09
	AND #$01		; A1B3	29 01
	BNE L2E1B9		; A1B5	D0 02
	INC $0B			; A1B7	E6 0B
L2E1B9:
	DEC $07			; A1B9	C6 07
	BNE L2E1C0		; A1BB	D0 03
	JSR Set_attr_9216	; A1BD	20 DA A1
L2E1C0:
	DEC $0A			; A1C0	C6 0A
	BNE L2E187		; A1C2	D0 C3		loop
	LDA $01			; A1C4	A5 01
	EOR #$02		; A1C6	49 02
	STA $01			; A1C8	85 01
	AND #$02		; A1CA	29 02
	BNE L2E1D5		; A1CC	D0 07
	LDA $00			; A1CE	A5 00
	CLC			; A1D0	18
	ADC #$08		; A1D1	69 08
	STA $00			; A1D3	85 00
L2E1D5:
	DEC $04			; A1D5	C6 04
	BNE L2E17B		; A1D7	D0 A2		loop
	RTS			; A1D9	60
; End of

; Name	: Set_attr_9216
; Y	: offset (0-8 ??)
; DEST	: $06 = , $07 = 04h
; Marks	: $02(ADDR)=9216
Set_attr_9216:
	LDA ($02),Y		; A1DA	B1 02
	STA $06			; A1DC	85 06
	INY			; A1DE	C8
	LDA #$04		; A1DF	A9 04
	STA $07			; A1E1	85 07
	RTS			; A1E3	60
; End of Set_attr_9216

; Name	: Copy_l_attr
; Marks	: Copy left screen attribute table to ppu
;	  from $02(ADDR) = $79C8 to
;	  $00(ADDR) = $2300
;	  size to copy is 40h
Copy_l_attr:
	LDA #$C8		; A1E4	$A9 $C8
	STA $02			; A1E6	$85 $02
	LDA #$79		; A1E8	$A9 $79
	STA $03			; A1EA	$85 $03		src $79C8(left screen attribute table)
	LDA #$23		; A1EC	$A9 $23		dest ppu 23C0 (left screen attribute table)
Copy_attr_to_ppu:
	STA $01			; A1EE	$85 $01
	LDA #$C0		; A1F0	$A9 $C0
	STA $00			; A1F2	$85 $00
	LDX #$40		; A1F4	$A2 $40		size to copy
	JMP CpPRGtoPPU_Xlen	; A1F6	$4C $6F $FD
; End of Copy_l_attr
; End of Copy_r_attr

; Name	: Copy_r_attr
; Marks	: Copy right screen attribute table to ppu
Copy_r_attr:
	LDA #$08		; A1F9	$A9 $08
	STA $02			; A1FB	$85 $02
	LDA #$7A		; A1FD	$A9 $7A
	STA $03			; A1FF	$85 $03		src $7A08
	LDA #$27		; A201	$A9 $27		ppu $27C0 (right screen attribute table)
	BNE Copy_attr_to_ppu	; A203	$D0 $E9
; End of Copy_r_attr

; Name	: Init_mob_attr
; A	: monster id
; Marks	: BANK 0B/9216 (???)
;	  +$02 = 9216 + 9n ??? table
Init_mob_attr:
	TAY			; A205	$A8
	LDA $7B62,Y		; A206	$B9 $62 $7B	monster id in each slot
	BPL L2E20C		; A209	$10 $01
	RTS			; A20B	$60
; End of
L2E20C:
	LDA mob_gfx_id,Y	; A20C	$B9 $72 $7B	monster graphics id
	CMP #$09		; A20F	$C9 $09
	BCS L2E22F		; A211	$B0 $1C		branch if monster size is big ??
	LDA $7B7A,Y		; A213	$B9 $7A $7B	??
; Name	: Calc_mob_xy
; A	: 03h
; Y	: monster index
; Marks	:
Calc_mob_xy:
	STA $02			; A216	$85 $02
	LDX mob_x_poss,Y	; A218	$BE $9A $7B
	LDA mob_y_poss,Y	; A21B	$B9 $92 $7B
	JSR Set_mob_arr		; A21E	$20 $B8 $9C
	LDA mob_widths,Y	; A221	$B9 $8A $7B
	LSR A			; A224	$4A
	TAX			; A225	$AA
	LDA mob_heights,Y	; A226	$B9 $82 $7B
	LSR A			; A229	$4A
	LDY $02			; A22A	$A4 $02
	JMP Calc_attr_tbl	; A22C	$4C $0F $A1
; End of Calc_mob_xy
L2E22F:
	SBC #$09		; A22F	E9 09
	PHA			; A231	48
	LDX #$09		; A232	A2 09
	JSR Multi		; A234	20 79 FC	multiply
	LDA $02			; A237	A5 02
	ADC #<Bigmob_attr_tbl	; A239	69 16		BANK 0B/9216
	STA $02			; A23B	85 02
	LDA $03			; A23D	A5 03
	ADC #>Bigmob_attr_tbl	; A23F	69 92
	STA $03			; A241	85 03
	PLA			; A243	68
	CMP #$06		; A244	C9 06
	BEQ L2E256		; A246	F0 0E		branch if last value(0Fh) ??
	LDA #$09		; A248	A9 09
	STA $00			; A24A	85 00
	LDA #$02		; A24C	A9 02
	STA $01			; A24E	85 01
	LDX #$06		; A250	A2 06
	LDA #$06		; A252	A9 06
	BNE L2E262		; A254	D0 0C
L2E256:
	LDA #$08		; A256	A9 08
	STA $00			; A258	85 00
	LDA #$03		; A25A	A9 03
	STA $01			; A25C	85 01
	LDX #$09		; A25E	A2 09
	LDA #$06		; A260	A9 06
L2E262:
	JMP Last_attr		; A262	4C 72 A1
; End of Init_mob_attr

; Name	: Copy_char_gfx_ppu
; Marks	: Copy character graphics to ppu
Copy_char_gfx_ppu:
	STX $04			; A265	$86 $04
	JSR Init_gfx_buf	; A267	$20 $CF $9D
	LDY $7BA2,X		; A26A	$BC $A2 $7B
	BMI L2E2A2		; A26D	$30 $33		branch if character not present
	BNE L2E283		; A26F	$D0 $12
; normal
	LDA $7BBA,X		; A271	$BD $BA $7B	character id
	ASL A			; A274	$0A
	ADC #$9E		; A275	$69 $9E
	STA $01			; A277	$85 $01
	LDA #$00		; A279	$A9 $00
	STA $00			; A27B	$85 $00		BANK 09/9E00 (battle character graphics)
	LDX #$00		; A27D	$A2 $00
	LDY #$80		; A27F	$A0 $80
	BNE L2E29F		; A281	$D0 $1C
; toad or mini
L2E283:
	DEY			; A283	$88
	TYA			; A284	$98
	JSR Calc_char_addr	; A285	$20 $A2 $AD	as16
	ADC #$80		; A288	$69 $80
	STA $00			; A28A	85 00
	LDA #$9D		; A28C	A9 9D
	STA $01			; A28E	85 01		BANK 09/9D80 (
	LDX #$50		; A290	A2 50		start index(7650)
	LDY #$10		; A292	A0 10		size
	JSR Copy_char_tile	; A294	20 BA FB	copy sprite graphics to buffer
	TYA			; A297	98
	CLC			; A298	18
	ADC $00			; A299	65 00
	STA $00			; A29B	85 00
	LDX #$70		; A29D	A2 70		start index(7670)
L2E29F:
	JSR Copy_char_tile	; A29F	$20 $BA $FB
L2E2A2:
	JSR Wait_MENU_snd	; A2A2	$20 $5B $FD
	LDA $04			; A2A5	$A5 $04
	LDX #$80		; A2A7	$A2 $80
	JSR Multi		; A2A9	$20 $79 $FC
	LDA $02			; A2AC	$A5 $02
	STA $00			; A2AE	$85 $00
	LDA $03			; A2B0	$A5 $03
	STA $01			; A2B2	$85 $01
	JSR Set_02_gfxbuf	; A2B4	$20 $C6 $9D
	JSR Copy_tile_ppu	; A2B7	$20 $A2 $9D	copy 8 tiles to ppu
	JMP Wait_NMI_end	; A2BA	$4C $46 $FD
; End of Copy_char_gfx_ppu

; Name	: Set_tile_to_ppu
; A	: weapon action type ??
; Marks	: +$02 = source address to copy to +$00
;	  some tile copy to $0380, $03E0
;	  $00(ADDR) = ppu address
;	  $06 = Weapon properties A(attack pose A)
;	  $07 = Weapon properties B(attack pose B)
;	  Set character(attack pose) tile to ppu
Set_tile_to_ppu:
	STA $08			; A2BD	$85 $08		weapon action type temp
	LDX char_idx_atk	; A2BF	$A6 $26
	LDA $06			; A2C1	$A5 $06		weapon properties temp
	JSR Status_char_ppu	; A2C3	$20 $21 $A3	character tile
	JSR And_1F		; A2C6	$20 $E9 $A2
	LDA #$80		; A2C9	$A9 $80
	STA $00			; A2CB	$85 $00
	LDA #$03		; A2CD	$A9 $03
	STA $01			; A2CF	$85 $01		destination ppu address, +$00 = $0380-$03DF
	JSR Wait_MENUs_OAM_NMIe	; A2D1	$20 $AB $A3
	LDX char_idx_atk	; A2D4	$A6 $26
	LDA $07			; A2D6	$A5 $07		weapon properties temp
	JSR Status_char_ppu	; A2D8	$20 $21 $A3	character tile
	JSR And_1F		; A2DB	$20 $E9 $A2
	LDA #$E0		; A2DE	$A9 $E0
	STA $00			; A2E0	$85 $00
	LDA #$03		; A2E2	$A9 $03
	STA $01			; A2E4	$85 $01		destination ppu address, +$00 = $03E0-$043F
	JMP Wait_MENUs_OAM_NMIe	; A2E6	$4C $AB $A3
; End of Set_tile_to_ppu

; Name	: And_1F
; Marks	: $08 = Weapon action type ??
;	  $25 = repeat count A, $2D = repeat count B
;	  remove some spot tile(punch ??)
And_1F:
	LDA $08			; A2E9	$A5 $08
	CMP #$02		; A2EB	$C9 $02
	BEQ L2E2F0		; A2ED	$F0 $01		branch if weapon action type is fist
	RTS			; A2EF	$60
; End of
L2E2F0:
	LDY #$25		; A2F0	A0 25
	JSR Buf_mask_1F		; A2F2	20 F7 A2
	LDY #$2D		; A2F5	A0 2D
; Name	: Buf_mask_1F
; Y	: generic buffer offset
; Marks	: Repeat 3 times
Buf_mask_1F:
	LDX #$03		; A2F7	A2 03
L2E2F9:
	LDA $7600,Y		; A2F9	B9 00 76
	AND #$1F		; A2FC	29 1F
	STA $7600,Y		; A2FE	99 00 76
	INY			; A301	C8
	DEX			; A302	CA
	BNE L2E2F9		; A303	D0 F4
	RTS			; A305	60
; End of Buf_mask_1F
; End of And_1F

; Name	: Lower_sprite
; X	: character index ??
; Marks	:
Lower_sprite:
	TXA			; A306	$8A
	PHA			; A307	$48
	LDA $7BC2,X		; A308	$BD $C2 $7B	character lower sprite pose ???
	JSR Status_char_ppu	; A30B	$20 $21 $A3
	PLA			; A30E	$68
	LDX #$60		; A30F	$A2 $60
	JSR Multi		; A311	$20 $79 $FC
	LDA $02			; A314	$A5 $02
	STA $00			; A316	$85 $00
	LDA $03			; A318	$A5 $03
	ADC #$02		; A31A	$69 $02
	STA $01			; A31C	$85 $01
	JMP Wait_MENUs_OAM_NMIe	; A31E	$4C $AB $A3
; End of Lower_sprite ??

; Name	: Status_char_ppu
; A	: weapon properties ?? character lower sprite pose ??
; X	: character index ??
; Marks	: $04(ADDR) = 
Status_char_ppu:
	STA $00			; A321	$85 $00
	JSR Init_gfx_buf	; A323	$20 $CF $9D
	LDA $7BA2,X		; A326	$BD $A2 $7B	character graphics type
	BEQ L2E32E		; A329	$F0 $03		branch if normal status
	BPL L2E370		; A32B	$10 $43		branch if mini or toad status
	RTS			; A32D	$60
; End of
L2E32E:
	LDA $7BBA,X		; A32E	$BD $BA $7B	character id - CASE: normal status
	ASL A			; A331	$0A
	ADC #$9E		; A332	$69 $9E
	STA $04			; A334	$85 $04
	LDX $00			; A336	$A6 $00
	BEQ L2E36F		; A338	$F0 $35
	DEX			; A33A	$CA
	LDA #$06		; A33B	$A9 $06
	JSR Multi		; A33D	$20 $79 $FC	+$02 = result
	LDA $02			; A340	$A5 $02
	STA $05			; A342	$85 $05
	LDA #$00		; A344	$A9 $00
	STA $03			; A346	$85 $03		repeat counter and tile copy start index
L2E348:
	LDA #$00		; A348	$A9 $00
	STA $01			; A34A	$85 $01
	LDX $05			; A34C	$A6 $05		multiples of 6
	LDA Status_tile_idx_tbl,X	; A34E	$BD $88 $92	not accurate
	INC $05			; A351	$E6 $05
	JSR Low_to_high		; A353	$20 $A4 $AD	asl4 Get address ??
	ROL $01			; A356	$26 $01
	ADC #$00		; A358	$69 $00
	STA $00			; A35A	$85 $00
	LDA $01			; A35C	$A5 $01
	ADC $04			; A35E	$65 $04		9Eh + 
	STA $01			; A360	$85 $01		BANK 09/9E00- $00(ADDR) = tile address to be copied
	LDX $03			; A362	$A6 $03		start index
	LDY #$10		; A364	$A0 $10		size to copy
	JSR Copy_char_tile	; A366	$20 $BA $FB
	STX $03			; A369	$86 $03		X increases by size to copy(+10h)
	CPX #$60		; A36B	$E0 $60
	BNE L2E348		; A36D	$D0 $D9		loop
L2E36F:
	RTS			; A36F	$60
; End of
L2E370:
	LDA #$9D		; A370	A9 9D		CASE: mini or toad status
	STA $01			; A372	85 01
	LDY $7BA2,X		; A374	BC A2 7B	character graphics type(1:mini, 2: toad)
	DEY			; A377	88
	TYA			; A378	98
	JSR Low_to_high		; A379	20 A4 AD	asl4
	STA $02			; A37C	85 02
	LDY $00			; A37E	A4 00		weapon properties = 2 or 3
	BEQ L2E386		; A380	F0 04
	CPY #$08		; A382	C0 08
	BNE L2E387		; A384	D0 01
L2E386:
	RTS			; A386	60
; End of
L2E387:
	DEY			; A387	88
	CLC			; A388	18
	LDA D_A3B6,Y		; A389	B9 B6 A3
	BPL L2E39A		; A38C	10 0C
	LDA #$40		; A38E	A9 40
	ADC $02			; A390	65 02
	STA $00			; A392	85 00		$00(ADDR)
	LDA #$88		; A394	A9 88
	STA $01			; A396	85 01		BANK 09/8840 (tile address - misc)
	BNE L2E3A4		; A398	D0 0A
L2E39A:
	ASL $02			; A39A	06 02
	ASL $02			; A39C	06 02
	ADC $02			; A39E	65 02
	ADC #$80		; A3A0	69 80
	STA $00			; A3A2	85 00
L2E3A4:
	LDX #$50		; A3A4	A2 50		start index(7650)
	LDY #$10		; A3A6	A0 10		size
	JMP Copy_char_tile	; A3A8	4C BA FB	copy sprite graphics to buffer
; End of Status_char_ppu ??

; Name	: Wait_MENUs_OAM_NMIe
; SRC	: $02(ADDR) = $7600
; DEST	: $00(ADDR) = ppu address
; Marks	: Wait MENU with sound, then apply OAM on NMI, finaly NMI end
;	  size = 60h
Wait_MENUs_OAM_NMIe:
	JSR Wait_MENU_snd	; A3AB	$20 $5B $FD
	LDX #$60		; A3AE	$A2 $60
	JSR Apply_OAM_tile	; A3B0	$20 $BA $9D
	JMP Wait_NMI_end	; A3B3	$4C $46 $FD
; End of Wait_MENUs_OAM_NMIe

;A3B6 - data block ?? - toad or mini tile index ??
D_A3B6:
.byte $00,$10,$C0,$C0,$20,$10,$30

; Name	: Init_char_sprite
; Marks	: Init character sprite data
;	  $00 = offset 0-6
Init_char_sprite:
	LDA #$00		; A3BD	$A9 $00
	STA $04			; A3BF	$85 $04
	STA $00			; A3C1	$85 $00
	LDA #$79		; A3C3	$A9 $79		7900 (character sprite data)
	STA $05			; A3C5	$85 $05
L2E3C7:
	LDX $00			; A3C7	$A6 $00
	LDY Sprite_idx_ofs,X	; A3C9	$BC $2C $A4
	JSR Set_sprite_index	; A3CC	$20 $E3 $A3
	LDX $00			; A3CF	$A6 $00
	LDY Sprite_xy_ofs,X	; A3D1	$BC $33 $A4
	JSR Set_sprite_xy	; A3D4	$20 $F1 $A3
	JSR Set_char_sprite	; A3D7	$20 $04 $A4
	INC $00			; A3DA	$E6 $00
	LDX $00			; A3DC	$A6 $00
	CPX #$07		; A3DE	$E0 $07
	BNE L2E3C7		; A3E0	$D0 $E5		loop
	RTS			; A3E2	$60
; End of Init_char_sprite

; Name	: Set_sprite_index
; Y	: offset
; Marks	: Set data to $14-$19(6 bytes) = INDEX
Set_sprite_index:
	LDX #$00		; A3E3	$A2 $00
L2E3E5:
	LDA Sprite_idx_A,Y	; A3E5	$B9 $F4 $92
	STA $14,X		; A3E8	$95 $14
	INX			; A3EA	$E8
	INY			; A3EB	$C8
	CPX #$06		; A3EC	$E0 $06
	BNE L2E3E5		; A3EE	$D0 $F5		loop
	RTS			; A3F0	$60
; End of Set_sprite_index

; Name	: Set_sprite_xy
; Marks	: Set data to $0E-$13(6 bytes) = X
;	  Set data to $08-$0D(6 bytes) = Y
Set_sprite_xy:
	LDX #$00		; A3F1	$A2 $00
L2E3F3:
	LDA Sprite_X_tbl,Y	; A3F3	$B9 $64 $92
	STA $0E,X		; A3F6	$95 $0E
	LDA Sprite_Y_tbl,Y	; A3F8	$B9 $76 $92
	STA $08,X		; A3FB	$95 $08
	INX			; A3FD	$E8
	INY			; A3FE	$C8
	CPX #$06		; A3FF	$E0 $06
	BNE L2E3F3		; A401	$D0 $F0
	RTS			; A403	$60
; End of Set_sprite_xy

; Name	: Set_char_sprite
; Marks	: $04(ADDR)
;	  $08 = OAM Y
;	  $0E = OAM X
;	  $14 = OAM INDEX
;	  set 6 tiles
;	  +$04 = ??
;	  Set character sprite to buffer
Set_char_sprite:
	LDY #$00		; A404	$A0 $00
	LDX #$00		; A406	$A2 $00
L2E408:
	LDA $08,X		; A408	$B5 $08		OAM Y
	STA ($04),Y		; A40A	$91 $04
	INY			; A40C	$C8
	LDA $14,X		; A40D	$B5 $14		OAM INDEX
	STA ($04),Y		; A40F	$91 $04
	INY			; A411	$C8
	LDA #$00		; A412	$A9 $00		OAM ATTR
	STA ($04),Y		; A414	$91 $04
	INY			; A416	$C8
	LDA $0E,X		; A417	$B5 $0E		OAM X
	STA ($04),Y		; A419	$91 $04
	INY			; A41B	$C8
	INX			; A41C	$E8
	CPY #$18		; A41D	$C0 $18
	BNE L2E408		; A41F	$D0 $E7		loop
	TYA			; A421	$98
	CLC			; A422	$18
	ADC $04			; A423	$65 $04
	STA $04			; A425	$85 $04
	BCC L2E42B		; A427	$90 $02
	INC $05			; A429	$E6 $05
L2E42B:
	RTS			; A42B	$60
; End of Set_char_sprite

; $A42C-$A439 data block(14 bytes)
Sprite_idx_ofs:
.byte $00,$06,$0C,$00,$06,$0C,$0C
Sprite_xy_ofs:
.byte $00,$00,$00,$0C,$0C,$0C,$06

; Name	: Draw_char
; X	: char_idx
; Marks	: walk pose ?? attack pose ??
;	  Draw character on buffer
Draw_char:
	STX $04			; A43A	$86 $04
	LDA $7BA2,X		; A43C	$BD $A2 $7B	character graphics type (hidden if msb set) normal/mini/toad
	BPL L2E442		; A43F	$10 $01
	RTS			; A441	$60
; End of Draw_char
L2E442:
	STA $05			; A442	$85 $05
	LDA $7BC2,X		; A444	$BD $C2 $7B	character lower sprite pose ?? - 01h stand, 02h walk ??
	STA $06			; A447	$85 $06
	AND #$7F		; A449	$29 $7F
	STA $07			; A44B	$85 $07
	LDX #$08		; A44D	$A2 $08
	LDA $07			; A44F	$A5 $07
	CMP #$03		; A451	$C9 $03
	BCC L2E457		; A453	$90 $02		branch if pose is 0,1,2(multi 8)
	LDX #$06		; A455	$A2 $06
L2E457:
	LDA $04			; A457	$A5 $04
	JSR Multi		; A459	$20 $79 $FC	character index x 6 or x 8
	LDA $02			; A45C	$A5 $02
	STA $08			; A45E	$85 $08
	LDA #$00		; A460	$A9 $00
	LDX $07			; A462	$A6 $07
	BEQ L2E477		; A464	$F0 $11
	LDA #$06		; A466	$A9 $06
	CPX #$08		; A468	$E0 $08
	BEQ L2E477		; A46A	$F0 $0B
	DEX			; A46C	$CA
	LDA D_A50B,X		; A46D	$BD $0B $A5
	LDX $05			; A470	$A6 $05
	BEQ L2E477		; A472	$F0 $03
	CLC			; A474	$18
	ADC #$03		; A475	$69 $03
L2E477:
	LDX #$18		; A477	$A2 $18
	JSR Multi		; A479	$20 $79 $FC
	LDA $02			; A47C	$A5 $02
	ADC #$00		; A47E	$69 $00
	STA $00			; A480	$85 $00
	LDA $03			; A482	$A5 $03
	ADC #$79		; A484	$69 $79		$00(ADDR) character sprite data ?? 7900
	STA $01			; A486	$85 $01
	LDA $04			; A488	$A5 $04
	ASL A			; A48A	$0A
	TAX			; A48B	$AA
	LDA $2C,X		; A48D	$B5 $2C
	STA $02			; A48E	$85 $02
	LDA $2D,X		; A490	$B5 $2D
	STA $03			; A492	$85 $03		$02(ADDR) OAM buffer
	LDY #$00		; A494	$A0 $00
	LDX #$00		; A496	$A2 $00
L2E498:
	INY			; A498	$C8
	LDA ($00),Y		; A499	$B1 $00		OAM INDEX(character sprite data) ex> $7901
	CLC			; A49B	$18
	ADC $08			; A49C	$65 $08
	STA $0A,X		; A49E	$95 $0A
	INY			; A4A0	$C8
	INY			; A4A1	$C8
	INY			; A4A2	$C8		y = 1,5,9,D,11,15
	INX			; A4A3	$E8		y = 0,1,2,3, 4, 5
	CPY #$18		; A4A4	$C0 $18
	BNE L2E498		; A4A6	$D0 $F0		loop - character sprite (2x3 = 6)
	BIT $06			; A4A8	$24 $06
	BPL L2E4C0		; A4AA	$10 $14
	LDA $05			; A4AC	$A5 $05
	BNE L2E4C0		; A4AE	$D0 $10
	LDX #$00		; A4B0	$A2 $00
L2E4B2:
	LDA $0A,X		; A4B2	$B5 $0A
	LDY $0B,X		; A4B4	$B4 $0B
	STY $0A,X		; A4B6	$94 $0A
	STA $0B,X		; A4B8	$95 $0B
	INX			; A4BA	$E8
 	INX			; A4BB	$E8
	CPX #$06		; A4BC	$E0 $06
	BNE L2E4B2		; A4BE	$D0 $F2
L2E4C0:
	LDX $04			; A4C0	$A6 $04
	LDA char_x_cpos,X	; A4C2	$BD $CA $7B
	STA $08			; A4C5	$85 $08
	LDA char_y_pos,X	; A4C7	$BD $CE $7B
	STA $09			; A4CA	$85 $09
	LDA $7BB6,X		; A4CC	$BD $B6 $7B	character palette id
	BIT $06			; A4CF	$24 $06
	BPL L2E4D5		; A4D1	$10 $02
	ORA #$40		; A4D3	$09 $40
L2E4D5:
	STA $05			; A4D5	$85 $05
	LDA $07			; A4D7	$A5 $07
	BNE L2E4E7		; A4D9	$D0 $0C
	LDY #$00		; A4DB	$A0 $00
	LDA #$F0		; A4DD	$A9 $F0
L2E4DF:
	STA ($02),Y		; A4DF	$91 $02
	INY			; A4E1	$C8
	CPY #$18		; A4E2	$C0 $18
	BNE L2E4DF		; A4E4	$D0 $F9
	RTS			; A4E6	$60
; End of Draw_char
; Character sprite struct
; 1st character not move motion = 7900(OAM buffer)
; 1st character move motion = 7918(OAM buffer)
L2E4E7:
	LDY #$00		; A4E7	$A0 $00
	LDX #$00		; A4E9	$A2 $00
L2E4EB:
	LDA ($00),Y		; A4EB	$B1 $00		ex> $7900 - character sprite data(OAM)
	CLC			; A4ED	$18
	ADC $09			; A4EE	$65 $09		Y
	STA ($02),Y		; A4F0	$91 $02		ex> $02A0 - OAM buffer - Y
	INY			; A4F2	$C8
	LDA $0A,X		; A4F3	$B5 $0A
	INX			; A4F5	$E8
	STA ($02),Y		; A4F6	$91 $02		INDEX
	INY			; A4F8	$C8
	LDA $05			; A4F9	$A5 $05
	STA ($02),Y		; A4FB	$91 $02		ATTR
	INY			; A4FD	$C8
	LDA ($00),Y		; A4FE	$B1 $00
	CLC			; A500	$18
	ADC $08			; A501	$65 $08		X
	STA ($02),Y		; A503	$91 $02		OAM X
	INY			; A505	$C8
	CPY #$18		; A506	$C0 $18
	BNE L2E4EB		; A508	$D0 $E1		loop - char sprite (2x3 = 6)
	RTS			; A50A	$60
; End of Draw_char

; $A50B - data block
D_A50B:
.byte $00,$01,$02,$02,$02,$02,$02

; Name	: Calc_mov_pos
; A	: Move direction(80h=left, 00h=right)
; X	: character idx
; Marks	: every 4 step, lower sprite(leg) graphic will change
Calc_mov_pos:
	STA $00			; A512	$85 $00
	LDA $7BA2,X		; A514	$BD $A2 $7B	character graphics type
	BMI L2E556		; A517	$30 $3D
	BEQ L2E556		; A519	$F0 $3B
	CMP #$01		; A51B	$C9 $01
	BEQ L2E586		; A51D	$F0 $67
	LDA $7BD6,X		; A51F	$BD $D6 $7B
	AND #$07		; A522	$29 $07
	STA $7BD6,X		; A524	$9D $D6 $7B
	TAY			; A527	$A8		Y=0-7
	LDA char_x_cpos,X	; A528	$BD $CA $7B
	BIT $00			; A52B	$24 $00
	BPL L2E536		; A52D	$10 $07		branch if direction is right
	SEC			; A52F	$38
	SBC Mov_step,Y		; A530	$F9 $33 $93
	JMP Calc_mov_pos_y	; A533	$4C $3A $A5
L2E536:
	CLC			; A536	$18
	ADC Mov_step,Y		; A537	$79 $33 $93
Calc_mov_pos_y:
	STA char_x_cpos,X	; A53A	$9D $CA $7B
	LDA char_y_pos,X	; A53D	$BD $CE $7B
	CLC			; A540	$18
	ADC Mov_y_step,Y	; A541	$79 $3B $93
	STA char_y_pos,X	; A544	$9D $CE $7B
	LDA $7BC2,X		; A547	$BD $C2 $7B
	BEQ L2E552		; A54A	$F0 $06
	LDA Char_low_step,Y	; A54C	$B9 $43 $93
	STA $7BC2,X		; A54F	$9D $C2 $7B	character lower sprite pose ???
L2E552:
	INC $7BD6,X		; A552	$FE $D6 $7B	step count ??
	RTS			; A555	$60
; End of Calc_mov_pos
; Marks	: mormal or hidden, 2 pixel fix move
L2E556:
	LDA char_x_cpos,X	; A556	$BD $CA $7B
	BIT $00			; A559	$24 $00
	BPL L2E563		; A55B	$10 $06		branch if direction is right
	SEC			; A55D	$38
	SBC #$02		; A55E	$E9 $02
	JMP Calc_mov_pos_pose	; A560	$4C $66 $A5
L2E563:
	CLC			; A563	$18
	ADC #$02		; A564	$69 $02		moving step(2 pixel)
Calc_mov_pos_pose:
	STA char_x_cpos,X	; A566	$9D $CA $7B
	LDA $7BD6,X		; A569	$BD $D6 $7B
	CMP #$03		; A56C	$C9 $03		run motion step(change every 3)
	BCC L2E582		; A56E	$90 $12
	LDA #$00		; A570	$A9 $00
	STA $7BD6,X		; A572	$9D $D6 $7B	counter reset ??
	LDA $7BDA,X		; A575	$BD $DA $7B
	EOR #$FF		; A578	$49 $FF
	STA $7BDA,X		; A57A	$9D $DA $7B
	BEQ L2E582		; A57D	$F0 $03
	JSR Calc_low_pos	; A57F	$20 $A7 $A5
L2E582:
	INC $7BD6,X		; A582	$FE $D6 $7B
	RTS			; A585	$60
; End of Calc_mov_pos
; Marks	: mini
L2E586:
	LDA char_x_cpos,X	; A586	$BD $CA $7B
	BIT $00			; A589	$24 $00
	BPL L2E593		; A58B	$10 $06
	SEC			; A58D	$38
	SBC #$01		; A58E	$E9 $01
	JMP Calc_mov_pos_mini	; A590	$4C $96 $A5
L2E593:
	CLC			; A593	$18
	ADC #$01		; A594	$69 $01
Calc_mov_pos_mini:
	STA char_x_cpos,X	; A596	$9D $CA $7B
	LDA $7BD6,X		; A599	$BD $D6 $7B	counter
	AND #$01		; A59C	$29 $01
	BEQ L2E5A3		; A59E	$F0 $03
	JSR Calc_low_pos	; A5A0	$20 $A7 $A5
L2E5A3:
	INC $7BD6,X		; A5A3	$FE $D6 $7B	counter next
	RTS			; A5A6	$60
; End of Calc_mov_pos

; Name	: Calc_low_pos
; X	: character idx
; Marks	:
Calc_low_pos:
	LDY $7BC6,X		; A5A7	$BC $C6 $7B
	LDA $7BC2,X		; A5AA	$BD $C2 $7B	character lower sprite pose ??
	BEQ L2E5B9		; A5AD	$F0 $0A
	CMP #$01		; A5AF	$C9 $01
	BEQ L2E5B5		; A5B1	$F0 $02
	LDY #$01		; A5B3	$A0 $01
L2E5B5:
	TYA			; A5B5	$98
	STA $7BC2,X		; A5B6	$9D $C2 $7B	character lower sprite pose ??
L2E5B9:
	RTS			; A5B9	$60
; End of Calc_low_pos

; Name	: Char_pose
; Marks	:
Char_pose:
	JSR Init_char_spritep	; A5BA	$20 $8B $9C	Check back/front row, set pointers to char sprite
	LDX #$03		; A5BD	$A2 $03
	STX $10			; A5BF	$86 $10		temp character index
L2E5C1:
	JSR Init_char_x		; A5C1	$20 $02 $A1
	LDA char_x_cpos,X	; A5C4	$BD $CA $7B
	CMP char_x_bpos,X	; A5C7	$DD $D2 $7B
	BEQ L2E5CF		; A5CA	$F0 $03		branch if character current-base X is same
	JSR Draw_pose_buf_x	; A5CC	$20 $80 $A6	set OAM buffer
L2E5CF:
	DEC $10			; A5CF	$C6 $10		temp character index
	LDX $10			; A5D1	$A6 $10		temp character index
	BPL L2E5C1		; A5D3	$10 $EC		loop
	JSR Show_char_pos	; A5D5	$20 $95 $A6	Show character status move graphic
	LDX #$03		; A5D8	$A2 $03
	STX $10			; A5DA	$86 $10
L2E5DC:
	LDA char_x_bpos,X	; A5DC	$BD $D2 $7B
	CMP char_x_cpos,X	; A5DF	$DD $CA $7B
	BEQ L2E5EF		; A5E2	$F0 $0B		branch if character current-base X is same
	BCC L2E5EC		; A5E4	$90 $06		branch if character x base < current
	JSR Char_mov_base	; A5E6	$20 $33 $A6
	JMP L2E5EF		; A5E9	$4C $EF $A5
L2E5EC:
	JSR Char_mov_act_A	; A5EC	$20 $22 $A6
L2E5EF:
	DEC $10			; A5EF	$C6 $10
	LDX $10			; A5F1	$A6 $10
	BPL L2E5DC		; A5F3	$10 $E7		loop - for all characters
	JSR Show_char_pos	; A5F5	$20 $95 $A6	Show character status move graphic
	LDX #$03		; A5F8	$A2 $03
	STX $10			; A5FA	$86 $10
L2E5FC:
	JSR Set_char_pose	; A5FC	$20 $78 $A6	character pose calc / copy to OAM
	DEC $10			; A5FF	$C6 $10
	LDX $10			; A601	$A6 $10
	BPL L2E5FC		; A603	$10 $F7		loop - for all characters
	LDX cur_char_idx	; A605	$A6 $9E
	CPX #$04		; A607	$E0 $04
	BCC L2E615		; A609	$90 $0A
	JSR Rst_all_act_OAM_buf	; A60B	$20 $E7 $9D
	LDA #$00		; A60E	$A9 $00
	STA $43			; A610	$85 $43
	JMP L2E61D		; A612	$4C $1D $A6
L2E615:
	LDX cur_char_idx	; A615	$A6 $9E
	JSR Char_mov_act	; A617	$20 $20 $A6
	JSR Set_char_pose_idx	; A61A	$20 $76 $A6
L2E61D:
	JMP Show_char_pos	; A61D	$4C $95 $A6	Show character status move graphic
; End of Char_pose

;////////// temporary variables //////////
char_mov_x_dest	= $11
char_idx_tmp	= $12
char_mov_dir	= $13
act_mov_back	= $00
act_mov_front	= $80
act_pos_x	= $C0

; Name	: Char_mov_act
; X	: character idx
; Marks	: character move to action position (C0h)
Char_mov_act:
	LDA #act_pos_x		; A620	$A9 $C0
; Name	: Char_mov_act_A
; A	: Move position
; Marks	:
Char_mov_act_A:
	STA $11			; A622	$85 $11
	STX char_idx_tmp	; A624	$86 $12
	LDA #act_mov_front	; A626	$A9 $80
	STA char_mov_dir	; A628	$85 $13
	JSR Walk_motion		; A62A	$20 $47 $A6	loop subroutine
	JSR Draw_pose_buf	; A62D	$20 $7E $A6	graphics calc (init pose)
	JMP Show_char_pos	; A630	$4C $95 $A6	Show character status move graphic
; End of Char_mov_act_A
; End of Char_mov_act

; Name	: Char_mov_base
; X	: character idx
; Marks	: character move to base position
Char_mov_base:
	STX char_idx_tmp	; A633	$86 $12
	LDA char_x_bpos,X	; A635	$BD $D2 $7B
	STA $11			; A638	$85 $11
	LDA #act_mov_back	; A63A	$A9 $00
	STA char_mov_dir	; A63C	$85 $13
	JSR Walk_motion		; A63E	$20 $47 $A6	loop subroutine
	JSR Set_char_pose_idx	; A641	$20 $76 $A6	graphics calc (init pose)
	JMP Show_char_pos	; A644	$4C $95 $A6	Show status move graphic
; End of Char_mov_base

; Name	: Walk_motion
; Marks	:
Walk_motion:
	JSR Draw_pose_buf	; A647	$20 $7E $A6	OAM buffer process ?? (character pose ??)
Walk_motion_loop:
	JSR Show_char_pos	; A64A	$20 $95 $A6	Show character status move graphic
	LDX char_idx_tmp	; A64D	$A6 $12
	LDA char_x_cpos,X	; A64F	$BD $CA $7B
	CMP $11			; A652	$C5 $11
	BEQ L2E673		; A654	$F0 $1D		if $11==$7BCA,X break loop
	LDA char_mov_dir	; A656	$A5 $13
	JSR Calc_mov_pos	; A658	$20 $12 $A5	walk move ??
	LDX char_idx_tmp	; A65B	$A6 $12
	LDY $7BA2,X		; A65D	$BC $A2 $7B	character graphics type
	CPY #$02		; A660	$C0 $02		toad
	BNE L2E66D		; A662	$D0 $09
	LDY char_mov_dir	; A664	$A4 $13
	BMI L2E66D		; A666	$30 $05
	ORA #$80		; A668	$09 $80
	STA $7BC2,X		; A66A	$9D $C2 $7B	character lower sprite pose ???
L2E66D:
	JSR Draw_char		; A66D	$20 $3A $A4	character graphics OAM buffer calc(walk motion)
	JMP Walk_motion_loop	; A670	$4C $4A $A6	loop - walk to destination
L2E673:
	JMP Show_char_pos	; A673	$4C $95 $A6	Show character status move graphic
; End of Walk_motion

; Name	: Set_char_pose_idx
; Marks	:
Set_char_pose_idx:
	LDX char_idx_tmp	; A676	$A6 $12
; Name	: Set_char_pose
; X	: character index ??
; Marks	:
Set_char_pose:
	JSR Set_char_low_pos	; A678	$20 $FD $AB
	JMP Draw_char		; A67B	$4C $3A $A4	calc pose and copy to OAM buffer(init pose ??)
; End of Set_char_pose(_idx)

; Name	: Draw_pose_buf
; Marks	: Draw init character pose to OAM buffer
Draw_pose_buf:
	LDX char_idx_tmp	; A67E	$A6 $12
; Name	: Draw_pose_buf_x
; X	: character index
; Marks	: Init somethin ?? OAM set, character OAM address start from $02A0
;	  Draw init character pose to OAM buffer with X(character index)
Draw_pose_buf_x:
	LDA #$00		; A680	$A9 $00
	STA $7BD6,X		; A682	$9D $D6 $7B
	STA $7BDA,X		; A685	$9D $DA $7B
	LDA #$01		; A688	$A9 $01		stand pose ??
	STA $7BC2,X		; A68A	$9D $C2 $7B	character lower sprite pose ???
	LDA #$02		; A68D	$A9 $02
	STA $7BC6,X		; A68F	$9D $C6 $7B
	JMP Draw_char		; A692	$4C $3A $A4	calc pose and copy to OAM buffer(init pose ??)
; End of Draw_pose_buf_x
; End of Draw_pose_buf

; Name	: Show_char_pos
; Marks	: Show status move graphic
Show_char_pos:
	BIT $43			; A695	$24 $43
	BMI L2E69C		; A697	$30 $03
	JMP Apply_OAM		; A699	$4C $2A $9E
; End of Show_char_pos
L2E69C:
	JSR Status_ani		; A69C	$20 $CB $AF
	JMP Wait_NMI_end	; A69F	$4C $46 $FD
; End of Show_char_pos

; Name	: Chk_mag_target
; Marks	: $80
;	  $00,$01,$02,$03,$04 = Spell target
Chk_mag_target:
	LDX #$04		; A6A2	$A2 $04
L2E6A4:
	LDA Spell_target,X	; A6A4	$BD $50 $93
	STA $00,X		; A6A7	$95 $00
	DEX			; A6A9	$CA
	BPL L2E6A4		; A6AA	$10 $F8		loop
	LDA #$00		; A6AC	$A9 $00
	STA $0C			; A6AE	$85 $0C
	STA $0D			; A6B0	$85 $0D
	STA $0E			; A6B2	$85 $0E
	LDA #$FF		; A6B4	$A9 $FF
	STA $0B			; A6B6	$85 $0B
	LDY #$2A		; A6B8	$A0 $2A		battle command
	LDA ($80),Y		; A6BA	$B1 $80
	BEQ L2E6D0		; A6BC	$F0 $12		branch if command is normal fight attack
	TAX			; A6BE	$AA
L2E6BF:
	ROR $04			; A6BF	$66 $04
	ROR $03			; A6C1	$66 $03
	ROR $02			; A6C3	$66 $02
	ROR $01			; A6C5	$66 $01
	ROR $00			; A6C7	$66 $00
	DEX			; A6C9	$CA
	BNE L2E6BF		; A6CA	$D0 $F3		loop
	BCC L2E6D6		; A6CC	$90 $08
	BCS L2E6DC		; A6CE	$B0 $0C
L2E6D0:
	JSR Chk_mob_rows	; A6D0	$20 $F1 $A6
	JMP L2E707		; A6D3	$4C $07 $A7
; target characters
L2E6D6:
	LDA #$00		; A6D6	$A9 $00
	STA $0B			; A6D8	$85 $0B
	BEQ L2E707		; A6DA	$F0 $2B
; target monsters
L2E6DC:
	JSR Chk_mob_alive	; A6DC	$20 $E2 $A6
	JMP L2E707		; A6DF	$4C $07 $A7
; End of Chk_mag_target

; Name	: Chk_mob_alive
; Ret	: $0D = monster id
; Marks	:
Chk_mob_alive:
	LDX #$00		; A6E2	$A2 $00
L2E6E4:
	STX $0D			; A6E4	$86 $0D
	LDA $7B62,X		; A6E6	$BD $62 $7B	monster id in each slot
	BPL L2E6F0		; A6E9	$10 $05
	INX			; A6EB	$E8
	CPX #$08		; A6EB	$E0 $08
	BNE L2E6E4		; A6ED	$D0 $F4		loop
L2E6F0:
	RTS			; A6F0	$60
; End of Chk_mob_alive

; Name	: Chk_mob_rows
; Ret	: $0D = monster id
; Marks	:
Chk_mob_rows:
	LDA #$FF		; A6F1	$A9 $FF
	STA $0E			; A6F3	$85 $0E
	LDX #$07		; A6F5	$A2 $07
L2E6F7:
	STX $0D			; A6F7	$86 $0D
	LDA $7B62,X		; A6F9	$BD $62 $7B	monster id in each slot
	BMI L2E703		; A6FC	$30 $05
	LDA $7B5A,X		; A6FE	$BD $5A $7B	monster rows(0=f,1=b)
	BEQ L2E706		; A701	$F0 $03
L2E703:
	DEX			; A703	$CA
	BPL L2E6F7		; A704	$10 $F1
L2E706:
	RTS			; A706	$60
; End of Chk_mob_rows

L2E707:
	LDA #$00		; A707	$A9 $00
	STA $0F			; A709	$85 $0F
	JSR Set_cursor_to_mob	; A70B	$20 $6F $A8
	JSR Status_ani_NMI_end	; A70E	$20 $4B $A9	update status animation
	LDA $0C			; A711	$A5 $0C
	ORA $0D			; A713	$05 $0D
	AND #$80		; A715	$29 $80
	BEQ L2D71F		; A717	$F0 $06
	JSR Set_cursor_to_mob	; A719	$20 $6F $A8
	JSR Status_ani_NMI_end	; A71C	$20 $4B $A9	update status animation
L2D71F:
	JSR $FC34		; A71F	$20 $34 $FC	update joypad input
	LDA $0B			; A722	$A5 $0B
	BNE L2E72C		; A724	$D0 $06		branch if cursor is on monsters
	JSR Get_player_input	; A726	$20 $DC $A7	get player input (character target)
	JMP L2E72F		; A729	$4C $2F $A7
L2E72C:
	JSR L2E732		; A72C	$20 $32 $A7	get player input (monster target)
L2E72F:
	JMP L2E707		; A72F	$4C $07,$A7	loop
; End of

; Name	:
; Marks	:
L2E732:
	LDA $34			; A732	$A5 $34
	AND #$03		; A734	$29 $03
	BEQ L2E73B		; A736	$F0 $03
	JMP L2E848		; A738	$4C $48 $A8	A or B
;
L2E73B:
	LDA $34			; A73B	$A5 $34
	ASL A			; A73D	$0A
	BCS L2E798		; A73E	$B0 $58
	ASL A			; A740	$0A
	BCS L2E7B3		; A741	$B0 $70
	ASL A			; A743	$0A
	BCS L2E76E		; A744	$B0 $28
	ASL A			; A746	$0A
	BCS L2E74A		; A747	$B0 $01
	RTS			; A749	$60
; End of

L2E74A:
	LDA $0D			; A74A	$A5 $0D
	AND #$0F		; A74C	$29 $0F
	STA $0D			; A74E	$85 $0D
	BEQ L2E765		; A750	$F0 $13
	DEC $0D			; A752	$C6 $0D
	LDX $0D			; A754	$A6 $0D
	LDA $7B62,X		; A756	$BD $62 $7B
	BMI L2E74A		; A759	$30 $EF
	LDA $0E			; A75B	$A5 $0E
	BEQ L2E764		; A75D	$F0 $05
	LDA $7B5A,X		; A75F	$BD $5A $7B
	BNE L2E74A		; A762	$D0 $E6
L2E764:
	RTS			; A764	$60
; End of
L2E765:
	LDA #$88		; A765	$A9 $88
	STA $0D			; A767	$85 $0D
	LDA $0E			; A769	$A5 $0E
	BNE L2E74A		; A76B	$D0 $DD
	RTS			; A76D	$60
; End of
; down button
L2E76E:
	LDA $0D			; A76E	$A5 $0D
	BPL L2E778		; A770	$10 $06
	LDA #$00		; A772	$A9 $00
	STA $0D			; A774	$85 $0D
	BEQ L2E77E		; A776	$F0 $06
L2E778:
	CMP #$07		; A778	$C9 $07
	BCS L2E78F		; A77A	$B0 $13
	INC $0D			; A77C	$E6 $0D
L2E77E:
	LDX $0D			; A77E	$A6 $0D
	LDA $7B62,X		; A780	$BD $62 $7B
	BMI L2E76E		; A783	$30 $E9
	LDA $0E			; A785	$A5 $0E
	BEQ L2E78E		; A787	$F0 $05
	LDA $7B5A,X		; A789	$BD $5A $7B
	BNE L2E76E		; A78C	$D0 $E0
L2E78E:
	RTS			; A78E	$60
L2E78F:
	LDA #$80		; A78F	$A9 $80
	STA $0D			; A791	$85 $0D
	LDA $0E			; A793	$A5 $0E
	BNE L2E76E		; A795	$D0 $D7
	RTS			; A797	$60
; End of
; right button
L2E798:
	LDA $0D			; A798	$A5 $0D
	CMP #$06		; A79A	$C9 $06
	BCS L2E7AA		; A79C	$B0 $0C
	INC $0D			; A79E	$E6 $0D
	INC $0D			; A7A0	$E6 $0D
	LDX $0D			; A7A2	$A6 $0D
	LDA $7B62,X		; A7A4	$BD $62 $7B
	BMI L2E798		; A7A7	$30 $EF
	RTS			; A7A9	$60
L2E7AA:
	LDA #$00		; A7AA	$A9 $00
	STA $0B			; A7AC	$85 $0B
	LDA #$00		; A7AE	$A9 $00
	STA $0C			; A7B0	$85 $0C
	RTS			; A7B2	$60
; End of
; left button
L2E7B3:
	LDA $0D			; A7B3	$A5 $0D
	BMI L2E7D0		; A7B5	$30 $19
	CMP #$02		; A7B7	$C9 $02
	BCC L2E7D0		; A7B9	$90 $15
	DEC $0D			; A7BB	$C6 $0D
	DEC $0D			; A7BD	$C6 $0D
	LDX $0D			; A7BF	$A6 $0D
	LDA $7B62,X		; A7C1	$BD $62 $7B
	BMI L2E7B3		; A7C4	$30 $ED
	LDA $0E			; A7C6	$A5 $0E
	BEQ L2E7CF		; A7C8	$F0 $05
	LDA $7B5A,X		; A7CA	$BD $5A $7B
	BNE L2E7B3		; A7CD	$D0 $E4
L2E7CF:
	RTS			; A7CF	$60
; End of
L2E7D0:
	LDA #$00		; A7D0	$A9 $00
	STA $0B			; A7D2	$85 $0B
	LDA $7BDE		; A7D4	$AD $DE $7B
	STA $0C			; A7D7	$85 $0C
	DEC $0C			; A7D9	$C6 $0C
	RTS			; A7DB	$60
; End of

; Name	: Get_player_input
; Marks	: get player input (character target)
Get_player_input:
	LDA $34			; A7DC	$A5 $34
	AND #$03		; A7DE	$29 $03
	BNE L2E848		; A7E0	$D0 $66		A or B
	LDA $34			; A7E2	$A5 $34
	ASL			; A7E4	$0A
	BCS L2E832		; A7E5	$B0 $4B
	ASL			; A7E7	$0A
	BCS L2E83D		; A7E8	$B0 $53
	ASL			; A7EA	$0A
	BCS L2E80F		; A7EB	$B0 $22
	ASL			; A7ED	$0A
	BCS L2E7F1		; A7EE	$B0 $01
	RTS			; A7EF	$60
; End of
; up button
L2E7F1:
	LDA $0C			; A7F1	$A5 $0C
	AND #$07		; A7F3	$29 $07
	STA $0C			; A7F5	$85 $0C
	BEQ L2E7FC		; A7F7	$F0 $03
	DEC $0C			; A7F9	$C6 $0C
	RTS			; A7FB	$60
;
L2E7FC:
	LDA $7BDE		; A7FC	$AD $DE $7B
	CLC			; A7FF	$18
	ADC #$80		; A800	$69 $80
	STA $0C			; A802	$85 $0C
	LDA $0E			; A804	$A5 $0E
	BEQ L2E80E		; A806	$F0 $06
	LDX $7BDE		; A808	$AE $DE $7B
	DEX			; A80B	$CA
	STX $0C			; A80C	$86 $0C
L2E80E:
	RTS			; A80E	$60
; End of
; down button
L2E80F:
	LDA $0C			; A80F	$A5 $0C
	BPL L2E818		; A811	$10 $05
	LDA #$00		; A813	$A9 $00
	STA $0C			; A815	$85 $0C
	RTS			; A817	$60
;
L2E818:
	LDA $7BDE		; A818	$AD $DE $7B
	SEC			; A81B	$38
	SBC #$02		; A81C	$E9 $02
	CMP $0C			; A81E	$C5 $0C
	BCC L2E825		; A820	$90 $03
	INC $0C			; A822	$E6 $0C
	RTS			; A824	$60
L2E825:
	LDA #$80		; A825	$A9 $80
	STA $0C			; A827	$85 $0C
	LDA $0E			; A829	$A5 $0E
	BEQ L2E831		; A82B	$F0 $04
	LDA #$00		; A82D	$A9 $00
	STA $0C			; A82F	$85 $0C
L2E831:
	RTS			; A831	$60
; End of
; right button
L2E832:
	LDA #$FF		; A832	$A9 $FF
	STA $0B			; A834	$85 $0B
	LDA #$80		; A836	$A9 $80
	STA $0D			; A838	$85 $0D
	JMP L2E76E		; A83A	$4C $6E $A7	DOWN
; left button
L2E83D:
	LDA #$FF		; A83D	$A9 $FF
	STA $0B			; A83F	$85 $0B
	LDA #$08		; A841	$A9 $08
	STA $0D			; A843	$85 $0D
	JMP L2E74A		; A845	$4C $4A $A7
; A or B button
L2E848:
	LSR A			; A848	$4A
	BCS L2E84F		; A849	$B0 $04		branch if A button is pressed
	LDA #$FF		; A84B	$A9 $FF		invalid target
	BNE L2E863		; A84D	$D0 $14
L2E84F:
	LDA $0B			; A84F	$A5 $0B
	BNE L2E85B		; A851	$D0 $08		branch if targeting monsters
	LDA $0C			; A853	$A5 $0C
	BPL L2E863		; A855	$10 $0C
	LDA #$08		; A857	$A9 $08		target all characters
	BNE L2E863		; A859	$D0 $08
L2E85B:
	LDA $0D			; A85B	$A5 $0D
	BPL L2E861		; A85D	$10 $02
	LDA #$08		; A85F	$A9 $08		target all mosters
L2E861:
	ORA #$80		; A861	$09 $80
L2E863:
	LDY #$2B		; A863	$A0 $2B
	STA ($80),Y		; A865	$91 $80		set target
	JSR Reset_cursor_sprites	; A867	$20 $06 $9D	reset cursor sprites
	PLA			; A86A	$68
	PLA			; A86B	$68
	JMP Status_ani_NMI_end	; A86C	$4C $4B $A9	update status animation
; End of Get_player_input

; Name	: Set_cursor_to_mob
; Marks	: ??
Set_cursor_to_mob:
	JSR Reset_cursor_sprites; A86F	$20 $06 $9D
	LDA $0B			; A872	$A5 $0B
	BNE L2E895		; A874	$D0 $1F
	LDA #$00		; A876	$A9 $00
	LDX $0C			; A878	$A6 $0C
	BPL Set_OAM_XY		; A87A	$10 $38
	LDA #$00		; A87C	$A9 $00
	STA $0A			; A87E	$85 $0A
L2E880:
	LDX $0F			; A880	$A6 $0F
	CPX $7BDE		; A882	$EC $DE $7B
	BCS L2E894		; A885	$B0 $0D
	JSR Set_OAM_XY		; A887	$20 $B4 $A8
	INC $0F			; A88A	$E6 $0F
	INC $0A			; A88C	$E6 $0A
	LDA $0A			; A88E	$A5 $0A
	CMP #$02		; A890	$C9 $02
	BNE L2E880		; A892	$D0 $EC
L2E894:
	RTS			; A894	$60
; End of
L2E895:
	LDA #$00		; A895	$A9 $00
	LDX $0D			; A897	$A6 $0D
	BPL Get_mob_x		; A899	$10 $5D
	LDA #$00		; A89B	$A9 $00
	STA $0A			; A89D	$85 $0A
L2E89F:
	LDX $0F			; A89F	$A6 $0F
	LDY $7B62,X		; A8A1	$BC $62 $7B	monster id each in slot
	BMI L2E8A9		; A8A4	$30 $03
	JSR Get_mob_x		; A8A6	$20 $F8 $A8
L2E8A9:
	INC $0F			; A8A9	$E6 $0F
	INC $0A			; A8AB	$E6 $0A
	LDA $0A			; ABAD	$A5 $0A
	CMP #$04		; A8AF	$C9 $04
	BNE L2E89F		; A8B1	$D0 $EC
	RTS			; A8B3	$60
; End of Set_cursor_to_mob

; Name	: Set_OAM_XY
; A	:
; Marks	: $08(ADDR) = 
Set_OAM_XY:
L2E8B4:
	STA $02			; A8B4	$85 $02
	LDA $7BA2,X		; A8B6	$BD $A2 $7B	character graphics type
	BEQ L2E8CD		; A8B9	$F0 $12		branch if status is normal
	LDA char_x_cpos,X	; A8BB	$BD $CA $7B
	SEC			; A8BE	$38
	SBC #$10		; A8BF	$E9 $10
	STA $00			; A8C1	$85 $00
	LDA char_y_pos,X	; A8C3	$BD $CE $7B
	CLC			; A8C6	$18
	ADC #$08		; A8C7	$69 $08
	STA $04			; A8C9	$85 $04
	BNE L2E8F3		; A8CB	$D0 $26
L2E8CD:
	LDA $7BC2,X		; A8CD	$BD $C2 $7B
	CMP #$08		; A8D0	$C9 $08
	BNE L2E8E6		; A8D2	$D0 $12
	LDA char_x_cpos,X	; A8D4	$BD $CA $7B
	SEC			; A8D7	$38
	SBC #$18		; A8D8	$E9 $18
	STA $00			; A8DA	$85 $00
	LDA char_y_pos,X	; A8DC	$BD $CE $7B
	CLC			; A8DF	$18
	ADC #$08		; A8E0	$69 $08
	STA $04			; A8E2	$85 $04
	BNE L2E8F3		; A8E4	$D0 $0D
L2E8E6:
	LDA char_x_cpos,X	; A8E6	$BD $CA $7B
	SEC			; A8E9	$38
	SBC #$10		; A8EA	$E9 $10
	STA $00			; A8EC	$85 $00
	LDA char_y_pos,X	; A8EE	$BD $CE $7B
	STA $04			; A8F1	$85 $04
L2E8F3:
	LDA $02			; A8F3	$A5 $02
	JMP L2E915		; A8F5	$4C $15 $A9

; Name	: Get_mob_x
; A	:
; X	: monster index
; Marks	: return if monster x position is greather than 7Fh(minus)
Get_mob_x:
	STA $02			; A8F8	$85 $02
	LDA mob_x_poss,X	; A8FA	$BD $9A $7B
	BPL L2E900		; A8FD	$10 $01
	RTS			; A8FF	$60
; End of Get_mob_x

L2E900:
	ASL A			; A900	$0A
	ASL A			; A901	$0A
	ASL A			; A902	$0A
	SEC			; A903	$38
	SBC #$10		; A904	$E9 $10
	STA $00			; A906	$85 $00
	LDA mob_y_poss,X	; A908	$BD $92 $7B
	ASL A			; A90B	$0A
	ASL A			; A90C	$0A
	ASL A			; A90D	$0A
	STA $04			; A90E	$85 $04
	LDA $02			; A910	$A5 $02
	JMP L2E915		; A912	$4C $15 $A9	?? what are you doing ??
; Marks	:
L2E915:
	ASL A			; A915	$0A
	TAX			; A916	$AA
	LDA $24,X		; A917	$B5 $24		OAM address L ??
	STA $08			; A919	$85 $08
	LDA $25,X		; A91B	$B5 $25		OAM address H ??
	STA $09			; A91D	$85 $09
	LDA $00			; A91F	$A5 $00
	STA $02			; A921	$85 $02
	CLC			; A923	$18
	ADC #$08		; A924	$69 $08
	STA $01			; A926	$85 $01
	STA $03			; A928	$85 $03
	LDA $04			; A92A	$A5 $04
	STA $05			; A92C	$85 $05
	CLC			; A92E	$18
	ADC #$08		; A92F	$69 $08
	STA $06			; A931	$85 $06
	STA $07			; A933	$85 $07
	LDY #$00		; A935	$A0 $00
	LDX #$00		; A937	$A2 $00
L2E939:
	LDA $04,X		; A939	$B5 $04
	STA ($08),Y		; A93B	$91 $08
	INY			; A93D	$C8
	INY			; A93E	$C8
	INY			; A93F	$C8
	LDA $00,X		; A940	$B5 $00
	STA ($08),Y		; A942	$91 $08
	INY			; A944	$C8
	INX			; A945	$E8
	CPY #$10		; A946	$C0 $10
	BNE L2E939		; A948	$D0 $EF		loop
	RTS			; A94A	$60
; End of

; Name	: Status_ani_NMI_end
; Marks	:
Status_ani_NMI_end:
	JSR Status_ani		; A94B	$20 $CB $AF
	JMP Wait_NMI_end	; A94E	$4C $46 $FD
; End of Status_ani_NMI_end

;-------------------------------------------------------------------

; Name	: Mob_dead
; Marks	: Monster dead(eliminate) process and animation
Mob_dead:
	LDA #$03		; A951	$A9 $03
	STA $A5			; A953	$85 $A5
	JSR Mob_dead_ani	; A955	$20 $70 $A9
	LDY #$08		; A958	$A0 $08		status 1
	LDA ($A1),Y		; A95A	$B1 $A1
	ORA #$80		; A95C	$09 $80		dead
	STA ($A1),Y		; A95E	$91 $A1
	LDY #$2B		; A960	$A0 $2B		target
	LDA ($9F),Y		; A962	$B1 $9F
	AND #$7F		; A964	$29 $7F
	TAX			; A966	$AA
	LDA #$FF		; A967	$A9 $FF
	STA $7B62,X		; A969	$9D $62 $7B	monster id each slot
	DEC $7B4D		; A96C	$CE $4D $7B	decrement number of monsters remaining
	RTS			; A96F	$60
; End of Mob_dead

; Name	: Mob_dead_ani
; Marks	: $27 = ??
Mob_dead_ani:
	LDA $27			; A970	$A5 $27		target id ??
	PHA			; A972	$48
	JSR Dead_ani		; A973	$20 $7A $A9
	PLA			; A976	$68
	STA $27			; A977	$85 $27		target id ??
	RTS			; A979	$60
; End of Mob_dead_ani

; Name	: Dead_ani
; SRC	: $A5 = ??
; X	: monster index ??
; Marks	: $04,$05,$06,$07,$08,$09
;	  $20-$2B = OAM buffer address ??(each 2 bytes)
;	  $10 = last sequence value
;	  $11 = temp loop counter
Dead_ani:
	STX $00			; A97A	$86 $00
	LDA $A5			; A97C	$A5 $A5
	BNE L2E981		; A97E	$D0 $01
	RTS			; A980	$60
; End of Dead_ani
L2E981:
	LDY #$04		; A981	$A0 $04
	LDX #$18		; A983	$A2 $18
	JSR Reset_pal		; A985	$20 $42 $97	reset sprite_2 palettes
	JSR Apply_OAM_pal	; A988	$20 $33 $9E
	LDX $00			; A98B	$A6 $00
	LDA mob_x_poss,X	; A98D	$BD $9A $7B
	STA $04			; A990	$85 $04
	ASL A			; A992	$0A
	ASL A			; A993	$0A
	ASL A			; A994	$0A
	STA $08			; A995	$85 $08
	LDA mob_y_poss,X	; A997	$BD $92 $7B
	STA $05			; A99A	$85 $05
	ASL A			; A99C	$0A
	ASL A			; A99D	$0A
	ASL A			; A99E	$0A
	SEC			; A99F	$38
	SBC #$01		; A9A0	$E9 $01
	STA $09			; A9A2	$85 $09
	LDA mob_widths,X	; A9A4	$BD $8A $7B
	STA $06			; A9A7	$85 $06
	LDA mob_heights,X	; A9A9	$BD $82 $7B
	STA $07			; A9AC	$85 $07
	JSR Rst_all_act_OAM_buf	; A9AE	$20 $E7 $9D
	LDX $00			; A9B1	$A6 $00
	LDA mob_gfx_id,X	; A9B3	$BD $72 $7B	monster graphics id
	CMP #$09		; A9B6	$C9 $09
	BCC L2E9BD		; A9B8	$90 $03		branch if monster size is small
	JMP Dead_ani_big_mob	; A9BA	$4C $DB $AA
L2E9BD:
	LDA #$10		; A9BD	$A9 $10		small size monster
	STA $20			; A9BF	$85 $20
	LDA #$02		; A9C1	$A9 $02
	STA $21			; A9C3	$85 $21
	LDY #$00		; A9C5	$A0 $00
	LDX #$00		; A9C7	$A2 $00
L2E9C9:
	LDA $20,X		; A9C9	$B5 $20		$20 = 10 - OAM buffer address ??(ex> +$20=0210h)
	CLC			; A9CB	$18
	ADC #$18		; A9CC	$69 $18
	STA $22,X		; A9CE	$95 $22		$22 = 28h, $24=40h, $26=58h, $28=70h, $2A=88h
	LDA #$02		; A9D0	$A9 $02
	STA $23,X		; A9D2	$95 $23		$23 = 02h, $25=02h, $27=02h, $29=02h, $2B=02h
	INX			; A9D4	$E8
	INX			; A9D5	$E8
	INY			; A9D6	$C8
	CPY #$05		; A9D7	$C0 $05
	BNE L2E9C9		; A9D9	$D0 $EE		loop - make OAM buffer address
	LDA $08			; A9DB	$A5 $08
	STA $00			; A9DD	$85 $00
	LDY #$00		; A9DF	$A0 $00
L2E9E1:
	INY			; A9E1	$C8		set OAM except Y
	LDA #$58		; A9E2	$A9 $58
	STA ($20),Y		; A9E4	$91 $20		OAM INDEX $0211-
	LDA #$59		; A9E6	$A9 $59
	STA ($22),Y		; A9E8	$91 $22		OAM INDEX $0229-
	LDA #$5A		; A9EA	$A9 $5A
	STA ($24),Y		; A9EC	$91 $24		OAM INDEX $0241-
	LDA #$5B		; A9EE	$A9 $5B
	STA ($26),Y		; A9F0	$91 $26		OAM INDEX $0259-
	LDA #$5C		; A9F2	$A9 $5C
	STA ($28),Y		; A9F4	$91 $28		OAM INDEX $0271-
	LDA #$5D		; A9F6	$A9 $5D
	STA ($2A),Y		; A9F8	$91 $2A		OAM INDEX $0289-
	INY			; A9FA	$C8
	LDA #$02		; A9FB	$A9 $02
	STA ($20),Y		; A9FD	$91 $20		OAM ATTR
	STA ($22),Y		; A9FF	$91 $22
	STA ($24),Y		; AA01	$91 $24
	STA ($26),Y		; AA03	$91 $26
	STA ($28),Y		; AA05	$91 $28
	STA ($2A),Y		; AA07	$91 $2A
	INY			; AA09	$C8
	LDA $00			; AA0A	$A5 $00
	STA ($20),Y		; AA0C	$91 $20		OAM X, increase 08h each loop
	STA ($22),Y		; AA0E	$91 $22
	STA ($24),Y		; AA10	$91 $24
	STA ($26),Y		; AA12	$91 $26
	STA ($28),Y		; AA14	$91 $28
	STA ($2A),Y		; AA16	$91 $2A
	CLC			; AA18	$18
	ADC #$08		; AA19	$69 $08
	STA $00			; AA1B	$85 $00
	INY			; AA1D	$C8		Y=04->08->0C->10->14->18
	CPY #$18		; AA1E	$C0 $18
	BNE L2E9E1		; AA20	$D0 $BF
	LDX #$00		; AA22	$A2 $00
	LDY #$00		; AA24	$A0 $00
L2EA26:
	STY $0A,X		; AA26	$94 $0A		$0A=00h,$0B=FFh,$0C=FEh,$0D=FDh,$0E=FCh,$0F=FBh,$10=FAh
	DEY			; AA28	$88
	INX			; AA29	$E8
	CPX #$07		; AA2A	$E0 $07
	BNE L2EA26		; AA2C	$D0 $F8		loop
	LDY $A5			; AA2E	$A4 $A5
	CPY #$03		; AA30	$C0 $03
	BEQ L2EA3B		; AA32	$F0 $07
	DEY			; AA34	$88		Y = 00h->04h or 01h->0Eh
	LDX Snd_dead_eft_tbl,Y	; AA35	$BE $A7 $AB
	JSR Play_snd_eft	; AA38	$20 $72 $9E
L2EA3B:
	LDA #$00		; AA3B	$A9 $00
	STA $12			; AA3D	$85 $12
	LDA #$20		; AA3F	$A9 $20
	STA $13			; AA41	$85 $13		+$12 = $2000(ppu address)
Dead_ani_loop:
	LDA #$04		; AA43	$A9 $04
	STA $14			; AA45	$85 $14
L2EA47:
	JSR Clear_ppu		; AA47	$20 $7D $AB
	DEC $14			; AA4A	$C6 $14
	BNE L2EA47		; AA4C	$D0 $F9		loop - do not need loop ???? wait 4 frame ??
	LDX #$00		; AA4E	$A2 $00
	STX $11			; AA50	$86 $11		temp loop counter
L2EA52:
	LDA $0A,X		; AA52	$B5 $0A
	BMI L2EA6B		; AA54	$30 $15
	ASL A			; AA56	$0A
	ASL A			; AA57	$0A
	ASL A			; AA58	$0A
	ADC $09			; AA59	$65 $09		monster y position(array) ??
	PHA			; AA5B	$48
	TXA			; AA5C	$8A
	ASL A			; AA5D	$0A
	TAX			; AA5E	$AA
	LDA $20,X		; AA5F	$B5 $20		get OAM buffer address
	STA $00			; AA61	$85 $00
	LDA $21,X		; AA63	$B5 $21
	STA $01			; AA65	$85 $01
	PLA			; AA67	$68
	JSR Set_mob_OAM_Y	; AA68	$20 $B8 $AA
L2EA6B:
	INC $11			; AA6B	$E6 $11
	LDX $11			; AA6D	$A6 $11
	CPX #$06		; AA6F	$E0 $06
	BNE L2EA52		; AA71	$D0 $DF		loop
	LDA $10			; AA73	$A5 $10		$10 start value = FAh
	BMI L2EA7C		; AA75	$30 $05
	JSR Calc_mob_pos	; AA77	$20 $C7 $AA	last step ??
	INC $05			; AA7A	$E6 $05
L2EA7C:
	LDX #$00		; AA7C	$A2 $00
	STX $11			; AA7E	$86 $11		temp loop counter
L2EA80:
	LDA $0A,X		; AA80	$B5 $0A
	BMI L2EA98		; AA82	$30 $14
	CMP $07			; AA84	$C5 $07		monster height
	BCC L2EA98		; AA86	$90 $10	
	TXA			; AA88	$8A
	ASL A			; AA89	$0A
	TAX			; AA8A	$AA
	LDA $20,X		; AA8B	$B5 $20
	STA $00			; AA8D	$85 $00
	LDA $21,X		; AA8F	$B5 $21
	STA $01			; AA91	$85 $01
	LDA #$F0		; AA93	$A9 $F0
	JSR Set_mob_OAM_Y	; AA95	$20 $B8 $AA
L2EA98:
	LDX $11			; AA98	$A6 $11
	INC $0A,X		; AA9A	$F6 $0A
	INX			; AA9C	$E8
	STX $11			; AA9D	$86 $11
	CPX #$06		; AA9F	$E0 $06
	BNE L2EA80		; AAA1	$D0 $DD		loop - inc X
	INC $10			; AAA3	$E6 $10		$10 start value = FAh
	LDA $10			; AAA5	$A5 $10
	BMI L2EAAF		; AAA7	$30 $06
	LDA $07			; AAA9	$A5 $07
	CMP $10			; AAAB	$C5 $10
	BCC L2EAB2		; AAAD	$90 $03
L2EAAF:
	JMP Dead_ani_loop	; AAAF	$4C $43 $AA	loop
L2EAB2:
	JSR Rst_all_act_OAM_buf	; AAB2	$20 $E7 $9D
	JMP Apply_OAM		; AAB5	$4C $2A $9E
; End of Dead_ani

; Name	: Set_mob_OAM_Y
; A	: OAM Y
; Marks	: $00(ADDR) = OAM buffer address
Set_mob_OAM_Y:
	LDY #$00		; AAB8	$A0 $00
	LDX #$00		; AABA	$A2 $00
L2EABC:
	STA ($00),Y		; AABC	$91 $00		OAM Y
	JSR Y_inc4		; AABE	$20 $FC $9D
	INX			; AAC1	$E8
	CPX $06			; AAC2	$E4 $06		monster width
	BNE L2EABC		; AAC4	$D0 $F6
	RTS			; AAC6	$60
; End of Set_mob_OAM_Y

; Name	: Calc_mob_pos
; Marks	: $02,$03 = Multi result
Calc_mob_pos:
	LDA $05			; AAC7	$A5 $05		monster y position
	LDX #$20		; AAC9	$A2 $20
	JSR Multi		; AACB	$20 $79 $FC
	LDA $04			; AACE	$A5 $04		monster x position
	ADC $02			; AAD0	$65 $02
	STA $12			; AAD2	$85 $12
	LDA $03			; AAD4	$A5 $03
	ADC #$20		; AAD6	$69 $20
	STA $13			; AAD8	$85 $13
	RTS			; AADA	$60
; End of Calc_mob_pos

; Marks	: big size monster ??
Dead_ani_big_mob:
	LDA mob_gfx_id		; AADB	$AD $72 $7B	monster graphics id
	CMP #$0F		; AADE	$C9 $0F
	BEQ L2EAEE		; AAE0	$F0 $0C		branch if last boss ??
	LDX #$05		; AAE2	$A2 $05
	JSR Play_snd_eft	; AAE4	$20 $72 $9E
	LDA #$07		; AAE7	$A9 $07
	STA $00			; AAE9	$85 $00
	JMP Fade_out_		; AAEB	$4C $7D $9E
; End of Dead_ani
L2EAEE:
	LDA #$40		; AAEE	$A9 $40		last boss ?? - 	play song $00 (silence)
	STA $E0			; AAF0	$85 $E0
	LDX #$06		; AAF2	$A2 $06
	JSR Play_snd_eft	; AAF4	$20 $72 $9E
	JSR Init_gfx_buf	; AAF7	$20 $CF $9D
	LDX #$90		; AAFA	$A2 $90		start index(7690)
	LDY #$70		; AAFC	$A0 $70		size
	LDA #$80		; AAFE	$A9 $80
	STA $00			; AB00	$85 $00
	LDA #$9A		; AB02	$A9 $9A		BANK 09/9A80 (battle animation graphics)
	STA $01			; AB04	$85 $01
	JSR Copy_char_tile	; AB06	$20 $BA $FB
	JSR Set_02_gfxbuf	; AB09	$20 $C6 $9D
	LDA #$E0		; AB0C	$A9 $E0
	STA $04			; AB0E	$85 $04
	LDA #$76		; AB10	$A9 $76
	STA $05			; AB12	$85 $05		+$04 = $76E0
	LDA #$07		; AB14	$A9 $07
	STA $06			; AB16	$85 $06
L2EB18:
	LDA #$00		; AB18	$A9 $00
	STA $00			; AB1A	$85 $00
	LDA #$18		; AB1C	$A9 $18
	STA $01			; AB1E	$85 $01
L2EB20:
	JSR Invert_39h		; AB20	$20 $76 $AB
	JSR Wait_MENUs_NMI	; AB23	$20 $3F $9E
	JSR Copy_ppu_to_buf	; AB26	$20 $95 $AB
	JSR Wait_NMI_end	; AB29	$20 $46 $FD
	LDX #$00		; AB2C	$A2 $00
L2EB2E:
	LDY #$00		; AB2E	$A0 $00
L2EB30:
	LDA $7600,X		; AB30	$BD $00 $76
	AND ($04),Y		; AB33	$31 $04
	STA $7600,X		; AB35	$9D $00 $76
	INX			; AB38	$E8
	INY			; AB39	$C8
	CPY #$10		; AB3A	$C0 $10
	BNE L2EB30		; AB3C	$D0 $F2
	CPX #$80		; AB3E	$E0 $80
	BNE L2EB2E		; AB40	$D0 $EC
	JSR Invert_39h		; AB42	$20 $76 $AB
	JSR Wait_MENU_snd	; AB45	$20 $5B $FD
	JSR Copy_tile_ppu	; AB48	$20 $A2 $9D
	JSR Wait_NMI_end	; AB4B	$20 $46 $FD
	LDA $00			; AB4E	$A5 $00
	CLC			; AB50	$18
	ADC #$80		; AB51	$69 $80
	STA $00			; AB53	$85 $00
	LDA $01			; AB55	$A5 $01
	ADC #$00		; AB57	$69 $00
	STA $01			; AB59	$85 $01
	CMP #$20		; AB5B	$C9 $20
	BNE L2EB20		; AB5D	$D0 $C1
	LDA $04			; AB5F	$A5 $04
	SEC			; AB61	$38
	SBC #$10		; AB62	$E9 $10
	STA $04			; AB64	$85 $04
	LDA #$04		; AB66	$A9 $04
	JSR Gfx_delay		; AB68	$20 $1F $9E	wait 4 frames
	DEC $06			; AB6B	$C6 $06
	BNE L2EB18		; AB6D	$D0 $A9		loop 7 times
	LDA #$00		; AB6F	$A9 $00
	STA $39			; AB71	$85 $39
	JMP Apply_OAM_pal	; AB73	$4C $33 $9E
; End of Dead_ani

; Name	: Invert_39h
; Marks	: $39 = ??, invert bit.0
Invert_39h:
	LDA $39			; AB76	$A5 $39
	EOR #$01		; AB78	$49 $01
	STA $39			; AB7A	$85 $39
	RTS			; AB7C	$60
; End of Invert_39h

; Name	: Clear_ppu
; SRC	: $12=ppu address L, $13=ppu address H, $06=copy to size, +$00 = ppu address
; Marks	: Set ppu data as 00h
Clear_ppu:
	JSR Wait_MENUs_NMI	; AB7D	$20 $3F $9E
	JSR Copy_OAM_dma_	; AB80	$20 $60 $9E
	LDA $12			; AB83	$A5 $12
	STA $00			; AB85	$85 $00
	LDA $13			; AB87	$A5 $13
	STA $01			; AB89	$85 $01
	LDX $06			; AB8B	$A6 $06		monster width
	LDA #$00		; AB8D	$A9 $00
	JSR Set_ppu_data_00	; AB8F	$20 $63 $9D	fill data as 00h
	JMP Wait_NMI_end	; AB92	$4C $46 $FD
; End of Clear_ppu

; Name	: Copy_ppu_to_buf
; Marks	: +$00 = ppu address, size to copy is FFh
;	  Copy ppudata to generic buffer
Copy_ppu_to_buf:
	JSR Set_PpuAddr_00	; AB95	$20 $7E $FD
	LDA $2007		; AB98	$AD $07 $20
	LDY #$00		; AB9B	$A0 $00
Copy_ppu_to_buf_loop:
	LDA $2007		; AB9D	$AD $07 $20
	STA $7600,Y		; ABA0	$99 $00 $76
	INY			; ABA3	$C8
	BPL Copy_ppu_to_buf_loop	; ABA4	$10 $F7
	RTS			; ABA6	$60
; End of Copy_ppu_to_buf

;$ABA7 - data block = sound effect table(only 04h, 0Eh)
Snd_dead_eft_tbl:
.byte $04,$0E

; Name	: Set_wpn_tile_ppu
; A	: Weapon type(property)
; SRC	: $02 = Result L of Multi, $03 = Result H of Multi
; DEST	: $00(ADDR) = tile address
; Marks	: +$00 = tile address
Set_wpn_tile_ppu:
	TAX			; ABA9	$AA
	CPX #$01		; ABAA	$E0 $01
	BCC L2EBAF		; ABAC	$90 $01		branch if fist
	DEX			; ABAE	$CA
L2EBAF:
	CPX #$07		; ABAF	$E0 $07
	BNE L2EBB4		; ABB1	$D0 $01
	INX			; ABB3	$E8
L2EBB4:
	LDA #$40		; ABB4	$A9 $40
	JSR Multi		; ABB6	$20 $79 $FC
	LDA $02			; ABB9	$A5 $02		result(L) of Multi
	STA $00			; ABBB	$85 $00
	LDA #$98		; ABBD	$A9 $98
	ADC $03			; ABBF	$65 $03		result(H) of Multi
	STA $01			; ABC1	$85 $01		BANK 09/9800 (battle animation graphics)
	LDX #$00		; ABC3	$A2 $00		start index(7600)
	LDY #$80		; ABC5	$A0 $80		size
	JSR Copy_char_tile	; ABC7	$20 $BA $FB
	JSR Wait_MENU_snd	; ABCA	$20 $5B $FD
	LDA #$00		; ABCD	$A9 $00
	STA $00			; ABCF	$85 $00
	LDA #$05		; ABD1	$A9 $05
	STA $01			; ABD3	$85 $01		ppu address = $0500 (destination to be copied)
	JSR Set_02_gfxbuf	; ABD5	$20 $C6 $9D
	JSR Copy_tile_ppu	; ABD8	$20 $A2 $9D
	JMP Wait_NMI_end	; ABDB	$4C $46 $FD
; End of Set_wpn_tile_ppu

; Name	: Load_char_gfx
; Marks	: load character graphics
Load_char_gfx:
	LDX target_idx		; ABDE	$A6 $27		target id
	JSR Init_battle_stat	; ABE0	$20 $B4 $9B
	LDX target_idx		; ABE3	$A6 $27
	JSR Set_char_low_pos	; ABE5	$20 $FD $AB
	JSR Lower_sprite	; ABE8	$20 $06 $A3
	LDX target_idx		; ABEB	$A6 $27
	JSR Copy_char_gfx_ppu	; ABED	$20 $65 $A2
	LDY target_idx		; ABF0	$A4 $27
	JSR Init_char_pal_id	; ABF2	$20 $8F $9B
	LDX target_idx		; ABF5	$A6 $27
	JSR Draw_char		; ABF7	$20 $3A $A4
	JMP Apply_OAM		; ABFA	$4C $2A $9E
; End of Load_char_gfx

; Name	: Set_char_low_pos
; X	: character idx
; Marks	:
Set_char_low_pos:
	LDY $7BAE,X		; ABFD	$BC $AE $7B	character pose
	LDA Char_low_pos,Y	; AC00	$B9 $4B $93	battle sound effect ?? xxxxx
	STA $7BC2,X		; AC03	$9D $C2 $7B	character lower sprite pose ??
	RTS			; AC06	$60
; End of Set_char_low_pos

; Name	: Set_char_OAM_buf
; A	: 3Eh or 38h (Index start)
; X	: character index
; Marks	: 2 x 3 tiles OAM[28-33]
;	  Attack pose ??
Set_char_OAM_buf:
	STA $00			; AC07	$85 $00
	LDA $7BB6,X		; AC09	$BD $B6 $7B	character palette id
	STA $01			; AC0C	$85 $01
	LDA char_x_cpos,X	; AC0E	$BD $CA $7B
	STA $02			; AC11	$85 $02
	LDA char_y_pos,X	; AC13	$BD $CE $7B
	STA $03			; AC16	$85 $03
	LDY #$00		; AC18	$A0 $00
	LDA $7BA2,X		; AC1A	$BD $A2 $7B	character graphics type
	BEQ L2EC21		; AC1D	$F0 $02
	LDY #$0C		; AC1F	$A0 $0C
L2EC21:
	LDX #$00		; AC21	$A2 $00
L2EC23:
	CLC			; AC23	$18
	LDA Sprite_Y_tbl,Y	; AC24	$B9 $76 $92
	ADC $03			; AC27	$65 $03		y
	STA $0270,X		; AC29	$9D $70 $02	OAM_Y
	INX			; AC2C	$E8
	LDA $00			; AC2D	$A5 $00
	STA $0270,X		; AC2F	$9D $70 $02	OAM INDEX
	INC $00			; AC32	$E6 $00
	INX			; AC34	$E8
	LDA $01			; AC35	$A5 $01
	STA $0270,X		; AC37	$9D $70 $02	ATTR
	INX			; AC3A	$E8
	CLC			; AC3B	$18
	LDA Sprite_X_tbl,Y	; AC3C	$B9 $64 $92
	ADC $02			; AC3F	$65 $02		X
	STA $0270,X		; AC41	$9D $70 $02	OAM_X
	INX			; AC44	$E8
	INY			; AC45	$C8
	CPX #$18		; AC46	$E0 $18
	BNE L2EC23		; AC48	$D0 $D9		loop
	RTS			; AC4A	$60
; End of Set_char_OAM_buf

; Name	: Atk_char_w_wpn_ani
; A	: attack animation type A/B
; X	: weapon type ?? animation type ?? (01h = Sword, 05h = Bow
; DEST	: $04 = character x position(current), $05 = character y position
; Marks	: $02 = weapon type ??
;	  $03 = attack animation type A/B ?? motion A/B ?? temp
;	  $06 = animation type ?? motion A/B temp
;	  $00(ADDR) = attack subroutine address
;	  make OAM buffer
Atk_char_w_wpn_ani:
	STX $02			; AC4B	$86 $02		weapon type ?? animation type ??
	STA $03			; AC4D	$85 $03
	LDX char_idx_atk	; AC4F	$A6 $26
	LDA char_x_cpos,X	; AC51	$BD $CA $7B
	STA $04			; AC54	$85 $04
	LDA char_y_pos,X	; AC56	$BD $CE $7B
	STA $05			; AC59	$85 $05
	LDX $02			; AC5B	$A6 $02		weapon type ?? animation type ??
	BNE L2EC60		; AC5D	$D0 $01		branch if possible weapon
	RTS			; AC5F	$60
; End of Atk_char_w_wpn_ani
L2EC60:
	DEX			; AC60	$CA
	TXA			; AC61	$8A
	ASL A			; AC62	$0A
	TAX			; AC63	$AA
	LDA Atk_w_wpn_sr_tbl,X	; AC64	$BD $95 $AD
	STA $00			; AC67	$85 $00
	LDA Atk_w_wpn_sr_tbl+1,X; AC69	$BD $96 $AD
	STA $01			; AC6C	$85 $01
.byte $6C,$00,$00
	;JMP ($0000)		; AC6E	$6C $00 $00
; End of Atk_char_w_wpn_ani

; Marks	: Attack with Sword(Slash A/B) from Atk_char_w_wpn_ani
;	  $03 = attack animation type A/B
;	  $06 = inverted attack animation type A/B
; OAM[34-37], PPU ADDR [ $0500-$053F ]
SR_pose_normal:
	LDA $03			; AC71	$A5 $03		attack animation type A/B ??
	AND #$01		; AC73	$29 $01
	EOR #$01		; AC75	$49 $01
	STA $06			; AC77	$85 $06
	JSR Set_idx_attr	; AC79	$20 $64 $AD
	LDA $06			; AC7C	$A5 $06
	EOR #$01		; AC7E	$49 $01
	JSR Set_x_y		; AC80	$20 $3F $AD
	JMP Atk_char_w_wpn_ani_last	; AC83	$4C $19 $AD
; End of Atk_char_w_wpn_ani

SR_AC86:
	LDA $03			; AC86	$A5 $03
	AND #$01		; AC88	$29 $01
	EOR #$01		; AC8A	$49 $01
	STA $06			; AC8C	$85 $06
	JSR Set_idx_attr	; AC8E	$20 $64 $AD
	LDX $06			; AC91	$A6 $06
	INX			; AC93	$E8
	TXA			; AC94	$8A
	JSR Set_x_y		; AC95	$20 $3F $AD
	JMP Atk_char_w_wpn_ani_last	; AC98	$4C $19 $AD
;

; Marks	: Fist
;	  $03 = attack animation type A/B
;	  $04 = char_x_cpos
;	  $05 = char_y_pos
SR_pose_fist:
	LDA $03			; AC9B	$A5 $03
	AND #$01		; AC9D	$29 $01
	BNE L2ECA7		; AC9F	$D0 $06
	LDA #$F0		; ACA1	$A9 $F0
	STA $0288		; ACA3	$8D $88 $02	OAM[34] Y - hide
	RTS			; ACA6	$60
L2ECA7:
	LDA $04			; ACA7	$A5 $04
	SEC			; ACA9	$38
	SBC #$05		; ACAA	$E9 $05
	STA $06			; ACAC	$85 $06		character X temp
	LDA $05			; ACAE	$A5 $05
	CLC			; ACB0	$18
	ADC #$09		; ACB1	$69 $09
	STA $07			; ACB3	$85 $07		character Y temp
	LDA $03			; ACB5	$A5 $03
	AND #$02		; ACB7	$29 $02
	BEQ L2ECBF		; ACB9	$F0 $04
	INC $06			; ACBB	$E6 $06
	INC $06			; ACBD	$E6 $06
L2ECBF:
	LDA $07			; ACBF	$A5 $07
	STA $0288		; ACC1	$8D $88 $02	OAM[34] Y
	LDA #$53		; ACC4	$A9 $53
	STA $0289		; ACC6	$8D $89 $02	OAM[34] INDEX
	LDX char_idx_atk	; ACC9	$A6 $26
	LDA $7BB6,X		; ACCB	$BD $B6 $7B	character palette id
	STA $028A		; ACCE	$8D $8A $02	OAM[34] ATTR
	LDA $06			; ACD1	$A5 $06
	STA $028B		; ACD3	$8D $8B $02	OAM[34] X
	RTS			; ACD6	$60
;

SR_ACD7:
	LDA #$03		; ACD7	$A9 $03
	JSR Set_x_y		; ACD9	$20 $3F $AD
	LDA $03			; ACDC	$A5 $03
	BEQ L2ECE8		; ACDE	$F0 $08
	LDA #$F0		; ACE0	$A9 $F0
	STA $0B			; ACE2	$85 $0B
	STA $0D			; ACE4	$85 $0D
	LDA #$0D		; ACE6	$A9 $0D
L2ECE8:
	JSR Set_idx_attr	; ACE8	$20 $64 $AD
	JMP Atk_char_w_wpn_ani_last	; ACEA	$4C $19 $AD
; End of

; Marks	: Bow
;	  OAM[34-39], PPU ADDR $0500-$057F
;	  $1C = weapon X position temp
;	  $06(L), $07(R) = weapon X postion temp
;	  $1D = weapon Y position temp
;	  $0A, $0B = weapon Y position temp
;	  from Atk_char_w_wpn_ani
SR_pose_bow:
	LDA #$0E		; ACEE	$A9 $0E
	JSR Set_idx_attr	; ACF0	$20 $64 $AD	some OAM calcuration ??
	LDA $1C			; ACF3	$A5 $1C		weapon X position temp
	STA $06			; ACF5	$85 $06
	CLC			; ACF7	$18
	ADC #$08		; ACF8	$69 $08
	STA $07			; ACFA	$85 $07
	LDA $1D			; ACFC	$A5 $1D		weapon Y position temp
	STA $0A			; ACFE	$85 $0A
	STA $0B			; AD00	$85 $0B
	LDY #$10		; AD02	$A0 $10		OAM offset
	LDA #$02		; AD04	$A9 $02		repeat count
	JMP Atk_char_w_wpn_ani_last_	; AD06	$4C $1D $AD
;

SR_AD09:
	LDA $03			; AD09	$A5 $03
	CLC			; AD0B	$18
	ADC #$03		; AD0C	$69 $03
	JSR Set_idx_attr	; AD0E	$20 $64 $AD
	LDA #$01		; AD11	$A9 $01
	JSR Set_x_y		; AD13	$20 $3F $AD
	JMP Atk_char_w_wpn_ani_last	; AD16	$4C $19 $AD
; End of

; Marks	: $00 = repeat count(tile size)
;	  $06, $07, $08, $09 = OAM X
;	  $0A, $0B, $0C, $0D = OAM Y
;	  $0E, $0F, $10, $11 = OAM INDEX
;	  $12, $13, $14, $15 = OAM ATTR
;	  OAM[34-37] = weapon (with character)
Atk_char_w_wpn_ani_last:
	LDY #$00		; AD19	$A0 $00
	LDA #$04		; AD1B	$A9 $04
; A	: repeat count
; Y	: OAM offset
; Marks	:
Atk_char_w_wpn_ani_last_:
	STA $00			; AD1D	$85 $00
	LDX #$00		; AD1F	$A2 $00
L2ED21:
	LDA $0A,X		; AD21	$B5 $0A
	STA $0288,Y		; AD23	$99 $88 $02	OAM[34,35,36,37] Y
	INY			; AD26	$C8
	LDA $0E,X		; AD27	$B5 $0E
	STA $0288,Y		; AD29	$99 $88 $02	OAM[34,35,36,37] INDEX
	INY			; AD2C	$C8
	LDA $12,X		; AD2D	$B5 $12
	STA $0288,Y		; AD2F	$99 $88 $02	OAM[34,35,36,37] ATTR
	INY			; AD32	$C8
	LDA $06,X		; AD33	$B5 $06
	STA $0288,Y		; AD35	$99 $88 $02	OAM[34,35,36,37] X
	INY			; AD38	$C8
	INX			; AD39	$E8
	CPX $00			; AD3A	$E4 $00
	BNE L2ED21		; AD3C	$D0 $E3
	RTS			; AD3E	$60
; End of Atk_char_w_wpn_ani

; Name	: Set_x_y
; A	:
; Marks	: $04, $05 = ADC ??
;	  $06(L), $07(R), $08(L), $09(R) = OAM[34-37] X
;	  $0A(T), $0B(T), $0C(B), $0D(B) = OAM[34-37] Y
Set_x_y:
	ASL A			; AD3F	$0A
	TAX			; AD40	$AA
	LDA OAM_XY,X		; AD41	$BD $AC $93	BANK 0B/93AC
	CLC			; AD44	$18
	ADC $04			; AD45	$65 $04
	STA $06			; AD47	$85 $06
	STA $08			; AD49	$85 $08
	CLC			; AD4B	$18
	ADC #$08		; AD4C	$69 $08
	STA $07			; AD4E	$85 $07
	STA $09			; AD50	$85 $09
	LDA OAM_XY+1,X		; AD52	$BD $AD $93	BANK 0B/93AD
	CLC			; AD55	$18
	ADC $05			; AD56	$65 $05
	STA $0A			; AD58	$85 $0A
	STA $0B			; AD5A	$85 $0B
	CLC			; AD5C	$18
	ADC #$08		; AD5D	$69 $08
	STA $0C			; AD5F	$85 $0C
	STA $0D			; AD61	$85 $0D
	RTS			; AF63	$60
; End of Set_x_y

; Marks	: $02 = weapon type ??
;	  $03 = attack animation type A/B ?? motion A/B ?? temp

; Name	: Set_idx_attr
; A	: Attack with weapon animation index ??
; Marks	: $0E-$11 = OAM INDEX
;	  $12-$15 = OAM ATTR
;	  $00(ADDR) = OAM index 9355-
;	  $02(ADDR) = OAM attribute 93A0-
;	  $02, $03 = result of Multi -> $02(ADDR) = OAM attribute table address
Set_idx_attr:
	LDX #$05		; AD64	$A2 $05
	JSR Multi		; AD66	$20 $79 $FC
	LDA $02			; AD69	$A5 $02
	ADC #<OAM_INDEX_wpn	; AD6B	$69 $55
	STA $00			; AD6D	$85 $00
	LDA $03			; AD6E	$A5 $03
	ADC #>OAM_INDEX_wpn	; AD71	$69 $93		BANK 0B/9355
	STA $01			; AD73	$85 $01
	LDY #$04		; AD75	$A0 $04
	LDA ($00),Y		; AD77	$B1 $00
	ASL A			; AD79	$0A
	ASL A			; AD7A	$0A
	ADC #<OAM_ATTR		; AD7B	$69 $A0
	STA $02			; AD7D	$85 $02
	LDA #>OAM_ATTR		; AD7F	$A9 $93		BANK 0B/93A0
	ADC #$00		; AD81	$69 $00
	STA $03			; AD83	$85 $03
	LDY #$03		; AD85	$A0 $03
L2ED87:
	LDA ($00),Y		; AD87	$B1 $00
.byte $99,$0E,$00
	;STA $000E,Y		; AD89	$99 $0E $00	INDEX
	LDA ($02),Y		; AD8C	$B1 $02
.byte $99,$12,$00
	;STA $0012,Y		; AD8E	$99 $12 $00	ATTR
	DEY			; AD91	$88
	BPL L2ED87		; AD92	$10 $F3		loop
	RTS			; AD94	$60
; End of Set_idx_attr

; $AD95 - data block = jump address[6:0-5] - buffer settings pose with weapon
Atk_w_wpn_sr_tbl:
.word SR_pose_normal		; AD95	$71 $AC		Sword
.word SR_AC86			; AD97	$86 $AC
.word SR_pose_fist		; AD99	$9B $AC
.word SR_ACD7			; AD9B	$D7 $AC
.word SR_pose_bow		; AD9D	$EE $AC		Bow
.word SR_AD09			; AD9F	$09 $AD

.byte $0A

; Name	: Calc_char_addr
; A	: character index (00h, 01h, 02h, 03h)
; Ret	: A
; Marks	: character id to address
;	  00h -> 00h
;	  01h -> 40h
;	  02h -> 80h
;	  03h -> C0h
Calc_char_addr:
	ASL A			; ADA2	$0A
	ASL A			; ADA3	$0A
; Name	: Low_to_high
; A	: input value
; Ret	: A
; Marks	: 00h -> 00h
;	  01h -> 10h
;	  02h -> 20h
;	  03h -> 30h
Low_to_high:
	ASL A			; ADA4	$0A
; Name	: Multi8
; A	: input value
; Ret	: A
; Marks	: 00h -> 00h
;	  01h -> 08h
;	  02h -> 10h
;	  03h -> 18h
Multi8:
	ASL A			; ADA5	$0A
	ASL A			; ADA6	$0A
	ASL A			; ADA7	$0A
	RTS			; ADA8	$60
; End of Multi8
; End of Low_to_high
; End of Calc_char_addr

; Marks	: asl (16-bit)
	ASL			; ADA9	$0A
	ROL $01			; ADAA	$26 $01
; Name	: Multi64
; Ret	: A = low byte, $01 = high byte
; Marks	: ASL 6
Multi64:
	ASL			; ADAC	$0A
	ROL $01			; ADAD	$26 $01
	ASL			; ADAF	$0A
	ROL $01			; ADB0	$26 $01
	ASL			; ADB2	$0A
	ROL $01			; ADB3	$26 $01
	ASL			; ADB5	$0A
	ROL $01			; ADB6	$26 $01
	ASL			; ADB8	$0A
	ROL $01			; ADB9	$26 $01
	ASL			; ADBB	$0A
	ROL $01			; ADBC	$26 $01
	RTS			; ADBE	$0A
; End of Multi64
	
; Name	: Win_celemony
; Marks	: characters run off-screen
Win_celemony:
	LDA Battle_songs+3	; ADBF	$AD $09	$E0	play song (battle win)
	STA $E0			; ADC2	$85 $E0
	LDX #$03		; ADC4	$A2 $03
	STX $10			; ADC6	$86 $10
L2EDC8:
	LDA #$00		; ADC8	$A9 $00
	STA $7BD6,X		; ADCA	$9D $D6 $7B
	STA $7BDA,X		; ADCD	$9D $DA $7B
	LDA $7BAE,X		; ADD0	$BD $AE $7B	character pose
	CMP #$03		; ADD3	$C9 $03
	BCS L2EDDF		; ADD5	$B0 $08
	LDA #$05		; ADD7	$A9 $05
	STA $7BC2,X		; ADD9	$9D $C2 $7B
	JSR Lower_sprite	; ADDC	$20 $06 $A3
L2EDDF:
	DEC $10			; ADDF	$C6 $10
	LDX $10			; ADE1	$A6 $10
	BPL L2EDC8		; ADE3	$10 $E3
	LDA #$03		; ADE5	$A9 $03		repeat 3 times
	STA $11			; ADE7	$85 $11
L2EDE9:
	LDX #$03		; ADE9	$A2 $03
	STX $10			; ADEB	$86 $10
L2EDED:
	JSR Draw_char		; ADED	$20 $3A $A4	draw character
	DEC $10			; ADF0	$C6 $10
	LDX $10			; ADF2	$A6 $10
	BPL L2EDED		; ADF4	$10 $F7
	LDA #$18		; ADF6	$A9 $18		wait 24 frames
	STA $10			; ADF8	$85 $10
L2EDFA:
	JSR Apply_OAM		; ADFA	$20 $2A $9E
	DEC $10			; ADFF	$C6 $10
	BNE L2EDFA		; ADFF	$D0 $F9
	LDX #$03		; AE01	$A2 $03
L2EE03:
	LDA $7BAE,X		; AE03	$BD $AE $7B	character pose
	CMP #$03		; AE06	$C9 $03
	BCS L2EE12		; AE08	$B0 $08
	LDA $7BC2,X		; AE0A	$BD $C2 $7B
	EOR #$04		; AE0D	$49 $04		toggle victory pose
	STA $7BC2,X		; AE0F	$9D $C2 $7B
L2EE12:
	DEX			; AE12	$CA
	BPL L2EE03		; AE13	$10 $EE
	DEC $11			; AE15	$C6 $11
	BNE L2EDE9		; AE17	$D0 $D0
L2EE19:
	LDX #$03		; AE19	$A2 $03
	STX $10			; AE1B	$86 $10
L2EE1D:
	LDA $7BAE,X		; AE1D	$BD $AE $7B
	CMP #$03		; AE20	$C9 $03
	BCS L2EE38		; AE22	$B0 $14
	LDA char_x_cpos,X	; AE24	$BD $CA $7B
	BNE L2EE2E		; AE27	$D0 $05
	STA $7BC2,X		; AE29	$9D $C2 $7B
	BEQ L2EE38		; AE2C	$F0 $0A
L2EE2E:
	LDA #$02		; AE2E	$A9 $02
	STA $7BC6,X		; AE30	$9D $C6 $7B
	LDA #$80		; AE33	$A9 $80		move left
	JSR Calc_mov_pos	; AE35	$20 $12 $A5	move character
L2EE38:
	LDX $10			; AE38	$A6 $10
	JSR Draw_char		; AE3A	$20 $3A $A4	draw character
	DEC $10			; AE3D	$C6 $10
	LDX $10			; AE3F	$A6 $10
	BPL L2EE1D		; AE41	$10 $DA
	JSR Apply_OAM		; AE43	$20 $2A $9E	wait for vblank (menu & oam update)
	LDX #$03		; AE46	$A2 $03
	LDA #$00		; AE48	$A9 $00
	STA $00			; AE4A	$85 $00
L2EE4C:
	LDA $7BAE,X		; AE4C	$BD $AE $7B
	CMP #$03		; AE4F	$C9 $03
	BCS L2EE5A		; AE51	$B0 $07
	LDA char_x_cpos,X	; AE53	$BD $CA $7B
	ORA $00			; AE56	$05 $00
	STA $00			; AE58	$85 $00
L2EE5A:
	DEX			; AE5A	$CA
	BPL L2EE4C		; AE5B	$10 $EF
	LDA $00			; AE5D	$A5 $00
	BNE L2EE19		; AE5F	$D0 $B8
	LDX #$04		; AE61	$A2 $04		hide all sprites except sprite 0
	LDA #$F0		; AE63	$A9 $F0
L2EE65:
	STA $0200,X		; AE65	$9D $00 $02
	INX			; AE68	$E8
	BNE L2EE65		; AE69	$D0 $FA
	JMP Apply_OAM		; AE6B	$4C $2A $9E	wait for vblank (menu & oam update)
; End of Win_celemony

; Name	: Run_away
; Marks	: characters run away
Run_away:
	LDX #$03		; AE6E	$A2 $03
	STX $10			; AE70	$86 $10
L2EE72:
	LDA #$00		; AE72	$A9 $00
	STA $7BD6,X		; AE74	$9D $D6 $7B
	STA $7BDA,X		; AE77	$9D $DA $7B
	LDA $7BAE,X		; AE7A	$BD $AE $7B
	CMP #$03		; AE7D	$C9 $03
	BCS L2EE89		; AE7F	$B0 $08
	LDA #$01		; AE81	$A9 $01
	STA $7BC2,X		; AE83	$9D $C2 $7B
	JSR Draw_char		; AE86	$20 $3A $A4	draw character
L2EE89:
	DEC $10			; AE89	$C6 $10
	LDX $10			; AE8B	$A6 $10
	BPL L2EE72		; AE8D	$10 $E3
	JSR Apply_OAM		; AE8F	$20 $2A $9E	wait for vblank (menu & oam update)
L2EE92:
	LDX #$03		; AE92	$A2 $03
	STX $10			; AE94	$86 $10
L2EE96:
	LDA $7BAE,X		; AE96	$BD $AE $7B
	CMP #$03		; AE99	$C9 $03
	BCS L2EEB5		; AE9B	$B0 $18
	LDA char_x_cpos,X	; AE9D	$BD $CA $7B
	CMP #$F0		; AEA0	$C9 $F0
	BCC L2EEAB		; AEA2	$90 $07
	LDA #$00		; AEA4	$A9 $00
	STA $7BC2,X		; AEA6	$9D $C2 $7B
	BEQ L2EEB5		; AEA9	$F0 $0A
L2EEAB:
	LDA #$02		; AEAB	$A9 $02
	STA $7BC6,X		; AEAD	$9D $C6 $7B
	LDA #$00		; AEB0	$A9 $00		move right
	JSR Calc_mov_pos	; AEB2	$20 $12 $A5	move character
L2EEB5:
	LDX $10			; AEB5	$A6 $10
	JSR Draw_char		; AEB7	$20 $3A $A4	draw character
	DEC $10			; AEBA	$C6 $10
	LDX $10			; AEBC	$A6 $10
	BPL L2EE96		; AEBE	$10 $D6
	LDA #$04		; AEC0	$A9 $04
	STA $00			; AEC2	$85 $00
L2EEC4:
	JSR Apply_OAM		; AEC4	$20 $2A $9E	wait for vblank (menu & oam update)
	DEC $00			; AEC7	$C6 $00
	BNE L2EEC4		; AEC9	$D0 $F9
	LDX #$03		; AECB	$A2 $03
	LDA #$00		; AECD	$A9 $00
	STA $00			; AECF	$85 $00
L2EED1:
	LDA $7BAE,X		; AED1	$BD $AE $7B
	CMP #$03		; AED4	$C9 $03
	BCS L2EEDF		; AED6	$B0 $07
	LDA char_x_cpos,X	; AED8	$BD $CA $7B
	EOR #$F0		; AEDB	$49 $F0
	STA $00			; AEDD	$85 $00
L2EEDF:
	DEX			; AEDF	$CA
	BPL L2EED1		; AEE0	$10 $EF
	LDA $00			; AEE2	$A5 $00
	BNE L2EE92		; AEE4	$D0 $AC
	LDX #$04		; AEE6	$A2 $04
	LDA #$F0		; AEE8	$A9 $F0
L2EEEA:
	STA $0200,X		; AEEA	$9D $00 $02
	INX			; AEED	$E8
	BNE L2EEEA		; AEEE	$D0 $FA
	BEQ L2EF28		; AEF0	$F0 $36		return from battle
; End of Run_away

; Name	: Battle_defeat
; Marks	: battle defeat
;	  Used on BANK 0C
Battle_defeat:
	LDA $7B48		; AEF2	$AD $48 $7B	battle id
	CMP #$7F		; AEF5	$C9 $7F
	BEQ L2EF08		; AEF7	$F0 $0F		branch if intro battle
	LDA Battle_songs+4	; AEF9	$AD $0A $93	play song (game over)
	STA $E0			; AEFC	$85 $E0
L2EEFE:
	JSR Apply_OAM		; AEFE	$20 $2A $9E	wait for vblank (menu & oam update)
	JSR $FC34		; AF01	$20 $34 $FC	update joypad input
	LDA $34			; AF04	$A5 $34
	BEQ L2EEFE		; AF06	$F0 $F6		wait for any keypress
L2EF08:
	JSR Fade_out		; AF08	$20 $79 $9E	fade out palettes
	LDA #$40		; AF0B	$A9 $40		play song $00 (silence)
	STA $E0			; AF0D	$85 $E0
	LDA $7B48		; AF0F	$AD $48 $7B	battle id
	CMP #$7F		; AF12	$C9 $7F
	BEQ L2EF1D		; AF14	$F0 $07		branch if intro battle
	PLA			; AF16	$68
	PLA			; AF17	$68
	PLA			; AF18	$68
	PLA			; AF19	$68
	JMP OnReset		; AF1A	$4C $2E $FE	system reset - defeated(player lose)
; End of Battle_defeat - system reset
L2EF1D:
	LDA #$5A		; AF1D	$A9 $5A		wait 90 frames
	STA $00			; AF1F	$85 $00
L2EF21:
	JSR Apply_OAM		; AF21	$20 $2A $9E	wait for vblank (menu & oam update)
	DEC $00			; AF24	$C6 $00
	BNE L2EF21		; AF26	$D0 $F9		loop
L2EF28:
	JSR Apply_OAM		; AF28	$20 $2A $9E	wait for vblank (menu & oam update)
	PLA			; AF2B	$68
	PLA			; AF2C	$68
	PLA			; AF2D	$68
	PLA			; AF2E	$68
	JMP Ret_to_map		; AF2F	$4C $0F $FA	return from battle
; End of Battle_defeat

; Name	: Set_status_gfx
; Marks	: load status graphics
;	  use BANK 09/9BC0 (status graphics)
;	  $00(ADDR) = ppu address
Set_status_gfx:
	JSR Wait_NMI_end	; AF32	$20 $46 $FD
	JSR Rst_all_act_OAM_buf	; AF35	$20 $E7 $9D
	JSR Init_gfx_buf	; AF38	$20 $CF $9D
	LDX #$03		; AF3B	$A2 $03
	STX $04			; AF3D	$86 $04
L2EF3F:
	LDA $7BA2,X		; AF3F	$BD $A2 $7B	character graphics type
	BMI L2EF6E		; AF42	$30 $2A
	LDA $7BAE,X		; AF44	$BD $AE $7B	character pose
	CMP #$03		; AF47	$C9 $03
	BCS L2EF6E		; AF49	$B0 $23
	LDA #$00		; AF4B	$A9 $00
	STA $01			; AF4D	$85 $01
	LDA $7BB2,X		; AF4F	$BD $B2 $7B	status graphics
	CMP #$FF		; AF52	$C9 $FF
	BEQ L2EF6E		; AF54	$F0 $18
	JSR Multi64		; AF56	$20 $AC $AD	asl6 (16-bit)
	CLC			; AF59	$18
	ADC #$C0		; AF5A	$69 $C0		BANK 09/9BC0 (status graphics)
	STA $00			; AF5C	$85 $00
	LDA $01			; AF5E	$A5 $01
	ADC #$9B		; AF60	$69 $9B
	STA $01			; AF62	$85 $01
	TXA			; AF64	$8A
	JSR Calc_char_addr	; AF65	$20 $A2 $AD	asl6
	TAX			; AF68	$AA
	LDY #$40		; AF69	$A0 $40		size
	JSR Copy_char_tile	; AF6B	$20 $BA $FB	copy sprite graphics to buffer
L2EF6E:
	DEC $04			; AF6E	$C6 $04		next character
	LDX $04			; AF70	$A6 $04
	BPL L2EF3F		; AF72	$10 $CB
	JSR Wait_MENU_snd	; AF74	$20 $5B $FD
	LDA #$80		; AF77	$A9 $80
	STA $00			; AF79	$85 $00
	LDA #$03		; AF7B	$A9 $03
	STA $01			; AF7D	$85 $01
	JSR Set_02_gfxbuf	; AF7F	$20 $C6 $9D
	JSR Copy_tile_ppu	; AF82	$20 $A2 $9D	copy 8 tiles to ppu
	JSR Wait_NMI_end	; AF85	$20 $46 $FD
	JSR Wait_MENU_snd	; AF88	$20 $5B $FD
	LDA #$00		; AF8B	$A9 $00
	STA $00			; AF8D	$85 $00
	LDA #$04		; AF8F	$A9 $04
	STA $01			; AF91	$85 $01
	JSR Set_02_gfxbuf	; AF93	$20 $C6 $9D
	SEC			; AF96	$38
	ROR $02			; AF97	$66 $02
	JSR Copy_tile_ppu	; AF99	$20 $A2 $9D	copy 8 tiles to ppu
	JSR Wait_NMI_end	; AF9C	$20 $46 $FD
	LDY #$19		; AF9F	$A0 $19		sprite palette 2
	LDX #$7C		; AFA1	$A2 $7C
	JSR Set_wpn_pal		; AFA3	$20 $03 $FC
	LDX #$03		; AFA6	$A2 $03
L2EFA8:
	TXA			; AFA8	$8A
	ASL A			; AFA9	$0A
	ASL A			; AFAA	$0A
	PHA			; AFAB	$48
	ASL A			; AFAC	$0A
	TAY			; AFAD	$A8
	PLA			; AFAE	$68
	CLC			; AFAF	$18
	ADC #$38		; AFB0	$69 $38
	STA $0281,Y		; AFB2	$99 $81 $02	OAM buffer ??
	INY			; AFB5	$C8
	INY			; AFB6	$C8
	INY			; AFB7	$C8
	INY			; AFB8	$C8
	ADC #$01		; AFB9	$69 $01
	STA $0281,Y		; AFBB	$99 $81 $02	OAM buffer ??
	DEX			; AFBE	$CA
	BPL L2EFA8		; AFBF	$10 $E7
	LDA #$80		; AFC1	$A9 $80
	STA $43			; AFC3	$85 $43
	JSR Apply_OAM_pal	; AFC5	$20 $33 $9E
	JMP Wait_MENU_snd	; AFC8	$4C $5B $FD
; End of Set_status_gfx

; Name	: Status_ani
; Marks	: $00(ADDR) = OAM address ??
;	  Check all character status/frame counter
;	  Copy OAM buffer to PPU
;	  Status graphics ?? (2 OAM)
;	  1st character = $0280-$0287
;	  2nd character = $0288-$028F
;	  3rd character = $0290-$0297
;	  4th character = $0298-$029F
;	  update status animation
Status_ani:
	JSR Wait_MENU_snd	; AFCB	$20 $5B $FD
	LDA #$80		; AFCE	$A9 $80
	STA $00			; AFD0	$85 $00		$00(ADDR) = $0280
	LDA #$02		; AFD2	$A9 $02
	STA $01			; AFD4	$85 $01
	LDX #$03		; AFD6	$A2 $03
L2EFD8:
	LDY #$0A		; AFD8	$A0 $0A
	LDA $7BB2,X		; AFDA	$BD $B2 $7B	status graphics ??
	CMP #$06		; AFDD	$C9 $06
	BNE L2EFE3		; AFDF	$D0 $02		if A != 06h
	LDY #$05		; AFE1	$A0 $05
L2EFE3:
	STY $06			; AFE3	$84 $06
	LDA $7BDF,X		; AFE5	$BD $DF $7B	frame counter for status animation ??
	CMP $06			; AFE8	$C5 $06
	BCC L2F048		; AFEA	$90 $5C
	LDA #$00		; AFEC	$A9 $00		counter reset ??
	STA $7BDF,X		; AFEE	$9D $DF $7B	frame counter for status animation ??
	LDA char_x_cpos,X	; AFF1	$BD $CA $7B
	STA $02			; AFF4	$85 $02
	LDA #$F0		; AFF6	$A9 $F0
	LDY $7BA2,X		; AFF8	$BC $A2 $7B	character graphics type (hidden if msb set)
	BNE L2F014		; AFFB	$D0 $17
	LDY $7BB2,X		; AFFD	$BC $B2 $7B
	BMI L2F014		; B000	$30 $12
	LDA char_y_pos,X	; B002	$BD $CE $7B
	CPY #$00		; B005	$C0 $00
	BNE L2F00B		; B007	$D0 $02
	ADC #$0C		; B009	$69 $0C
L2F00B:
	SEC			; B00B	$38
	SBC #$04		; B00C	$E9 $04
	CPY #$06		; B00E	$C0 $06
	BNE L2F014		; B010	$D0 $02
	SBC #$04		; B012	$E9 $04
L2F014:
	STA $03			; B014	$85 $03
	TXA			; B016	$8A
	ASL A			; B017	$0A
	ASL A			; B018	$0A
	ASL A			; B019	$0A
	TAY			; B01A	$A8
	LDA #$02		; B01B	$A9 $02		for OAM 16 x 8 ?? (2 OAM)
	STA $04			; B01D	$85 $04
L2F01F:
	LDA $03			; B01F	$A5 $03
	STA ($00),Y		; B021	$91 $00		OAM Y
	INY			; B023	$C8
	LDA ($00),Y		; B024	$B1 $00		INDEX
	EOR #$02		; B026	$49 $02
	STA ($00),Y		; B028	$91 $00		INDEX
	INY			; B02A	$C8
	LDA #$02		; B02B	$A9 $02
	STA ($00),Y		; B02D	$91 $00		ATTR
	INY			; B02F	$C8
	LDA $02			; B030	$A5 $02
	STA ($00),Y		; B032	$91 $00		OAM X
	CLC			; B034	$18
	ADC #$08		; B035	$69 $08
	STA $02			; B037	$85 $02
	INY			; B039	$C8
	DEC $04			; B03A	$C6 $04
	BNE L2F01F		; B03C	$D0 $E1		loop
	LDA $7BB2,X		; B03E	$BD $B2 $7B	status graphics (FFh = none)
	CMP #$06		; B041	$C9 $06		status graphics (06: confused)
	BNE L2F048		; B043	$D0 $03
	JSR Status_conf_ani	; B045	$20 $51 $B0
L2F048:
	INC $7BDF,X		; B048	$FE $DF $7B	frame conter for status animation
	DEX			; B04B	$CA
	BPL L2EFD8		; B04C	$10 $8A		loop - for all characters
	JMP Copy_OAM		; B04E	$4C $4E $9E
; End of Status_ani

; Name	: Status_conf_ani
; Marks	: $00(ADDR) = ??
Status_conf_ani:
	TXA			; B051	$8A
	JSR Low_to_high		; B052	$20 $A4 $AD
	STA $02			; B055	$85 $02
	TXA			; B057	$8A
	JSR Multi8		; B058	$20 $A5 $AD
	CLC			; B05B	$18
	ADC $02			; B05C	$65 $02
	ADC #$31		; B05E	$69 $31
	TAY			; B060	$A8
	LDA ($00),Y		; B061	$B1 $00
	EOR #$02		; B063	$49 $02
	STA ($00),Y		; B065	$91 $00
	JSR Y_inc4		; B067	$20 $FC $9D
	LDA ($00),Y		; B06A	$B1 $00
	EOR #$02		; B06C	$49 $02
	STA ($00),Y		; B06E	$91 $00
	RTS			; B070	$60
; End of Status_conf_ani

; Name	: Attack
; Marks	: show attack animation (very long subroutine)
;	  $1E = right hand weapon type(property)
;	  $1F = left hand weapon type(property)
;	  $20,$21 = action type on each hand ?? (knife==01h,)
;	  $22 = current processing l/r hand ??
;	  $2B = ??
Attack:
	JSR Wait_NMI_end	; B071	$20 $46 $FD
	LDX char_idx_atk	; B074	$A6 $26
	CPX #$04		; B076	$E0 $04
	BCC L2F07D		; B078	$90 $03		branch if attacker is player
	JMP Attack_mob_to_char	; B07A	$4C $E8 $B0
L2F07D:
	LDA $2B			; B07D	$A5 $2B
	BNE L2F0E5		; B07F	$D0 $64
	LDX char_idx_atk	; B081	$A6 $26
	JSR Char_mov_act	; B083	$20 $20 $A6
	JSR Check_lr_wpn	; B086	$20 $69 $B4	Check weapon and weapon action type
	LDX #$01		; B089	$A2 $01
L2F08B:
	STX $22			; B08B	$86 $22		loop counter ?? l/r hand ??
	LDA $20,X		; B08D	$B5 $20		weapon action type
	BEQ L2F0D0		; B08F	$F0 $3F
	TXA			; B091	$8A
	BEQ L2F096		; B092	$F0 $02
	LDA #$0A		; B094	$A9 $0A		left hand ??
L2F096:
	CLC			; B096	$18
	ADC $20,X		; B097	$75 $20		weapon action type
	TAY			; B099	$A8
	LDA Wpn_prop_A,Y	; B09A	$B9 $E6 $93
	STA $06			; B09D	$85 $06
	LDA Wpn_prop_B,Y	; B09F	$B9 $EB $93
	STA $07			; B0A2	$85 $07
	LDX char_idx_atk	; B0A4	$A6 $26		X = character index
	LDA $7BA2,X		; B0A6	$BD $A2 $7B	character graphics type
	BEQ L2F0B2		; B0A9	$F0 $07		branch if normal status
	LDX #$02		; B0AB	$A2 $02
	STX $06			; B0AD	$86 $06
	INX			; B0AF	$E8
	STX $07			; B0B0	$86 $07
L2F0B2:
	LDX $22			; B0B2	$A6 $22		l/r hand
	LDA $20,X		; B0B4	$B5 $20
	JSR Set_tile_to_ppu	; B0B6	$20 $BD $A2
	LDX $22			; B0B9	$A6 $22
	LDA $1E,X		; B0BB	$B5 $1E
	LDY $20,X		; B0BD	$B4 $20
	CPY #$04		; B0BF	$C0 $04
	BNE L2F0C5		; B0C1	$D0 $02		branch if attack action type is not magic
	LDA #$08		; B0C3	$A9 $08
L2F0C5:
	JSR Set_wpn_tile_ppu	; B0C5	$20 $A9 $AB	weapon tile in [ $0500-$057F ]
	LDX $22			; B0C8	$A6 $22		l/r hand ??
	JSR Apply_wpn_pal	; B0CA	$20 $36 $B4
	JSR Attack_char_wpn_ani	; B0CD	$20 $B5 $B4	attack animation 0000 - character with weapon - have subroutine by weapon
L2F0D0:
	LDX $22			; B0D0	$A6 $22		l/r hand ??
	DEX			; B0D2	$CA
	BPL L2F08B		; B0D3	$10 $B6		loop - next hand(left -> right)
	JSR Rst_all_act_OAM_buf	; B0D5	$20 $E7 $9D	Reset ??? OAM[1-39] buffer
	LDX char_idx_atk	; B0D8	$A6 $26
	JSR Draw_char		; B0DA	$20 $3A $A4	check character graphics type - normal pose
	JSR Apply_OAM		; B0DD	$20 $2A $9E
	LDX char_idx_atk	; B0E0	$A6 $26
	JSR Char_mov_base	; B0E2	$20 $33 $A6
L2F0E5:
	JMP Attack_chk_target 	; B0E5	$4C $EB $B0
Attack_mob_to_char:
	JMP Attack_chk_target	; B0E8	$4C $EB $B0
Attack_chk_target:
	LDX target_id_tmp	; B0EB	$A6 $27
	CPX #$04		; B0ED	$E0 $04
	BCC Attack_target_p	; B0EF	$90 $0F		branch if target is player
	LDX char_idx_atk	; B0F1	$A6 $26
	CPX #$04		; B0F3	$E0 $04
	BCC L2F0FD		; B0F5	$90 $06		branch if attacker is player
	LDA #$02		; B0F7	$A9 $02
	STA $20			; B0F9	$85 $20
	STA $21			; B0FB	$85 $21
L2F0FD:
	JMP Attack_last		; B0FD	$4C $84 $B1
; End of Attack
Attack_target_p:
	BIT $28			; B100	$24 $28
	BVC L2F12E		; B102	$50 $2A
	BMI L2F10C		; B104	$30 $06
	JSR Magic_ani		; B106	$20 $F6 $B5
	JMP Apply_OAM_		; B109	$4C $96 $B1
;
L2F10C:
	LDX $24			; B10C	$A6 $24		crit flag
	BNE L2F11B		; B10E	$D0 $0B		branch if normal hit
	LDX #$0D		; B110	$A2 $0D
	JSR Play_snd_eft	; B112	$20 $72 $9E
	JSR Mov_attack_effect	; B115	$20 $31 $B1
	JMP Apply_OAM_		; B118	$4C $96 $B1
;
L2F11B:
	LDX #$0A		; B11B	$A2 $0A
	JSR Play_snd_eft	; B11D	$20 $72 $9E
	LDA #$F0		; B120	$A9 $F0
	STA $11			; B122	$85 $11
	LDA #$04		; B124	$A9 $04
	STA $10			; B126	$85 $10
	JSR Attack_effect	; B128	$20 $4B $B1
	JSR Mov_attack_effect	; B12B	$20 $31 $B1
L2F12E:
	JMP Apply_OAM_		; B12E	$4C $96 $B1
; End of Attack

; Name	: Mov_attack_effect
; Marks	: $17=motion count ??
Mov_attack_effect:
	LDA #$08		; B131	$A9 $08
	STA $17			; B133	$85 $17
L2F135:
	LDX $27			; B135	$A6 $27		target id ??
	LDA char_x_cpos,X	; B137	$BD $CA $7B
	CLC			; B13A	$18
	ADC #$04		; B13B	$69 $04
	STA $11			; B13D	$85 $11
	LDA #$02		; B13F	$A9 $02
	STA $10			; B141	$85 $10
	JSR Attack_effect	; B143	$20 $4B $B1
	DEC $17			; B146	$C6 $17
	BNE L2F135		; B148	$D0 $EB
	RTS			; B14A	$60
; End of Mov_attack_effect

; Name	: Attack_effect
; Marks	: attack with weapon ?? magic ??
;	  $10=move step ??, $11=destination position(X)
;	  $27 = ??
Attack_effect:
	LDX $27			; B14B	$A6 $27		target id ??
	LDA char_x_cpos,X	; B14D	$BD $CA $7B
L2F150:
	STA char_x_cpos,X	; B150	$9D $CA $7B
	JSR Draw_char		; B153	$20 $3A $A4
	JSR Apply_OAM		; B156	$20 $2A $9E
	LDX $27			; B159	$A6 $27
	LDA char_x_cpos,X	; B15B	$BD $CA $7B
	CLC			; B15E	$18
	ADC $10			; B15F	$65 $10
	CMP $11			; B161	$C5 $11
	BNE L2F150		; B163	$D0 $EB		loop
L2F165:
	STA char_x_cpos,X	; B165	$9D $CA $7B
	JSR Draw_char		; B168	$20 $3A $A4
	JSR Apply_OAM		; B16B	$20 $2A $9E
	LDX $27			; B16E	$A6 $27
	LDA char_x_cpos,X	; B170	$BD $CA $7B
	SEC			; B173	$38
	SBC $10			; B174	$E5 $10
	CMP char_x_bpos,X	; B176	$DD $D2 $7B
	BNE L2F165		; B179	$D0 $EA		loop
	STA char_x_cpos,X	; B17B	$9D $CA $7B
	JSR Draw_char		; B17E	$20 $3A $A4
	JMP Apply_OAM		; B181	$4C $2A $9E
Attack_last:
	BIT $28			; B184	$24 $28
	BVC Apply_OAM_J		; B186	$50 $0B		bit 6 is hit ?? hit = 1, miss = 0 ??
	BPL L2F190		; B188	$10 $06
	JSR Weapon_hit_ani	; B18A	$20 $99 $B1	Weapon animation graphics (weapon with monster)
	JMP Apply_OAM_J		; B18D	$4C $93 $B1
L2F190:
	JSR Magic_ani		; B190	$20 $F6 $B5
Apply_OAM_J:
	JMP Apply_OAM_		; B193	$4C $96 $B1
Apply_OAM_:
	JMP Apply_OAM		; B196	$4C $2A $9E
; End of Attack_effect
; End of Attack

lr_hand_tmp	= $18

; Name	: Weapon_hit_ani
; Marks	: $00(ADDR) = $9320 = battle animation graphics
;	  Weapon hit effect animation graphics (weapon with monster)
;	  OAM[28-31] is weapon hit sprite
;	  use BANK 09
;	  Copy weapon hit effect tile to ppu
;	  $00(ADDR) = buffer address to be copied
;	  $18 = loop counter temp
;	  $20,$21 = weapon action type ??
Weapon_hit_ani:
	LDA #$20		; B199	$A9 $20
	STA $00			; B19B	$85 $00
	LDA #$93		; B19D	$A9 $93
	STA $01			; B19F	$85 $01		BANK 09/9320 (battle animation graphics)
	LDX #$00		; B1A1	$A2 $00		start index(offset)
	LDY #$60		; B1A3	$A0 $60		size to copy
	JSR Copy_char_tile	; B1A5	$20 $BA $FB
	JSR Wait_MENU_snd	; B1A8	$20 $5B $FD
	LDA #$40		; B1AB	$A9 $40
	STA $00			; B1AD	$85 $00
	LDA #$04		; B1AF	$A9 $04
	STA $01			; B1B1	$85 $01		ppu address = $0440(destination to be copied)
	LDX #$60		; B1B3	$A2 $60		size to copy
	JSR Apply_OAM_tile	; B1B5	$20 $BA $9D	copy $7600 to ppu $0440
	JSR Wait_NMI_end	; B1B8	$20 $46 $FD
	LDX #$00		; B1BB	$A2 $00
	STX $18			; B1BD	$86 $18
L2F1BF:
	JSR Apply_wpn_pal	; B1BF	$20 $36 $B4
	LDX $18			; B1C2	$A6 $18
	LDA $20,X		; B1C4	$B5 $20		weapon action type ??
	JSR Do_wpn_eft_ani	; B1C6	$20 $D2 $B1	weapon effect animation ??
	INC $18			; B1C9	$E6 $18
	LDX $18			; B1CB	$A6 $18
	CPX #$02		; B1CD	$E0 $02		motion repeat count
	BNE L2F1BF		; B1CF	$D0 $EE		loop
	RTS			; B1D1	$60
; End of Weapon_hit_ani

; Name	: Do_wpn_eft_ani
; A	: 00h = skip(shield ??), 01h = Axe, Staff, 02h = , 03h = , 04h = Bow
; Marks	: weapon effect animation ??
;	  weapon action type 00h is skip animation ??
;	  $04 = effect X position temp
;	  $06 = effect Y position temp
;	  $16 = monster index temp
;	  $17 = repeat count
;	  $0A-$0D = OAM X
;	  $0E-$11 = OAM Y
;	  $19 = mob width ??
;	  $1C = arrow count ??
;	  $1D = repeat count ??
;	  $24 = ??
;	  $28 = ??
;	  $9C = multi hit count ??
Do_wpn_eft_ani:
	TAY			; B1D2	$A8
	BNE L2F1D6		; B1D3	$D0 $01
	RTS			; B1D5	$60
; End of
L2F1D6:
	BIT $28			; B1D6	$24 $28
	BVS L2F1DB		; B1D8	$70 $01
	RTS			; B1DA	$60
L2F1DB:
	DEY			; B1DB	$88
	BNE L2F1E1		; B1DC	$D0 $03
	JMP JB291		; B1DE	$4C $91 $B2	weapon effect animation - Axe, Staff
; End of
L2F1E1:
	DEY			; B1E1	$88
	BNE L2F1E7		; B1E2	$D0 $03
	JMP JB344		; B1E4	$4C $44 $B3	weapon effect animation - ??
L2F1E7:
	JSR Target_to_mob_id	; B1E7	$20 $01 $9E	weapon effect animation - Bow
	STX $16			; B1EA	$86 $16		monster index temp
	LDX #$07		; B1EC	$A2 $07
	LDA #$F0		; B1EE	$A9 $F0		set X, Y to invisible
L2F1F0:
	STA $0A,X		; B1F0	$95 $0A
	DEX			; B1F2	$CA
	BPL L2F1F0		; B1F3	$10 $FB		loop - $11,$10,$0F,$0E,$0D,$0C,$0B,$0A
	LDA #$01		; B1F5	$A9 $01
	STA $1D			; B1F7	$85 $1D
	LDX $9C			; B1F9	$A6 $9C		multi hit count ??
	CPX #$04		; B1FB	$E0 $04
	BCC L2F206		; B1FD	$90 $07
	TXA			; B1FF	$8A
	LSR			; B200	$4A
	LSR 			; B201	$4A
	STA $1D			; B202	$85 $1D
	LDX #$03		; B204	$A2 $03
L2F206:
	STX $1C			; B206	$86 $1C
JB208:
	JSR Apply_OAM		; B208	$20 $2A $9E
	LDX $1C			; B20B	$A6 $1C
	STX $09			; B20D	$86 $09
L2F20F:
	LDY $16			; B20F	$A4 $16		monster index temp
	LDA mob_x_poss,Y	; B211	$B9 $9A $7B
	CLC			; B214	$18
	ADC mob_widths,Y	; B215	$79 $8A $7B
	TAX			; B218	$AA
	ADC #$01		; B219	$69 $01
	JSR Random		; B21B	$20 $11 $FD
	ASL			; B21E	$0A
	ASL			; B21F	$0A
	ASL			; B220	$0A
	LDX $09			; B221	$A6 $09
	STA $0A,X		; B223	$95 $0A
	LDY $16			; B225	$A4 $16		monster index temp
	LDA mob_y_poss,Y	; B227	$B9 $92 $7B
	TAX			; B22A	$AA
	INX			; B22B	$E8
	SEC			; B22C	$38
	ADC mob_heights,Y	; B22D	$79 $82 $7B
	SBC #$02		; B230	$E9 $02
	JSR Random		; B232	$20 $11 $FD
	ASL			; B235	$0A
	ASL			; B236	$0A
	ASL			; B237	$0A
	LDX $09			; B238	$A6 $09
	STA $0E,X		; B23A	$95 $0E
	DEC $09			; B23C	$C6 $09
	BPL L2F20F		; B23E	$10 $CF		loop
	JSR Apply_OAM		; B240	$20 $2A $9E	wait for vblank (menu & oam update)
	LDX $16			; B243	$A6 $16		monster index temp
	LDA mob_widths,X	; B245	$BD $8A $7B
	LSR			; B248	$4A
	STA $19			; B249	$85 $19
	JSR Set_32_39_OAM	; B24B	$20 $D7 $B3
	LDY #$84		; B24E	$A0 $84		offset OAM[33] Y [ $0284- ] hide arrow tail routine
	LDA #$F0		; B250	$A9 $F0		hide effect
Do_wpn_eft_ani_Bow_b_rm:
	JSR Set_OAM_val		; B252	$20 $F9 $9D	set OAM Y value on OAM[33,35,37,39]
	JSR Y_inc4		; B255	$20 $FC $9D	$028C
	CPY #$A4		; B258	$C0 $A4
	BNE Do_wpn_eft_ani_Bow_b_rm	; B25A	$D0 $F6		loop
	LDX #$09		; B25C	$A2 $09
	JSR Play_snd_eft	; B25E	$20 $72 $9E
Do_wpn_eft_ani_Bow_mv:
	JSR Apply_OAM		; B261	$20 $2A $9E	wait for vblank (menu & oam update)
	JSR Arrow_mv		; B264	$20 $25 $B4
	JSR Set_32_39_OAM	; B267	$20 $D7 $B3	show arrow tail
	DEC $19			; B26A	$C6 $19
	BNE Do_wpn_eft_ani_Bow_mv	; B26C	$D0 $F3		loop
	LDY #$80		; B26E	$A0 $80		offset OAM[32] Y [ $0280- ] hide arrow head
	LDA #$F0		; B270	$A9 $F0		hide effect
L2F272:
	JSR Set_OAM_val		; B272	$20 $F9 $9D	set OAM Y value on OAM[32,34,36,38]
	JSR Y_inc4		; B275	$20 $FC $9D
	CPY #$A0		; B278	$C0 $A0
	BNE L2F272		; B27A	$D0 $F6		loop
	JSR Apply_OAM		; B27C	$20 $2A $9E	wait for vblank (menu & oam update)
	LDA #$08		; B27F	$A9 $08
	JSR Gfx_delay		; B281	$20 $1F $9E	wait 8 frames
	DEC $1D			; B284	$C6 $1D
	BEQ L2F28B		; B286	$F0 $03
	JMP JB208		; B288	$4C $08 $B2
L2F28B:
	JSR Rst_act_OAM_buf	; B28B	$20 $E1 $9D
	JMP Apply_OAM		; B28E	$4C $2A $9E	wait for vblank (menu & oam update)
; Weapon effect animation - Axe, Staff
JB291:
	LDA #$00		; B291	$A9 $00
	STA $02			; B293	$85 $02
	LDX #$07		; B295	$A2 $07
	JSR Play_snd_eft	; B297	$20 $72 $9E
L2F29A:
	JSR Rst_act_OAM_buf	; B29A	$20 $E1 $9D
	LDY #$71		; B29D	$A0 $71
	LDX #$00		; B29F	$A2 $00
L2F2A1:
	LDA Oam_index_B461,X	; B2A1	$BD $61 $B4	OAM INDEX(45h, 44h, 44h, 45h)
	JSR Set_OAM_val		; B2A4	$20 $F9 $9D	Set INDEX to OAM[28-31] buffer
	INX			; B2A7	$E8
	CPX #$04		; B2A8	$E0 $04
	BNE L2F2A1		; B2AA	$D0 $F5		loop
	LDY #$72		; B2AC	$A0 $72
	LDX #$00		; B2AE	$A2 $00
L2F2B0:
	LDA Oam_attr_B465,X	; B2B0	$BD $65 $B4	OAM ATTR
	EOR $02			; B2B3	$45 $02
	JSR Set_OAM_val		; B2B5	$20 $F9 $9D	Set ATTR to OAM[28-31] buffer
	INX			; B2B8	$E8
	CPX #$04		; B2B9	$E0 $04
	BNE L2F2B0		; B2BB	$D0 $F3		loop
	LDA #$01		; B2BD	$A9 $01
	LDX #$F8		; B2BF	$A2 $F8
	LDY $02			; B2C1	$A4 $02
	BEQ L2F2C9		; B2C3	$F0 $04
	LDA #$FE		; B2C5	$A9 $FE
	LDX #$08		; B2C7	$A2 $08
L2F2C9:
	STA $03			; B2C9	$85 $03
	STX $05			; B2CB	$86 $05
	JSR Target_to_mob_id	; B2CD	$20 $01 $9E
	LDA mob_widths,X	; B2D0	$BD $8A $7B	monster widths
	LSR A			; B2D3	$4A
	CLC			; B2D4	$18
	ADC $03			; B2D5	$65 $03
	ADC mob_x_poss,X	; B2D7	$7D $9A $7B	monster x positions
	ASL A			; B2DA	$0A
	ASL A			; B2DB	$0A
	ASL A			; B2DC	$0A
	STA $04			; B2DD	$85 $04		effect X position
	LDY #$73		; B2DF	$A0 $73
	LDX #$00		; B2E1	$A2 $00
L2F2E3:
	LDA $04			; B2E3	$A5 $04
	JSR Set_OAM_val		; B2E5	$20 $F9 $9D	Set X to OAM[28-31] buffer
	CLC			; B2E8	$18
	LDA $04			; B2E9	$A5 $04
	ADC $05			; B2EB	$65 $05
	STA $04			; B2ED	$85 $04
	INX			; B2EF	$E8
	CPX #$04		; B2F0	$E0 $04
	BNE L2F2E3		; B2F2	$D0 $EF		loop
	JSR Target_to_mob_id	; B2F4	$20 $01 $9E
	LDA mob_heights,X	; B2F7	$BD $82 $7B	monster heights
	LSR A			; B2FA	$4A
	SEC			; B2FB	$38
	SBC #$02		; B2FC	$E9 $02
	CLC			; B2FE	$18
	ADC mob_y_poss,X	; B2FF	$7D $92 $7B	monster y positions
	ASL A			; B302	$0A
	ASL A			; B303	$0A
	ASL A			; B304	$0A
	STA $06			; B305	$85 $06		effect Y position
	LDY #$70		; B307	$A0 $70
	STY $07			; B309	$84 $07
L2F30B:
	LDA $06			; B30B	$A5 $06
	JSR Set_OAM_val		; B30D	$20 $F9 $9D	Set Y to OAM[28-31] buffer
	CLC			; B310	$18
	ADC #$08		; B311	$69 $08
	STA $06			; B313	$85 $06		effect Y position
	STY $07			; B315	$84 $07		next OAM Y buffer
	JSR Apply_OAM_pal	; B317	$20 $33 $9E
	LDY $07			; B31A	$A4 $07
	CPY #$80		; B31C	$C0 $80
	BNE L2F30B		; B31E	$D0 $EB		loop - visible in order(draw)
	LDY #$70		; B320	$A0 $70
	STY $07			; B322	$84 $07
L2F324:
	LDA #$F0		; B324	$A9 $F0		Remove effect(End of effect)
	JSR Set_OAM_val		; B326	$20 $F9 $9D	Set Y(Reset) to OAM buffer and next
	STY $07			; B329	$84 $07
	JSR Apply_OAM_pal	; B32B	$20 $33 $9E
	LDY $07			; B32E	$A4 $07
	CPY #$80		; B330	$C0 $80
	BNE L2F324		; B332	$D0 $F0		loop - hide in order
	LDA $24			; B334	$A5 $24		crit flag ??
	BEQ L2F343		; B336	$F0 $0B
	LDA $02			; B338	$A5 $02
	EOR #$40		; B33A	$49 $40
	STA $02			; B33C	$85 $02
	BEQ L2F343		; B33E	$F0 $03
	JMP L2F29A		; B340	$4C $9A $B2	loop - critical hit ??
; End of
L2F343:
	RTS			; B343	$60
; End of
JB344:
	LDA #$16		; B344	$A9 $16		orange
	STA $79C1		; B346	$8D $C1 $79	color palette sprite_2.1
	LDA #$26		; B349	$A9 $26		pink
	STA $79C2		; B34B	$8D $C2 $79	color palette sprite_2.2
	LDA #$30		; B34E	$A9 $30		white
	STA $79C3		; B350	$8D $C3 $79	color palette sprite_2.3
	JSR Target_to_mob_id	; B353	$20 $01 $9E
	STX $16			; B356	$86 $16
	LDA $9C			; B358	$A5 $9C
	ASL			; B35A	$0A
	STA $17			; B35B	$85 $17
	BNE L2F360		; B35D	$D0 $01
	RTS			; B35F	$60
L2F360:
	LDX #$08		; B360	$A2 $08
	JSR Play_snd_eft	; B362	$20 $72 $9E
	JSR Rst_act_OAM_buf	; B365	$20 $E1 $9D
	LDX $16			; B368	$A6 $16
	LDA mob_heights,X	; B36A	$BD $82 $7B	monster heights
	JSR Get_rnd_pos		; B36D	$20 $56 $B4
	STA $00			; B370	$85 $00
	LDX $16			; B372	$A6 $16
	LDA mob_y_poss,X	; B374	$BD $92 $7B	monster y positions
	ASL			; B377	$0A
	ASL			; B378	$0A
	ASL			; B379	$0A
	ADC $00			; B37A	$65 $00
	TAX			; B37C	$AA
	LDA $17			; B37D	$A5 $17
	AND #$01		; B37F	$29 $01
	BEQ L2F385		; B381	$F0 $02
	LDX #$F0		; B383	$A2 $F0		OAM Y hide
L2F385:
	TXA			; B385	$8A
	STA $0A			; B386	$85 $0A		OAM[34] (LT) Y
	STA $0B			; B388	$85 $0B		OAM[35] (RT) Y
	CLC			; B38A	$18
	ADC #$08		; B38B	$69 $08		OAM[36] (LB) Y
	STA $0C			; B38D	$85 $0C		OAM[37] (RB) Y
	STA $0D			; B38F	$85 $0D
	LDX $16			; B391	$A6 $16
	LDA mob_widths,X	; B393	$BD $8A $7B	monster widths
	JSR Get_rnd_pos		; B396	$20 $56 $B4
	STA $00			; B399	$85 $00
	LDX $16			; B39B	$A6 $16
	LDA mob_x_poss,X	; B39D	$BD $9A $7B	monster x positions
	ASL			; B3A0	$0A
	ASL			; B3A1	$0A
	ASL			; B3A2	$0A
	ADC $00			; B3A3	$65 $00
	STA $06			; B3A5	$85 $06		OAM[34] (LT) X
	STA $08			; B3A7	$85 $08		OAM[36] (LB) X
	CLC			; B3A9	$18
	ADC #$08		; B3AA	$69 $08
	STA $07			; B3AC	$85 $07		OAM[35] (RT) X
	STA $09			; B3AE	$85 $09		OAM[37] (RB) X
	LDX #$46		; B3B0	$A2 $46		Set tile to OAM[34-37] INDEX
	STX $0E			; B3B2	$86 $0E		OAM[34] (LT) INDEX
	STX $10			; B3B4	$86 $10		OAM[36] (LB) INDEX
	INX			; B3B6	$E8
	STX $0F			; B3B7	$86 $0F		OAM[35] (RT) INDEX
	STX $11			; B3B9	$86 $11		OAM[37] (RB) INDEX
	LDA #$02		; B3BB	$A9 $02
	STA $12			; B3BD	$85 $12		OAM[34] (LT) ATTR
	STA $13			; B3BF	$85 $13		OAM[35] (RT) ATTR
	LDA #$82		; B3C1	$A9 $82
	STA $14			; B3C3	$85 $14		OAM[36] (LB) ATTR
	STA $15			; B3C5	$85 $15		OAM[37] (RB) ATTR
	JSR Atk_char_w_wpn_ani_last	; B3C7	$20 $19 $AD
	JSR Apply_OAM_pal	; B3CA	$20 $33 $9E	wait for vblank (menu, oam & color update)
	LDA #$02		; B3CD	$A9 $02
	JSR Gfx_delay		; B3CF	$20 $1F $9E	wait 2 frames
	DEC $17			; B3D2	$C6 $17
	BNE L2F360		; B3D4	$D0 $8A		loop
	RTS			; B3D6	$60
; End of Do_wpn_eft_ani

; Name	: Set_32_39_OAM
; Marks	: $00 = ATTR, $02,$03 = INDEX, $0A.. = X, $0E.. = Y
;	  $0280-$029F
Set_32_39_OAM:
	LDY #$48		; B3D7	$A0 $48
	LDA #$02		; B3D9	$A9 $02
	LDX target_idx		; B3DB	$A6 $27
	CPX #$04		; B3DD	$E0 $04
	BCS L2F3EA		; B3DF	$B0 $09		branch if target is a monster
	ORA #$40		; B3E1	$09 $40
	STY $03			; B3E3	$84 $03
	INY			; B3E5	$C8
	STY $02			; B3E6	$84 $02
	BNE L2F3EF		; B3E8	$D0 $05
L2F3EA:
	STY $02			; B3EA	$84 $02
	INY			; B3EC	$C8
	STY $03			; B3ED	$84 $03
L2F3EF:
	STA $00			; B3EF	$85 $00
	LDY #$00		; B3F1	$A0 $00
	LDX #$00		; B3F3	$A2 $00
L2F3F5:
	LDA $0E,X		; B3F5	$B5 $0E
	STA $0280,Y		; B3F7	$99 $80 $02	OAM Y
	STA $0284,Y		; B3FA	$99 $84 $02	OAM Y
	LDA $02			; B3FD	$A5 $02
	STA $0281,Y		; B3FF	$99 $81 $02	OAM INDEX
	LDA $03			; B402	$A5 $03
	STA $0285,Y		; B404	$99 $85 $02	OAM INDEX
	LDA $00			; B407	$A5 $00
	STA $0282,Y		; B409	$99 $82 $02	OAM ATTR
	STA $0286,Y		; B40C	$99 $86 $02	OAM ATTR
	LDA $0A,X		; B40F	$B5 $0A
	STA $0283,Y		; B411	$99 $83 $02	OAM X
	CLC			; B414	$18
	ADC #$08		; B415	$69 $08
	STA $0287,Y		; B417	$99 $87 $02	OAM X
	TYA			; B41A	$98
	CLC			; B41B	$18
	ADC #$08		; B41C	$69 $08
	TAY			; B41E	$A8
	INX			; B41F	$E8
	CPX #$04		; B420	$E0 $04
	BNE L2F3F5		; B422	$D0 $D1		next
	RTS			; B424	$60
; End of Set_32_39_OAM

; Name	: Arrow_mv
; Marks	: $0A,$0B,$0C,$0D = arrow OAM X buffer
;	  Arrow move calcurate to OAM X buffer
Arrow_mv:
	LDX #$03		; B425	$A2 $03
Arrow_mv_loop:
	LDA $0A,X		; B427	$B5 $0A
	CMP #$F0		; B429	$C9 $F0
	BEQ Arrow_mv_skip	; B42B	$F0 $05
	SEC			; B42D	$38
	SBC #$08		; B42E	$E9 $08
	STA $0A,X		; B430	$95 $0A
Arrow_mv_skip:
	DEX			; B432	$CA
	BPL Arrow_mv_loop	; B433	$10 $F2
	RTS			; B435	$60
; End of Arrow_mv

; Name	: Apply_wpn_pal
; X	: 00h = right hand, 01h = left hand
; Marks	: BANK 0B/8D88 (weapon palettes offset)
Apply_wpn_pal:
	STX $00			; B436	$86 $00		l/r hand
	LDY $20,X		; B438	$B4 $20		weapon action type ??
	LDX $7CB1		; B43A	$AE $B1 $7C	attack animation palette
	CPY #$04		; B43D	$C0 $04
	BEQ L2F44E		; B43F	$F0 $0D
	LDX $00			; B441	$A6 $00		l/r hand
	LDA $D0,X		; B443	$B5 $D0		right hand weapon temp ??
	SEC			; B445	$38
	SBC #$0A		; B446	$E9 $0A
	BMI L2F453		; B448	$30 $09		if shield or fist
	TAY			; B44A	$A8
	LDX Wpn_pal_ofs,Y	; B44B	$BE $88 $8D	BANK 0B/8D88 (weapon palettes offset)
L2F44E:
	LDY #$19		; B44E	$A0 $19
	JSR Set_wpn_pal		; B450	$20 $03 $FC
L2F453:
	JMP Apply_OAM_pal	; B453	$4C $33 $9E
; End of Apply_wpn_pal

; Name	: Get_rnd_pos
; A	:
; Marks	: Get random value beween 0 to (A-2)
Get_rnd_pos:
	SEC			; B456	$38
	SBC #$02		; B457	$E9 $02
	LDX #$00		; B459	$A2 $00
	JSR Random		; B45B	$20 $11 $FD
	JMP Multi8		; B45E	$4C $A5 $AD	asl3
; End of Get_rnd_pos

; Weapon hit effect sprite
;B461 - data block = OAM index
Oam_index_B461:
.byte $45,$44,$44,$45
;B465 - data block = OAM attribute(Normal, Normal, Normal, H/Y mirror)
Oam_attr_B465:
.byte $02,$02,$02,$C2

; Name	: Check_lr_wpn
; DEST	: $20 = right weapon action type
;	  $21 = left weapon action type
;	  $1E = right hand weapon type(property)
;	  $1F = left hand weapon type(property)
;	  $25 = left/right handed(0=right-handed, 1=left-handed)
; Marks	: Check left/right hand for weapon
;	  and weapon action type each weapon
Check_lr_wpn:
	LDA char_idx_atk	; B469	$A5 $26
	JSR Calc_char_addr	; B46B	$20 $A2 $AD
	TAX			; B46E	$AA
	LDA ch_stats,X		; B46F	$BD $00 $61
	AND #$80		; B472	$29 $80		l/r hand
	STA $25			; B474	$85 $25		l/r hand ??
	LDA $611C,X		; B476	$BD $1C $61	right hand weapon
	SEC			; B479	$38
	SBC #$30		; B47A	$E9 $30
	STA $D0			; B47C	$85 $D0		right hand weapon temp(1st weapon is Buckler:31h)
	LDA $611D,X		; B47E	$BD $1D $61	left hand waepon
	SEC			; B481	$38
	SBC #$30		; B482	$E9 $30
	STA $D1			; B484	$85 $D1		left hand weapon temp
	LDA #$00		; B486	$A9 $00
	STA $20			; B488	$85 $20
	STA $21			; B48A	$85 $21
	BIT $28			; B48C	$24 $28
	BMI L2F495		; B48E	$30 $05
	LDA #$04		; B490	$A9 $04
	STA $20			; B492	$85 $20
	RTS			; B494	$60
; End of Check_lr_wpn
L2F495:
	JSR Weapon_type		; B495	$20 $C7 $FD
	LDX #$01		; B498	$A2 $01		left hand ??
L2F49A:
	LDY $1E,X		; B49A	$B4 $1E
	LDA Wpn_act_type_tbl,Y	; B49C	$B9 $DE $93
	STA $20,X		; B49F	$95 $20
	DEX			; B4A1	$CA
	BPL L2F49A		; B4A2	$10 $F6		loop
	LDA $1E			; B4A4	$A5 $1E		right hand weapon type(property)
	ORA $1F			; B4A6	$05 $1F		left hand weapon type(property)
	CMP #$02		; B4A8	$C9 $02
	BCS L2F4B4		; B4AA	$B0 $08		branch if weapon type is not fist or shield
	LDX #$02		; B4AC	$A2 $02		equipped with a shield or fist
	LDY #$00		; B4AE	$A0 $00
	STX $20			; B4B0	$86 $20		weapon action type 02 is fist
	STY $21			; B4B2	$84 $21
L2F4B4:
	RTS			; B4B4	$60
; End of Check_lr_wpn

;////////// temporary variables //////////
atk_ani_AB_tmp	= $16
gfx_delay_cnt	= $17

; Name	: Attack_char_wpn_ani
; Marks	: Attack animation (character with weapon)
Attack_char_wpn_ani:
	LDX char_idx_atk	; B4B5	$A6 $26
	JSR Rst_char_OAM_buf	; B4B7	$20 $DA $9D
	JSR Rst_act_OAM_buf	; B4BA	$20 $E1 $9D
	STX atk_ani_AB_tmp	; B4BD	$86 $16
	LDA #$04		; B4BF	$A9 $04
	STA gfx_delay_cnt	; B4C1	$85 $17		motion delay count
	LDX $22			; B4C3	$A6 $22		l/r hand(r=0,l=1)
	TXA			; B4C5	$8A
	BEQ L2F4CA		; B4C6	$F0 $02		branch if right hand
	LDA #$05		; B4C8	$A9 $05		attack motion offset(for left hand)
L2F4CA:
	CLC			; B4CA	$18
	ADC $20,X		; B4CB	$75 $20		weapon action type temp ??
	TAX			; B4CD	$AA
	LDY Atk_motion_tbl,X	; B4CE	$BC $DE $B5	weapon action type ??
	BNE L2F4D4		; B4D1	$D0 $01
	RTS			; B4D3	$60
; End of Attack_char_wpn_ani
L2F4D4:
	DEY			; B4D4	$88
	TYA			; B4D5	$98
	ASL A			; B4D6	$0A
	TAX			; B4D7	$AA
	LDA Atk_motion_sr,X	; B4D8	$BD $D4 $B5
	STA $00			; B4DB	$85 $00
	LDA Atk_motion_sr+1,X	; B4DD	$BD $D5 $B5
	STA $01			; B4E0	$85 $01
.byte $6C,$00,$00
	;JMP ($0000)		; B4E2	$6C $00 $00
; End of Attack_char_wpn_ani
; Jump to subroutine

; Name	:
; Marks	:
SR_Normal:	; Sword, Knife, Axe, Mace, Spear attack
	INY			; B4E5	$C8
	STY $19			; B4E6	$84 $19		attack type 2 temp ??
	LDA #$04		; B4E8	$A9 $04		character attack with weapon motion counter
	STA $18			; B4EA	$85 $18		attack motion A/B repeat count
L2F4EC:
	LDX #$00		; B4EC	$A2 $00
	JSR Atk_pose_snd	; B4EE	$20 $AB $B5	attack with weapon pose(A/B) ??
	LDA atk_ani_AB_tmp	; B4F1	$A5 $16		animation A/B ??
	EOR #$01		; B4F3	$49 $01
	STA atk_ani_AB_tmp	; B4F5	$85 $16
	DEC $18			; B4F7	$C6 $18		attack motion A/B repeat count
	BNE L2F4EC		; B3F9	$D0 $F1
	RTS			; B4FB	$60
; End of Attack_char_wpn_ani(Normal attack)

; Name	:
; Marks	:
SR_Fist:	; Fist attack
	INY			; B4FC	$C8
L2F4FD:
	STY $19			; B4FD	$84 $19
	LDA $9C			; B4FF	$A5 $9C
	CLC			; B501	$18
	ADC #$02		; B502	$69 $02
	ASL			; B504	$0A
	STA $18			; B505	$85 $18
L2F507:
	LDX #$01		; B507	$A2 $01
	JSR Atk_pose_snd	; B509	$20 $AB $B5
	INC $16			; B50C	$E6 $16
	DEC $18			; B50E	$C6 $18
	BNE L2F507		; B510	$D0 $F5
	RTS			; B512	$60
; End of Attack_char_wpn_ani(Fist attack)

; Name	:
; Marks	:
SR_Bow:		; Bow attack
	INY			; B513	$C8
	STY $19			; B514	$84 $19
	LDX char_idx_atk	; B516	$A6 $26
	LDA $7BA2,X		; B518	$BD $A2 $7B	character graphics type
	BEQ L2F521		; B51B	$F0 $04
	LDY #$03		; B51D	$A0 $03
	BNE L2F4FD		; B51F	$D0 $DC
L2F521:
	JSR Apply_OAM		; B521	$20 $2A $9E
	LDX char_idx_atk	; B524	$A6 $26
	LDA char_x_cpos,X	; B526	$BD $CA $7B
	SEC			; B529	$38
	SBC #$0C		; B52A	$E9 $0C
	STA $1C			; B52C	$85 $1C		weapon x ??
	LDA char_y_pos,X	; B52E	$BD $CE $7B
	CLC			; B531	$18
	ADC #$04		; B532	$69 $04
	STA $1D			; B534	$85 $1D		weapon y ??
	LDA #$01		; B536	$A9 $01
	STA atk_ani_AB_tmp	; B538	$85 $16
	LDX #$05		; B53A	$A2 $05
	JSR Atk_char_w_wpn_ani	; B53C	$20 $4B $AC	Set OAM buffer
	JSR Atk_pose		; B53F	$20 $AE $B5	character attack pose ready A with weapon ??
	LDA #$00		; B542	$A9 $00
	STA atk_ani_AB_tmp	; B544	$85 $16
	LDA #$08		; B546	$A9 $08
	STA $17			; B548	$85 $17
	LDA $1C			; B54A	$A5 $1C		weapon x ??
	CLC			; B54C	$18
	ADC #$08		; B54D	$69 $08
	STA $1C			; B54F	$85 $1C
	LDX #$05		; B551	$A2 $05
	JSR Atk_char_w_wpn_ani	; B553	$20 $4B $AC	Set OAM buffer
	JSR Atk_pose		; B556	$20 $AE $B5	character attack pose ready B with weapon ??
	LDX #$02		; B559	$A2 $02		sound effect number = 02h
	JSR Play_snd_eft	; B55B	$20 $72 $9E
	LDA #$01		; B55E	$A9 $01
	STA $17			; B560	$85 $17
L2F562:
	LDX #$05		; B562	$A2 $05
	JSR Atk_char_w_wpn_ani	; B564	$20 $4B $AC	Set OAM buffer
	JSR Atk_pose		; B567	$20 $AE $B5	character attack pose ready C with weapon ??
	INC atk_ani_AB_tmp	; B56A	$E6 $16
	LDA $1C			; B56C	$A5 $1C		weapon x ??
	SEC			; B56E	$38
	SBC #$08		; B56F	$E9 $08
	STA $1C			; B571	$85 $1C		weapon x ??
	CMP #$A0		; B573	$C9 $A0		bow shot range ??
	BCS L2F562		; B575	$B0 $EB
	RTS			; B577	$60
; End of Attack_char_wpn_ani(Bow attack)

; Name	: SR_Mag_rdy
; Marks	: magic ready animation
;	  $18 = ??
;	  $19 = motion?? animation number?? +2
SR_Mag_rdy:	; Magic
	INY			; B578	C8
	INY			; B579	C8
	STY $19			; B57A	84 19
	LDX #$03		; B57C	A2 03
	JSR Play_snd_eft	; B57E	20 72 9E
	LDX #$0C		; B581	A2 0C
	STX $18			; B583	86 18
L2F585:
	LDA $18			; B585	A5 18
	AND #$01		; B587	29 01
	BEQ L2F58F		; B589	F0 04
	LDA #$0F		; B58B	A9 0F		color for motion A/B
	BNE L2F592		; B58D	D0 03
L2F58F:
	LDA $79C1		; B58F	AD C1 79	color palette sprite_2.1
L2F592:
	JSR Set_pal_x0		; B592	20 71 9D
	LDX $18			; B595	A6 18
	LDA Mag_motion_tbl,X	; B597	BD E8 B5
	STA atk_ani_AB_tmp	; B59A	85 16
	JSR Atk_pose		; B59C	20 AE B5	pose with magic ball
	DEC $18			; B59F	C6 18
	BPL L2F585		; B5A1	10 E2		loop
	LDA #$0F		; B5A3	A9 0F		color for motion A/B
	JSR Set_pal_x0		; B5A5	20 71 9D
	JMP Apply_OAM_pal	; B5A8	4C 33 9E	wait for vblank (menu, oam & color update)
; End of SR_Mag_rdy
; End of Attack_char_wpn_ani(Magic attack ready)

; Name	; Atk_pose_snd
; SRC	: $26 = character index, $16 = atk_ani_AB_tmp
;	  $19 = 
; X	: Sound effect index
; Marks	: attack pose with weapon and sound effect process
Atk_pose_snd:
	JSR Play_snd_eft	; B5AB	$20 $72 $9E
; Name	: Atk_pose
; Marks	: attack pose with weapon
Atk_pose:
	LDX char_idx_atk	; B5AE	$A6 $26
	LDY #$38		; B5B0	$A0 $38
	LDA atk_ani_AB_tmp	; B5B2	$A5 $16		animation A/B
	AND #$01		; B5B4	$29 $01
	BEQ L2F5BA		; B5B6	$F0 $02
	LDY #$3E		; B5B8	$A0 $3E
L2F5BA:
	TYA			; B5BA	$98
	JSR Set_char_OAM_buf	; B5BB	$20 $07 $AC	Set character graphic to OAM buffer(attack pose ??)
	LDX char_idx_atk	; B5BE	$A6 $26
	LDA $7BA2,X		; B5C0	$BD $A2 $7B	character graphics type
	BNE L2F5CC		; B5C3	$D0 $07
	LDX $19			; B5C5	$A6 $19		attack type 2 temp ??
	LDA atk_ani_AB_tmp	; B5C7	$A5 $16
	JSR Atk_char_w_wpn_ani	; B5C9	$20 $4B $AC
L2F5CC:
	JSR Apply_OAM_pal	; B5CC	$20 $33 $9E	MENU(sound) -> Wait NMI -> Copy OAM -> Copy palette -> NMI end
	LDA gfx_delay_cnt	; B5CF	$A5 $17		motion delay count
	JMP Gfx_delay		; B5D1	$4C $1F $9E	attack pose motion delay
; End of Atk_pose
; End of Atk_pose_snd

;B5D4 - data block - jump address[5:0-4]
Atk_motion_sr:
.word SR_Normal			; B5D4	$E5 $B4
.word SR_Normal			; B5D6	$E5 $B4
.word SR_Fist			; B5D8	$FC $B4
.word SR_Bow			; B5DA	$13 $B5
.word SR_Mag_rdy		; B5DC	$78 $B5

;B5DE - data block = weapon action type - 00h-04h = right hand, 05h-09h = left hand
Atk_motion_tbl:
.byte $00,$01,$03,$04,$05,$00,$02,$03,$04,$05
;B5E8
Mag_motion_tbl:
.byte $09,$08,$07,$06,$05,$04,$03,$02,$05,$04,$03,$02,$01,$00

; Name	: Magic_ani
; Marks	:
Magic_ani:
	JSR Magic_ani_		; B5F6	$20 $FF $B5
	JSR Rst_all_act_OAM_buf	; B5F9	$20 $E7 $9D
	JMP Apply_OAM_pal	; B5FC	$4C $33 $9E
; End of Magic_ani

; Name	: Magic_ani_
; Marks	: 1st +$00 = pointers to magic animation graphics
; SRC	: +$02 = pointers to graphics buffer address($7600)
; DEST	: 2nd +$00 = pointers to PPU
;	  use BANK 09
Magic_ani_:
	LDA atk_ani_id		; B5FF	$AD $B0 $7C
	CMP #$18		; B602	$C9 $18
	BCS L2F63F		; B604	$B0 $39		branch if animation not defined ?? (max is 17h)
	ASL			; B606	$0A
	TAX			; B607	$AA
	LDA Mag_ani_p,X		; B608	$BD $62 $B6	pointers to magic animation graphics
	STA $00			; B60B	$85 $00
	LDA Mag_ani_p+1,X	; B60D	$BD $63 $B6	BANK 09/ (magic animation tile)
	STA $01			; B610	$85 $01
	LDX #$00		; B612	$A2 $00		start index(7600)
	LDY #$C0 		; B614	$A0 $C0		size to copy(load 12 tiles)
	JSR Copy_char_tile	; B616	$20 $BA $FB	copy sprite graphics to buffer
	LDA #$40		; B619	$A9 $40
	STA $00			; B61B	$85 $00
	LDA #$04		; B61D	$A9 $04
	STA $01			; B61F	$85 $01		Set PPU address to $0440: $00(ADDR)
	JSR Set_02_gfxbuf	; B621	$20 $C6 $9D
L2F624:
	JSR Wait_MENU_snd	; B624	$20 $5B $FD	wait for first menu scanline
	LDX #$60		; B627	$A2 $60
	JSR Apply_OAM_buf	; B629	$20 $BD $9D
	TYA			; B62C	$98
	CLC			; B62D	$18
	ADC $02			; B62E	$65 $02
	STA $02			; B630	$85 $02
	TYA			; B632	$98
	CLC			; B633	$18
	ADC $00			; B634	$65 $00
	STA $00			; B636	$85 $00		address add 06h on $00(ADDR), $02(ADDR)
	JSR Wait_NMI_end	; B638	$20 $46 $FD	wait for first battlefield scanline
	LDA $00			; B63B	$A5 $00
	BNE L2F624		; B63D	$D0 $E5		loop for copy to PPU
L2F63F:
	JSR Rst_all_act_OAM_buf	; B63F	$20 $E7 $9D
	JSR Apply_OAM		; B642	$20 $2A $9E	wait for vblank (menu & oam update)
	LDX $7CB1		; B645	$AE $B1 $7C	attack animation palette
	LDY #$19		; B648	$A0 $19		sprite palette 2
	JSR Set_wpn_pal		; B64A	$20 $03 $FC	load battle palette
	JSR Apply_OAM_pal	; B64D	$20 $33 $9E	wait for vblank (menu, oam & color update)
	LDA atk_ani_id		; B650	$AD $B0 $7C
	ASL			; B653	$0A
	TAX			; B654	$AA
	LDA Mag_SR_tbl,X	; B655	$BD $92 $B6	magic animation jump table
	STA $00			; B658	$85 $00
	LDA Mag_SR_tbl+1,X	; B65A	$BD $93 $B6
	STA $01			; B65D	$85 $01
	.byte $6C,$00,$00
	;JMP ($0000)		; B65F	$6C $00 $00
; End of Magic_ani_

;$B662 - data block = pointers to magic animation graphics
; BANK 09/8860-9D80
Mag_ani_p:
.byte $00,$97
.byte $C0,$97
.byte $80,$96
.byte $80,$95
.byte $00,$96
.byte $40,$95
.byte $00,$95
.byte $00,$90
.byte $00,$94
.byte $C0,$95
.byte $80,$93
.byte $E0,$94
.byte $80,$94
.byte $00,$90
.byte $00,$90
.byte $00,$90
.byte $C0,$9D
.byte $80,$9D
.byte $00,$90
.byte $00,$90
.byte $00,$90
.byte $60,$88
.byte $60,$93
.byte $60,$88
; End of Mag_ani_p

;$B692 - data block = magic animation jump table
Mag_SR_tbl:
.word SR_B8FB			; B692	$FB $B8
.word SR_B9B4			; B694	$B4 $B9
.word SR_BA3D			; B696	$3D $BA
.word SR_BA53			; B698	$53 $BA
.word SR_BA56			; B69A	$56 $BA
.word SR_BA65			; BA9C	$65 $BA
.word SR_BB61			; BA9E	$61 $BB
.word SR_BBAC			; BAA0	$AC $BB
.word SR_BBD3			; BAA2	$D3 $BB
.word SR_BBE9			; BAA4	$E9 $BB
.word SR_BBF8			; BAA6	$F8 $BB
.word SR_BC07			; BAA8	$07 $BC
.word SR_BC16			; BAAA	$16 $BC
.word SR_BED8			; B6AC	$D8 $BE
.word SR_BED8			; B6AE	$D8 $BE
.word SR_BED8			; B6B0	$D8 $BE
.word SR_BCC0			; B6B2	$C0 $BC
.word SR_BCFF			; B6B4	$FF $BC
.word SR_BD31			; B6B6	$31 $BD
.word SR_BD31			; B6B8	$31 $BD
.word SR_BD31			; B6BA	$31 $BD
.word SR_BD9D			; B6BC	$9D $BD
.word SR_BEB0			; B6BE	$B0 $BE
.word SR_BEC4			; BEC0	$C4 $BE
; End of Mag_SR_tbl

; Marks	: unused ??
	RTS 			; B6C2	$60
;

; Marks	: Magic animation last ??
;	  $18 = repeat count ?? compare value ??
;	  $1B = ?? compare value ??
JB6C3:
	LDA $29			; B6C3	$A5 $29
	CMP #$08		; B6C5	$C9 $08
	BCC L2F6CB		; B6C7	$90 $02
	LDA #$07		; B6C9	$A9 $07
L2F6CB:
	ORA #$01		; B6CB	$09 $01
JB6CD:
	STA $18			; B6CD	$85 $18
	LDX #$01		; B6CF	$A2 $01
	JSR Fill_gfx_buf	; B6D1	$20 $E5 $B8
	JSR Calc_XY		; B6D4	$20 $FE $B6
	LDX $18			; B6D7	$A6 $18
	JSR Set_rnd_gfx_buf	; B6D9	$20 $14 $B8
	LDA $14			; B6DC	$A5 $14
	LDX $18			; B6DE	$A6 $18
	JSR Set_rnd_data	; B6E0	$20 $4C $B8
	JSR Play_mag_snd_eft	; B6E3	$20 $6B $9E	play magic sound effect
	LDA $12			; B6E6	$A5 $12
	JSR Set_frm_data	; B6E8	$20 $AD $B8
L2F6EB:
	JSR Copy_OAM_buf	; B6EB	$20 $6A $B8
	LDA $13			; B6EE	$A5 $13	$	number of frames to wait
	JSR Gfx_delay		; B6F0	$20 $1F $9E	wait
	JSR Make_mi		; B6F3	$20 $27 $B7
	JSR Search_X		; B6F6	$20 $46 $B7
	CMP #$FF		; B6F9	$C9 $FF
	BEQ L2F6EB		; B6FB	$F0 $EE		loop
	RTS			; B6FD	$60
; End of Magic_ani

; Name	: Calc_XY
; Marks	:
Calc_XY:
	LDA #$08		; B6FE	$A9 $08
	STA $00			; B700	$85 $00
	STA $01			; B702	$85 $01
	JSR Target_to_mob_id	; B704	$20 $01 $9E
	LDA mob_widths,X	; B707	$BD $8A $7B
	ASL			; B70A	$0A
	ASL			; B70B	$0A
	STA $02			; B70C	$85 $02
	LDA mob_heights,X	; B70E	$BD $82 $7B
	ASL			; B711	$0A
	ASL			; B712	$0A
	STA $03			; B713	$85 $03
	JSR Set_XY_pos		; B715	$20 $C8 $B7
	LDX $27			; B718	$A6 $27		target id ??
	CPX #$04		; B71A	$E0 $04
	BCC L2F726		; B71C	$90 $08		branch if player
	DEC $0C			; B71E	$C6 $0C
	DEC $0C			; B720	$C6 $0C
	DEC $0D			; B722	$C6 $0D
	DEC $0D			; B724	$C6 $0D
L2F726:
	RTS			; B726	$60
; Calc_XY

; Name	: Make_mi
; Marks	: $18, $1B = ??
Make_mi:
	LDX #$00		; B727	$A2 $00
L2F729:
	INC $7630,X		; B729	$FE $30 $76
	LDA $7630,X		; B72C	$BD $30 $76
	BMI L2F73D		; B72F	$30 $0C
	INC $7620,X		; B731	$FE $20 $76
	CMP $1B			; B734	$C5 $1B
	BCC L2F73D		; B736	$90 $05
	LDA #$80		; B738	$A9 $80
	STA $7620,X		; B73A	$9D $20 $76
L2F73D:
	STA $7630,X		; B73D	$9D $30 $76
	INX			; B740	$E8
	CPX $18			; B741	$E4 $18
	BNE L2F729		; B743	$D0 $E4		loop
	RTS			; B745	$60
; End of Make_mi

; Name	: Search_X
; Ret	: A = ??(00h, FFh, ??)
; Marks	: $18 = repeat count ?? compare value ??
Search_X:
	LDX #$00		; B746	$A2 $00
	TXA			; B748	$8A
L2F749:
	LDY $7620,X		; B749	$BC $20 $76
	CPY #$80		; B74C	$C0 $80
	BEQ L2F752		; B74E	$F0 $02
	LDA #$FF		; B750	$A9 $FF
L2F752:
	INX			; B752	$E8
	CPX $18			; B753	$E4 $18
	BNE L2F749		; B755	$D0 $F2		loop
	RTS			; B757	$60
; End of Search_X

; Name	: Set_OAM_buf_tbl
; X	: OAM table offset
; Y	: OAM buffer offset
; Marks	: Set OAM buffer from table
;	  $01=Y offset, $00=X offset
Set_OAM_buf_tbl:
	LDA OAM_Y_tbl,X		; B758	$BD $FA $93
	CLC			; B75B	$18
	ADC $01			; B75C	$65 $01
	STA $0200,Y		; B75E	$99 $00 $02	OAM Y
	LDA OAM_INDEX_tbl,X	; B761	$BD $7A $94
	STA $0201,Y		; B764	$99 $01 $02	OAM INDEX
	LDA OAM_ATTR_tbl,X	; B767	$BD $FA $94
	STA $0202,Y		; B76A	$99 $02 $02	OAM ATTR
	LDA OAM_X_tbl,X		; B76D	$BD $7A $95
	CLC			; B770	$18
	ADC $00			; B771	$65 $00
	STA $0203,Y		; B773	$99 $03 $02	OAM X
	JMP Y_inc4		; B776	$4C $FC $9D
; End of Set_OAM_buf_tbl

; Name	: Set_OAM_buf_00
; Marks	: $00 = X, $01 = Y, $02 = INDEX
Set_OAM_buf_00:
	LDY #$10		; B779	$A0 $10
	LDA $01			; B77B	$A5 $01
	STA $0200,Y		; B77D	$99 $00 $02	OAM Y
	LDA $02			; B780	$A5 $02
	STA $0201,Y		; B782	$99 $01 $02	OAM INDEX
	LDA #$02		; B785	$A9 $02
	STA $0202,Y		; B787	$99 $02 $02	OAM ATTR
	LDA $00			; B78A	$A5 $00
	STA $0203,Y		; B78C	$99 $03 $02	OAM X
	JMP Y_inc4		; B78F	$4C $FC $9D
; End of Set_OAM_buf_00

; Name	: Set_mob_pal
; Marks	: $00 = monster X
;	  $01 = monster Y
;	  $03 = step init value, $04 = loop count
;	  Set monster palette ??
Set_mob_pal:
	JSR Rst_all_act_OAM_buf	; B792	$20 $E7 $9D
	JSR Target_to_mob_id	; B795	$20 $01 $9E
	LDA mob_widths,X	; B798	$BD $8A $7B
	LSR			; B79B	$4A
	CLC			; B79C	$18
	ADC mob_x_poss,X	; B79D	$7D $9A $7B
	ASL			; B7A0	$0A
	ASL			; B7A1	$0A
	ASL			; B7A2	$0A
	STA $00			; B7A3	$85 $00
	LDA mob_heights,X	; B7A5	$BD $82 $7B
	LSR			; B7A8	$4A
	CLC			; B7A9	$18
	ADC mob_y_poss,X	; B7AA	$7D $92 $7B
	ASL			; B7AD	$0A
	ASL			; B7AE	$0A
	ASL			; B7AF	$0A
	STA $01			; B7B0	$85 $01
	LDY $7B7A,X		; B7B2	$BC $7A $7B	monster palette table ??[8]
	LDX $7B56,Y		; B7B5	$BE $56 $7B	monster palette 1,2,3,4
	LDY #$19		; B7B8	$A0 $19	$	sprite palette 2
	JSR Set_wpn_pal		; B7BA	$20 $03 $FC	load battle palette
	LDA #$00		; B7BD	$A9 $00
	STA $03			; B7BF	$85 $03
	LDA #$10		; B7C1	$A9 $10
	STA $04			; B7C3	$85 $04
	JMP Apply_OAM_pal	; B7C5	$4C $33 $9E	wait for vblank (menu, oam & color update)
; End of Set_mob_pal

; Name	: Set_XY_pos
; SRC	: $00,$01,$02 = monster width,$03 = monster height
; DEST	: $0A,$0B,$00,$01
; Marks	: $0A,$00 = X position
;	  $0B,$01 = Y position
Set_XY_pos:
	JSR Get_XY_pos_		; B7C8	$20 $D4 $B7
	STA $0A			; B7CB	$85 $0A
	STY $0B			; B7CD	$84 $0B
	STA $00			; B7CF	$85 $00
	STY $01			; B7D1	$84 $01
	RTS			; B7D3	$60
; End of Set_XY_pos

; Name	: Get_XY_pos_
; Ret	: Y = y position, A = x position
; Marks	: $01=??, $02=??, $03=??, $04=??
Get_XY_pos_:
	LDX $27			; B7D4	$A6 $27		target id ??
	CPX #$04		; B7D6	$E0 $04
	BCS L2F7EF		; B7D8	$B0 $15		branch if monster
	LDY #$03		; B7DA	$A0 $03
	STY $0D			; B7DC	$84 $0D
	DEY			; B7DE	$88
	STY $0C			; B7DF	$84 $0C
	LDA char_y_pos,X	; B7E1	$BD $CE $7B
	SEC			; B7E4	$38
	SBC $01			; B7E5	$E5 $01
	TAY			; B7E7	$A8
	LDA char_x_cpos,X	; B7E8	$BD $CA $7B
	SEC			; B7EB	$38
	SBC $00			; B7EC	$E5 $00
	RTS			; B7EE	$60
; End of Get_XY_pos_
L2F7EF:
	JSR X_dec4		; B7EF	$20 $03 $9E
	LDA mob_heights,X	; B7F2	$BD $82 $7B
	STA $0D			; B7F5	$85 $0D
	LSR			; B7F7	$4A
	CLC			; B7F8	$18
	ADC mob_y_poss,X	; B7F9	$7D $92 $7B
	ASL			; B7FC	$0A
	ASL			; B7FD	$0A
	ASL			; B7FE	$0A
	SEC			; B7FF	$38
	SBC $03			; B800	$E5 $03
	TAY			; B802	$A8
	LDA mob_widths,X	; B803	$BD $8A $7B
	STA $0C			; B806	$85 $0C
	LSR			; B808	$4A
	CLC			; B809	$18
	ADC mob_x_poss,X	; B80A	$7D $9A $7B
	ASL			; B80D	$0A
	ASL			; B80E	$0A
	ASL			; B80F	$0A
	SEC			; B810	$38
	SBC $02			; B811	$E5 $02
	RTS			; B813	$60
; End of Get_XY_pos_

; Name	: Set_rnd_gfx_buf
; X	: repeat count
; Marks	: Set random data
;	  $0C,$0D = max value for random
Set_rnd_gfx_buf:
	DEX			; B814	$CA
	STX $09			; B815	$86 $09
	JSR Apply_OAM		; B817	$20 $2A $9E	wait for vblank (menu & oam update)
L2F81A:
	LDX #$00		; B81A	$A2 $00
	LDA $0C			; B81C	$A5 $0C
	JSR Random		; B81E	$20 $11 $FD	random (X..A)
	LDY $09			; B821	$A4 $09		index
	ASL			; B823	$0A
	ASL			; B824	$0A
	ASL			; B825	$0A
	ADC $0A			; B826	$65 $0A
	STA $7600,Y		; B828	$99 $00 $76
	LDX #$00		; B82B	$A2 $00
	LDA $0D			; B82D	$A5 $0D
	JSR Random		; B82F	$20 $11 $FD	random (X..A)
	LDY $09			; B832	$A4 $09		index
	ASL			; B834	$0A
	ASL			; B835	$0A
	ASL			; B836	$0A
	ADC $0B			; B837	$65 $0B
	STA $7610,Y		; B839	$99 $10 $76
	LDA $09			; B83C	$A5 $09
	AND #$02		; B83E	$29 $02
	BNE L2F845		; B840	$D0 $03
	JSR Apply_OAM		; B842	$20 $2A $9E	wait for vblank (menu & oam update)
L2F845:
	DEC $09			; B845	$C6 $09
	BPL L2F81A		; B847	$10 $D1		loop
	JMP Apply_OAM		; B849	$4C $2A $9E	wait for vblank (menu & oam update)
; End of Set_rnd_gfx_buf

; Name	: Set_rnd_data
; A	:
; X	: repeat count
; Marks	: Set random data 7630,X
Set_rnd_data:
	STA $1C			; B84C	$85 $1C
	DEX			; B84E	$CA
	STX $1D			; B84F	$86 $1D
	JSR Apply_OAM		; B851	$20 $2A $9E	wait for vblank (menu & oam update)
L2F854:
	LDX #$00		; B854	$A2 $00
	LDA $1C			; B856	$A5 $1C
	JSR Random		; B858	$20 $11 $FD	random (X..A)	0-28
	SEC			; B85B	$38
	SBC $1C			; B85C	$E5 $1C
	LDX $1D			; B85E	$A6 $1D
	STA $7630,X		; B860	$9D $30 $76
	DEC $1D			; B863	$C6 $1D
	BPL L2F854		; B865	$10 $ED		loop
	JMP Apply_OAM		; B867	$4C $2A $9E	wait for vblank (menu & oam update)
; End of Set_rnd_data

; Name	: Copy_OAM_buf
; Marks	: $1A=loop counter=$03(temp)
;	  $18=loop counter=$02(temp)
Copy_OAM_buf:
	JSR Rst_all_act_OAM_buf	; B86A	$20 $E7 $9D
	LDA #$10		; B86D	$A9 $10
	STA $19			; B86F	$85 $19
	LDY #$00		; B871	$A0 $00
L2F873:
	STY $02			; B873	$84 $02
	LDA $7600,Y		; B875	$B9 $00 $76
	STA $00			; B878	$85 $00		x offset
	LDA $7610,Y		; B87A	$B9 $10 $76
	STA $01			; B87D	$85 $01		y offset
	LDA $1A			; B87F	$A5 $1A
	STA $03			; B881	$85 $03
	LDA $7630,Y		; B883	$B9 $30 $76
	BMI L2F8A5		; B886	$30 $1D
	LDA $7620,Y		; B888	$B9 $20 $76
	BMI L2F8A5		; B88B	$30 $18
	JSR Low_to_high		; B88D	$20 $A4 $AD	asl4
	TAX			; B890	$AA
L2F891:
	STX $04			; B891	$86 $04
	LDA $7640,X		; B893	$BD $40 $76
	TAX			; B896	$AA		table offset(source)
	LDY $19			; B897	$A4 $19		OAM buffer offset(dest)
	JSR Set_OAM_buf_tbl	; B899	$20 $58 $B7
	STY $19			; B89C	$84 $19
	LDX $04			; B89E	$A6 $04
	INX			; B8A0	$E8
	DEC $03			; B8A1	$C6 $03
	BNE L2F891		; B8A3	$D0 $EC		loop
L2F8A5:
	LDY $02			; B8A5	$A4 $02
	INY			; B8A7	$C8
	CPY $18			; B8A8	$C4 $18
	BNE L2F873		; B8AA	$D0 $C7		loop
	RTS			; B8AC	$60
; End of Copy_OAM_buf

; Name	: Set_frm_data
; A	: frame data index
; Marks	: +$1C = frame data pointer
; DEST	: $7640,X = 
;	  copy some data
Set_frm_data:
	ASL			; B8AD	$0A
	TAX			; B8AE	$AA
	LDA Frm_data_tbl,X	; B8AF	$BD $25 $BF
	STA $1C			; B8B2	$85 $1C
	LDA Frm_data_tbl+1,X	; B8B4	$BD $26 $BF
	STA $1D			; B8B7	$85 $1D
	LDY #$00		; B8B9	$A0 $00
	LDA ($1C),Y		; B8BB	$B1 $1C		count ??
	STA $1A			; B8BD	$85 $1A
	INY			; B8BF	$C8
	LDA ($1C),Y		; B8C0	$B1 $1C		count ??
	STA $1B			; B8C2	$85 $1B
	STA $00			; B8C4	$85 $00
	INY			; B8C6	$C8
	LDX #$00		; B8C7	$A2 $00
L2F8C9:
	LDA $1A			; B8C9	$A5 $1A
	STA $01			; B8CB	$85 $01
L2F8CD:
	LDA ($1C),Y		; B8CD	$B1 $1C
	STA $7640,X		; B8CF	$9D $40 $76
	INY			; B8D2	$C8
	INX			; B8D3	$E8
	DEC $01			; B8D4	$C6 $01
	BNE L2F8CD		; B8D6	$D0 $F5		loop
	DEX			; B8D8	$CA
	TXA			; B8D9	$8A
	AND #$F0		; B8DA	$29 $F0
	CLC			; B8DC	$18
	ADC #$10		; B8DD	$69 $10
	TAX			; B8DF	$AA
	DEC $00			; B8E0	$C6 $00
	BNE L2F8C9		; B8E2	$D0 $E5		loop
	RTS			; B8E4	$60
; End of Set_frm_data

; Name	: Fill_gfx_buf
; X	: fill data
; DEST	: $7600,Y(start from $7620)
; Marks	: $7620-$762F = FFh, $7630-$763F = X
;	  file text 1 char ??
Fill_gfx_buf:
	LDY #$20		; B8E5	$A0 $20
	LDA #$FF		; B8E7	$A9 $FF
L2F8E9:
	STA $7600,Y		; B8E9	$99 $00 $76
	INY			; B8EC	$C8
	CPY #$30		; B8ED	$C0 $30
	BNE L2F8E9		; B8EF	$D0 $F8		loop
	TXA			; B8F1	$8A
L2F8F2:
	STA $7600,Y		; B8F2	$99 $00 $76
	INY			; B8F5	$C8
	CPY #$40		; B8F6	$C0 $40
	BNE L2F8F2		; B8F8	$D0 $F8		loop
	RTS			; B8FA	$60
; End of Fill_gfx_buf

; Marks	: magic animation
SR_B8FB:
	LDA $29			; B8FB	$A5 $29
	CMP #$08		; B8FD	$C9 $08
	BCC L2F903		; B8FF	$90 $02
	LDA #$08		; B901	$A9 $08
L2F903:
	LSR			; B903	$4A
	STA $06			; B904	$85 $06
	LSR			; B906	$4A
	STA $07			; B907	$85 $07
	LDA #$10		; B909	$A9 $10
	STA $00			; B90B	$85 $00
	LDA #$E8		; B90D	$A9 $E8
	STA $01			; B90F	$85 $01
	LDA #$18		; B911	$A9 $18
	STA $02			; B913	$85 $02
	LDA #$00		; B915	$A9 $00
	STA $03			; B917	$85 $03
	JSR Set_XY_pos		; B919	$20 $C8 $B7
	LDA $27			; B91C	$A5 $27
	CMP #$04		; B91E	$C9 $04
	BCC L2F92B		; B920	$90 $09
	LDA mob_heights,X	; B922	$BD $82 $7B	monster heights
	ASL			; B925	$0A
	ASL			; B926	$0A
	ADC $0B			; B927	$65 $0B
	STA $0B			; B929	$85 $0B
L2F92B:
	LDA #$02		; B92B	$A9 $02
	SEC			; B92D	$38
	SBC $07			; B92E	$E5 $07
	ASL			; B930	$0A
	ASL			; B931	$0A
	ASL			; B932	$0A
	ADC $0A			; B933	$65 $0A
	STA $0A			; B935	$85 $0A
	LDX $06			; B937	$A6 $06
	LDA DB9AA,X		; B939	$BD $AA $B9
	STA $0C			; B93C	$85 $0C
	STA $17			; B93E	$85 $17
	LDA DB9AF,X		; B940	$BD $AF $B9
	STA $0D			; B943	$85 $0D
	STA $16			; B945	$85 $16
	TXA			; B947	$8A
	ASL			; B948	$0A
	ADC #$03		; B949	$69 $03
	LDX #$07		; B94B	$A2 $07
L2F94D:
	STA $0E,X		; B94D	$95 $0E
	EOR #$01		; B94F	$49 $01
	DEX			; B951	$CA
	BPL L2F94D		; B952	$10 $F9
	JSR Play_mag_snd_eft	; B954	$20 $6B $9E	play magic sound effect
	LDX #$00		; B957	$A2 $00
L2F959:
	STX $18			; B959	$86 $18
	JSR Rst_all_act_OAM_buf	; B95B	$20 $E7 $9D
	LDA $0A			; B95E	$A5 $0A
	STA $08			; B960	$85 $08
	LDY $07			; B962	$A4 $07
	INY			; B964	$C8
	STY $19			; B965	$84 $19
	LDY #$10		; B967	$A0 $10
L2F969:
	LDX $18			; B969	$A6 $18
	LDA $0C,X		; B96B	$B5 $0C
	LSR			; B96D	$4A
	PHP			; B96E	$08
	ASL			; B96F	$0A
	ADC #$02		; B970	$69 $02
	STA $1A			; B972	$85 $1A
	LSR			; B974	$4A
	ASL			; B975	$0A
	ASL			; B976	$0A
	ASL			; B977	$0A
	STA $02			; B978	$85 $02
	LDA $0B			; B97A	$A5 $0B
	SEC			; B97C	$38
	SBC $02			; B97D	$E5 $02
	STA $01			; B97F	$85 $01
	LDA $08			; B981	$A5 $08
	STA $00			; B983	$85 $00
	CLC			; B985	$18
	ADC #$10		; B986	$69 $10
	STA $08			; B988	$85 $08
	LDX #$00		; B98A	$A2 $00
	PLP			; B98C	$28
	BCC L2F991		; B98D	$90 $02
	LDX #$0C		; B98F	$A2 $0C
L2F991:
	JSR Set_OAM_buf_tbl	; B991	$20 $58 $B7
	INX			; B994	$E8
	DEC $1A			; B995	$C6 $1A
	BNE L2F991		; B997	$D0 $F8
	DEC $19			; B999	$C6 $19
	BNE L2F969		; B99B	$D0 $CC
	LDA #$03		; B99D	$A9 $03
	JSR Gfx_delay		; B99F	$20 $1F $9E	wait 3 frames
	LDX $18			; B9A2	$A6 $18
	INX			; B9A4	$E8
	CPX #$0C		; B9A5	$E0 $0C
	BNE L2F959		; B9A7	$D0 $B0
	RTS			; B9A9	$60
; End of

; $B9AA - data block = ??
DB9AA:
.byte $00,$01,$03,$05,$07
; $B9AF
DB9AF:
.byte $01,$02,$04,$06,$08

SR_B9B4:
	LDX #$03		; B9B4	$A2 $03
L2F9B6:
	LDA $79B0,X		; B9B6	$BD $B0 $79
	STA $10,X		; B9B9	$95 $10
	DEX			; B9BB	$CA
	BPL L2F9B6		; B9BC	$10 $F8
	LDY #$04		; B9BE	$A0 $04
	LDX #$08		; B9C0	$A2 $08
	JSR Reset_pal		; B9C2	$20 $42 $97
	JSR Apply_OAM_pal	; B9C5	$20 $33 $9E	wait for vblank (menu,oam & color update)
	JSR Play_mag_snd_eft	; B9C8	$20 $6B $9E	play magic sound effect
	LDX #$05		; B9CB	$A2 $05
	STX $0E			; B9CD	$86 $0E
	STX $0F			; B9CF	$86 $0F
	LDX #$20		; B9D1	$A2 $20
	LDA #$C0		; B9D3	$A9 $C0
	JSR Random		; B9D5	$20 $11 $FD	random(X..A)
	STA $00			; B9D8	$85 $00
	LDA #$08		; B9DA	$A9 $08
	STA $01			; B9DC	$85 $01
L2F9DE:
	LDY #$10		; B9DE	$A0 $10
	STY $03			; B9E0	$84 $03
	LDX #$18		; B9E2	$A2 $18
L2F9E4:
	LDY $03			; B9E4	$A4 $03
	JSR Set_OAM_buf_tbl	; B9E6	$20 $58 $B7
	STY $03			; B9E9	$84 $03
	INX			; B9EB	$E8
	CPX #$24		; B9EC	$E0 $24
	BNE L2F9E4		; B9EE	$D0 $F4
	LDA #$01		; B9F0	$A9 $01
	JSR Gfx_delay		; B9F2	$20 $1F $9E	wait 1 frame
	JSR Rst_all_act_OAM_buf	; B9F5	$20 $E7 $9D
	LDA #$02		; B9F8	$A9 $02
	JSR Gfx_delay		; B9FA	$20 $1F $9E	wait 2 frames
	DEC $0E			; B9FD	$C6 $0E
	BNE L2F9DE		; B9FF	$D0 $DD
	LDX #$03		; BA01	$A2 $03
L2FA03:
	LDA $10,X		; BA03	$B5 $10
	STA $79B0,X		; BA05	$9D $B0 $79
	DEX			; BA08	$CA
	BPL L2FA03		; BA09	$10 $F8
	JSR Rst_all_act_OAM_buf	; BA0B	$20 $E7 $9D
	LDA #$03		; BA0E	$A9 $03
	JSR Gfx_delay		; BA10	$20 $1F $9E	wait 3 frames
	LDA #$FC		; BA13	$A9 $FC
	STA $00			; BA15	$85 $00
	LDA #$10		; BA17	$A9 $10
	STA $01			; BA19	$85 $01
	LDA #$18		; BA1B	$A9 $18
	STA $03			; BA1D	$85 $03
	LDA #$04		; BA1F	$A9 $04
	STA $02			; BA21	$85 $02
	JSR Set_XY_pos		; BA23	$20 $C8 $B7
	LDY #$10		; BA26	$A0 $10
	LDX #$26		; BA28	$A2 $26
L2FA2A:
	JSR Set_OAM_buf_tbl	; BA2A	$20 $58 $B7
	LDA $01			; BA2D	$A5 $01
	CLC			; BA2F	$18
	ADC #$08		; BA30	$69 $08
	STA $01			; BA32	$85 $01
	CPY #$24		; BA34	$C0 $24
	BNE L2FA2A		; BA36	$D0 $F2
	LDA #$03		; BA38	$A9 $03
	JMP Gfx_delay		; BA3A	$4C $1F $9E	wait 3 frames
SR_BA3D:
	LDA #$06		; BA3D	$A9 $06
	STA $14			; BA3F	$85 $14
	LDA #$01		; BA41	$A9 $01
	STA $12			; BA43	$85 $12
	LDA #$04		; BA45	$A9 $04
	STA $13			; BA47	$85 $13		number of frame to wait
	LDA $29			; BA49	$A5 $29
	LSR			; BA4B	$4A
	LSR			; BA4C	$4A
	ASL			; BA4D	$0A
	ADC #$07		; BA4E	$69 $07
	JMP JB6CD		; BA50	$4C $CD $B6
;

SR_BA53:
	JMP Init_mag_val	; BA53	$4C $16 $BF
;

SR_BA56:
	LDA #$06		; BA56	$A9 $06
	STA $14			; BA58	$85 $14
	LDA #$04		; BA5A	$A9 $04
	STA $12			; BA5C	$85 $12
	LDA #$04		; BA5E	$A9 $04
	STA $13			; BA60	$85 $13		number of frame to wait
	JMP JB6C3		; BA62	$4C $C3 $B6
; End of

SR_BA65:
	JSR Init_gfx_buf	; BA65	$20 $CF $9D
	JSR Target_to_mob_id	; BA68	$20 $01 $9E
	LDY mob_gfx_id,X	; BA6B	$BC $72 $7B
	LDA DBB38,Y		; BA6E	$B9 $38 $BB
	STA $02			; BA71	$85 $02
	LDA DBB48,Y		; BA73	$B9 $48 $BB
	STA $03			; BA76	$85 $03
	LDA #$10		; BA78	$A9 $10
	STA $00			; BA7A	$85 $00
	STA $01			; BA7C	$85 $01
	JSR Set_XY_pos		; BA7E	$20 $C8 $B7
	LDA #$09		; BA81	$A9 $09
	STA $12			; BA83	$85 $12
	LDA $0B			; BA85	$A5 $0B
	CLC			; BA87	$18
	ADC #$30		; BA88	$69 $30
	LDX $27			; BA8A	$A6 $27
	CPX #$04		; BA8C	$E0 $04
	BCC L2FAA7		; BA8E	$90 $17
	JSR X_dec4		; BA90	$20 $03 $9E
	LDY mob_heights,X	; BA93	$BC $82 $7B
	CPY #$07		; BA96	$C0 $07
	BCC L2FAA7		; BA98	$90 $0D
	ADC #$2F		; BA9A	$69 $2F
	ASL $12			; BA9C	$06 $12
	LDY mob_widths,X	; BA9E	$BC $8A $7B
	CPY #$07		; BAA1	$C0 $07
	BCC L2FAA7		; BAA3	$90 $02
	ASL $12			; BAA5	$06 $12
L2FAA7:
	STA $10			; BAA7	$85 $10
	LDY #$00		; BAA9	$A0 $00
L2FAAB:
	LDA DBB58,Y		; BAAB	$B9 $58 $BB
	JSR Get_nybble		; BAAE	$20 $07 $FD	get low/high nybble
	ASL			; BAB1	$0A
	ASL			; BAB2	$0A
	ASL			; BAB3	$0A
	ADC $0A			; BAB4	$65 $0A
	STA $76C0,Y		; BAB6	$99 $C0 $76
	STA $76C9,Y		; BAB9	$99 $C9 $76
	ADC #$30		; BABC	$69 $30
	STA $76D2,Y		; BABE	$99 $D2 $76
	STA $76DB,Y		; BAC1	$99 $DB $76
	TXA			; BAC4	$8A
	ASL			; BAC5	$0A
	ASL			; BAC6	$0A
	ASL			; BAC7	$0A
	ADC $0B			; BAC8	$65 $0B
	STA $7600,Y		; BACA	$99 $00 $76
	STA $7612,Y		; BACD	$99 $12 $76
	ADC #$30		; BAD0	$69 $30
	STA $7609,Y		; BAD2	$99 $09 $76
	STA $761B,Y		; BAD5	$99 $1B $76
	INY			; BAD8	$C8
	CPY #$09		; BAD9	$C0 $09
	BNE L2FAAB		; BADB	$D0 $CE
	JSR Apply_OAM		; BADD	$20 $2A $9E	wait for vblank (menu & oam update)
	JSR Play_mag_snd_eft	; BAE0	$20 $6B $9E	play magic sound effect
	LDA #$02		; BAE3	$A9 $02
	STA $03			; BAE5	$85 $03
	LDX #$44		; BAE7	$A2 $44
L2FAE9:
	STX $0E			; BAE9	$86 $0E
	LDA #$06		; BAEB	$A9 $06
	STA $11			; BAED	$85 $11
L2FAEF:
	LDX #$00		; BAEF	$A2 $00
	LDY #$10		; BAF1	$A0 $10
L2FAF3:
	LDA $03			; BAF3	$A5 $03
	EOR #$40		; BAF5	$49 $40
	STA $03			; BAF7	$85 $03
	LDA $0E			; BAF9	$A5 $0E
	STA $02			; BAFB	$85 $02
	LDA $7600,X		; BAFD	$BD $00 $76
	CLC			; BB00	$18
	ADC #$08		; BB01	$69 $08
	CMP $10			; BB03	$C5 $10
	BNE L2FB09		; BB05	$D0 $02
	LDA $0B			; BB07	$A5 $0B
L2FB09:
	STA $7600,X		; BB09	$9D $00 $76
	STA $01			; BB0C	$85 $01
	LDA $76C0,X		; BB0E	$BD $C0 $76
	STA $00			; BB11	$85 $00
	JSR Set_OAM_buf		; BB13	$20 $08 $9E	copy sprite to OAM buffer
	INX			; BB16	$E8
	CPX $12			; BB17	$E4 $12
	BNE L2FAF3		; BB19	$D0 $D8
	LDA #$01		; BB1B	$A9 $01
	JSR Gfx_delay		; BB1D	$20 $1F $9E	wait 1 frame
	DEC $11			; BB20	$C6 $11
	BNE L2FAEF		; BB22	$D0 $CB
	LDX $0E			; BB24	$A6 $0E
	INX			; BB26	$E8
	CPX #$48		; BB27	$E0 $48
	BNE L2FAE9		; BB29	$D0 $BE
	LDX $27			; BB2B	$A6 $27
	CPX #$04		; BB2D	$E0 $04
	BCC L2FB37		; BB2F	$90 $06
	JSR X_dec4		; BB31	$20 $03 $9E
	JSR Mob_dead		; BB34	$20 $51 $A9
L2FB37:
	RTS			; BB37	$60
; End of

;BB38 - data block = ?? width ??
DBB38:
.byte $18,$18,$18,$18,$18,$18,$18,$18
.byte $18,$30,$30,$30,$30,$30,$30,$30
; height ??
DBB48:
.byte $18,$18,$18,$18,$18,$18,$18,$18
.byte $30,$30,$30,$30,$30,$30,$30,$30

;BB58 - data block = ??
DBB58:
.byte $02,$11,$14,$23,$25,$30,$42,$44
.byte $51

SR_BB61:
	LDA #$01		;BB61	$A9 $01
	STA $18			;BB63	$85 $18
	LDX #$01		;BB65	$A2 $01
	JSR Fill_gfx_buf	;BB67	$20 $E5 $B8
	LDA #$00		;BB6A	$A9 $00 
	STA $7620		;BB6C	$8D $20 $76
	STA $7630		;BB6F	$8D $30 $76
	LDA #$04		;BB72	$A9 $04 
	STA $01			;BB74	$85 $01 
	LDA #$08		;BB76	$A9 $08 
	STA $00			;BB78	$85 $00 
	LDA #$0F		;BB7A	$A9 $0F 
	STA $03			;BB7C	$85 $03 
	LDA #$10		;BB7E	$A9 $10 
	STA $02			;BB80	$85 $02 
	JSR Set_XY_pos		;BB82	$20 $C8 $B7
	LDA $0A			;BB85	$A5 $0A 
	STA $7600		;BB87	$8D $00 $76
	LDY $0B			;BB8A	$A4 $0B 
	STY $7610		;BB8C	$8C $10 $76
	JSR Play_mag_snd_eft	;BB8F	$20 $6B $9E	play magic sound effect
	LDA #$03		;BB92	$A9 $03 
	JSR Set_frm_data	;BB94	$20 $AD $B8
	JSR Copy_OAM_buf	;BB97	$20 $6A $B8
	LDA #$04		;BB9A	$A9 $04 
	JSR Gfx_delay		;BB9C	$20 $1F $9E	wait 4 frames
	LDX $27			;BB9F	$A6 $27 
	CPX #$04		;BBA1	$E0 $04 
	BCC L2FBAB		;BBA3	$90 $06 
	JSR X_dec4		;BBA5	$20 $03 $9E
	JSR Mob_dead		;BBA8	$20 $51 $A9
L2FBAB:
	RTS			;BBAB	$60 
; End of

; Marks	: magic break - monster color change to gray scale
SR_BBAC:
	JSR Play_mag_snd_eft	;BBAC	$20 $6B $9E	play magic sound effect
	LDY target_id_tmp	;BBAF	$A4 $27
	CPY #$04		;BBB1	$C0 $04 
	BCC L2FBD2		;BBB3	$90 $1D		branch if player
	DEY			;BBB5	$88 
	DEY			;BBB6	$88 
	DEY			;BBB7	$88 
	DEY			;BBB8	$88 
	LDA #$03		;BBB9	$A9 $03 
	JSR Calc_mob_xy		;BBBB	$20 $16 $A2
	JSR Wait_MENUs_NMI	;BBBE	$20 $3F $9E	render menu and wait for vblank
	JSR Copy_l_attr		;BBC1	$20 $E4 $A1	copy left attribute table to ppu
	JSR Wait_NMI_end	;BBC4	$20 $46 $FD	wait for first battle field scanline
	LDA #$06		;BBC7	$A9 $06 $
	JSR Gfx_delay		;BBC9	$20 $1F $9E	wait 6 frames
	JSR Target_to_mob_id	;BBCC	$20 $01 $9E
	JSR Mob_dead		;BBCF	$20 $51 $A9
L2FBD2:
	RTS			;BBD2	$60 
; End of SR_BBAC

SR_BBD3:
	LDA #$08		;BBD3	$A9 $08 
	STA $14			;BBD5	$85 $14 
	LDA #$01		;BBD7	$A9 $01 
	STA $12			;BBD9	$85 $12 
	LDA #$06		;BBDB	$A9 $06 
	STA $13			;BBDD	$85 $13 
	LDA $29			;BBDF	$A5 $29
	LSR			;BBE1	$4A 
	LSR			;BBE2	$4A 
	ASL			;BBE3	$0A 
	ADC #$07		;BBE4	$69 $07 
	JMP JB6CD		;BBE6	$4C $CD $B6
;

SR_BBE9:
	LDA #$06		;BBE9	$A9 $06 
	STA $14			;BBEB	$85 $14 
	LDA #$05		;BBED	$A9 $05 
	STA $12			;BBEF	$85 $12 
	LDA #$05		;BBF1	$A9 $05 
	STA $13			;BBF3	$85 $13 
	JMP JB6C3		;BBF5	$4C $C3 $B6
;

SR_BBF8:
	LDA #$06		;BBF8	$A9 $06 
	STA $14			;BBFA	$85 $14 
	LDA #$06		;BBFC	$A9 $06 
	STA $12			;BBFE	$85 $12 
	LDA #$06		;BC00	$A9 $06 
	STA $13			;BC02	$85 $13 
	JMP JB6C3		;BC04	$4C $C3 $B6
;

SR_BC07:
	LDA #$06		;BC07	$A9 $06 
	STA $14			;BC09	$85 $14 
	LDA #$07		;BC0B	$A9 $07 
	STA $12			;BC0D	$85 $12 
	LDA #$04		;BC0F	$A9 $04 
	STA $13			;BC11	$85 $13 
	JMP JB6C3		;BC13	$4C $C3 $B6
;

SR_BC16:
	LDA #$01		;BC16	$A9 $01 
	STA $18			;BC18	$85 $18
	LDX #$01		;BC1A	$A2 $01
	JSR Fill_gfx_buf	;BC1C	$20 $E5 $B8
	LDX $27			;BC1F	$A6 $27
	CPX #$04		;BC21	$E0 $04
	BCS L2FC3C		;BC23	$B0 $17
	LDA #$08		;BC25	$A9 $08
	STA $10			;BC27	$85 $10
	LDY #$03		;BC29	$A0 $03
	STY $0D			;BC2B	$84 $0D
	DEY			;BC2D	$88
	STY $0C			;BC2E	$84 $0C
	LDA char_y_pos,X	;BC30	$BD $CE $7B
	TAY			;BC33	$A8
	LDA char_x_cpos,X	;BC34	$BD $CA $7B
	SEC			;BC37	$38
	SBC #$08		;BC38	$E9 $08
	BNE L2FC63		;BC3A	$D0 $27
L2FC3C:
	LDA #$0E		;BC3C	$A9 $0E
	STA $10			;BC3E	$85 $10
	JSR X_dec4		;BC40	$20 $03 $9E
	LDA mob_heights,X	;BC43	$BD $82 $7B
	STA $0D			;BC46	$85 $0D
	LSR			;BC48	$4A
	CLC			;BC49	$18
	ADC mob_y_poss,X	;BC4A	$7D $92 $7B
	ASL			;BC4D	$0A
	ASL			;BC4E	$0A
	ASL			;BC4F	$0A
	SEC			;BC50	$38
	SBC #$0D		;BC51	$E9 $0D
	TAY			;BC53	$A8
	LDA mob_widths,X	;BC54	$BD $8A $7B
	STA $0C			;BC57	$85 $0C
	SEC			;BC59	$38
	SBC #$01		;BC5A	$E9 $01
	CLC			;BC5C	$18
	ADC mob_x_poss,X	;BC5D	$7D $9A $7B
	ASL			;BC60	$0A
	ASL			;BC61	$0A
	ASL			;BC62	$0A
L2FC63:
	STA $7600		;BC63	$8D $00 $76
	STY $7610		;BC66	$8C $10 $76
	STA $0A			;BC69	$85 $0A
	STY $0B			;BC6B	$84 $0B
	LDX #$00		;BC6D	$A2 $00
	LDA $29			;BC6F	$A5 $29
	CMP #$08		;BC71	$C9 $08
	BCC L2FC76		;BC73	$90 $01
	INX			;BC75	$E8
L2FC76:
	TXA			;BC76	$8A
	CLC			;BC77	$18
	ADC $10			;BC78	$65 $10
	JSR Set_frm_data	;BC7A	$20 $AD $B8
	LDA $29			;BC7D	$A5 $29
	LSR			;BC7F	$4A
	ASL			;BC80	$0A
	ORA #$01		;BC81	$09 $01
	STA $07			;BC83	$85 $07
	EOR #$FF		;BC85	$49 $FF
	TAX			;BC87	$AA
	STX $09			;BC88	$86 $09
	LDA #$00		;BC8A	$A9 $00
	STA $7620		;BC8C	$8D $20 $76
	STA $7630		;BC8F	$8D $30 $76
	STA $08			;BC92	$85 $08
	STA $0F			;BC94	$85 $0F
	JSR Play_mag_snd_eft	;BC96	$20 $6B $9E	play magic sound effect
	LDA $29			;BC99	$A5 $29
	STA $0E			;BC9B	$85 $0E
L2FC9D:
	JSR Copy_OAM_buf	;BC9D	$20 $6A $B8
	LDA #$01		;BCA0	$A9 $01
	JSR Gfx_delay		;BCA2	$20 $1F $9E	wait 1 frames
	LDX $0F			;BCA5	$A6 $0F
	LDA $07,X		;BCA7	$B5 $07
	CLC			;BCA9	$18
	ADC $7610		;BCAA	$6D $10 $76
	STA $7610		;BCAD	$8D $10 $76
	INX			;BCB0	$E8
	CPX #$03		;BCB1	$E0 $03
	BCC L2FCB7		;BCB3	$90 $02
	LDX #$00		;BCB5	$A2 $00
L2FCB7:
	STX $0F			;BCB7	$86 $0F
	DEC $0E			;BCB9	$C6 $0E
	BNE L2FC9D		;BCBB	$D0 $E0
	JMP Apply_OAM		;BCBD	$4C $2A $9E	wait for lvblank (menu & oam update)
;

; Marks	: $00 = ??
SR_BCC0:
	JSR Chk_mag_dead	;BCC0	$20 $FF $BE
	LDX $27			;BCC3	$A6 $27
	CPX #$04		;BCC5	$E0 $04
	BCS L2FCCA		;BCC7	$B0 $01
	RTS			;BCC9	$60
;
L2FCCA:
	JSR Set_mob_pal		;BCCA	$20 $92 $B7
L2FCCD:
	JSR Char_inc_step	;BCCD	$20 $DD $BC
	JSR Set_OAM_buf_00	;BCD0	$20 $79 $B7
	LDA #$02		;BCD3	$A9 $02
	JSR Gfx_delay		;BCD5	$20 $1F $9E	wait 2 frames
	DEC $04			;BCD8	$C6 $04
	BNE L2FCCD		;BCDA	$D0 $F1		loop
	RTS			;BCDC	$60
;

; Name	: Char_inc_step
; Marks	: $03 = step ??
Char_inc_step:
	LDA $03			;BCDD	$A5 $03
	AND #$07		;BCDF	$29 $07
	STA $03			;BCE1	$85 $03
	TAY			;BCE3	$A8		Y = 0-7
	LDA $00			;BCE4	$A5 $00
	SEC			;BCE6	$38
	SBC Mov_step,Y		;BCE7	$F9 $33 $93
	STA $00			;BCEA	$85 $00
	LDA $01			;BCEC	$A5 $01
	CLC			;BCEE	$18
	ADC Mov_y_step,Y	;BCEF	$79 $3B $93
	STA $01			;BCF2	$85 $01
	LDA Char_low_step,Y	;BCF4	$B9 $43 $93
	CLC			;BCF7	$18
	ADC #$43		;BCF8	$69 $43
	STA $02			;BCFA	$85 $02
	INC $03			;BCFC	$E6 $03
	RTS			;BCFE	$60
; End of Char_inc_step

; Marks	: $00 = ??
SR_BCFF:
	JSR Chk_mag_dead	;BCFF	$20 $FF $BE
	LDX $27			;BD02	$A6 $27
	CPX #$04		;BD04	$E0 $04
	BCS L2FD09		;BD06	$B0 $01
	RTS			;BD08	$60
;
L2FD09:
	JSR Set_mob_pal		;BD09	$20 $92 $B7
	LDA #$44		;BD0C	$A9 $44
	STA $02			;BD0E	$85 $02
L2FD10:
	JSR Inc_03		;BD10	$20 $20 $BD
	JSR Set_OAM_buf_00	;BD13	$20 $79 $B7
	LDA #$02		;BD16	$A9 $02
	JSR Gfx_delay		;BD18	$20 $1F $9E	wait 2 frames
	DEC $04			;BD1B	$C6 $04
	BNE L2FD10		;BD1D	$D0 $F1		loop
	RTS			;BD1F	$60
;

; Name	: Inc_03
; Marks	: $03 = step ??
Inc_03:
	LDA $03			;BD20	$A5 $03
	AND #$07		;BD22	$29 $07
	STA $03			;BD24	$85 $03
	DEC $00			;BD26	$C6 $00
	LDA $02			;BD28	$A5 $02
	EOR #$01		;BD2A	$49 $01
	STA $02			;BD2C	$85 $02
	INC $03			;BD2E	$E6 $03
	RTS			;BD30	$60
; End of Inc_03

SR_BD31:
	JSR Play_mag_snd_eft	;BD31	$20 $6B $9E	play magic sound effect
	LDA Pal_color		;BD34	$AD $B6 $93
	STA $01			;BD37	$85 $01
	LDY #$01		;BD39	$A0 $01
L2FD3B:
	STY $02			;BD3B	$84 $02
	LDX atk_ani_id		;BD3D	$AE $B0 $7C
	CPX #$13		;BD40	$E0 $13
	BEQ L2FD49		;BD42	$F0 $05
	LDA Pal_color,Y		;BD44	$B9 $B6 $93
	STA $39			;BD47	$85 $39
L2FD49:
	INY			;BD49	$C8
	CPX #$12		;BD4A	$E0 $12
	BEQ L2FD54		;BD4C	$F0 $06
	LDA Pal_color,Y		;BD4E	$B9 $B6 $93
	JSR Set_pal_x0		;BD51	$20 $71 $9D
L2FD54:
	INY			;BD54	$C8
	LDA Pal_color,Y		;BD55	$B9 $B6 $93
	INY			;BD58	$C8
	STY $02			;BD59	$84 $02
	JSR Gfx_delay		;BD5B	$20 $1F $9E	wait $02 frames
	LDY $02			;BD5E	$A4 $02
	DEC $01			;BD60	$C6 $01
	BNE L2FD3B		;BD62	$D0 $D7
	LDA #$0F		;BD64	$A9 $0F
	JSR Set_pal_x0		;BD66	$20 $71 $9D
	LDA #$00		;BD69	$A9 $00
	STA $39			;BD6B	$85 $39
	JSR Apply_OAM_pal	;BD6D	$20 $33 $9E	wait for vblank (menu,oam & color update)
	LDA atk_ani_id		;BD70	$AD $B0 $7C
	CMP #$14		;BD73	$C9 $14
	BEQ L2FD78		;BD75	$F0 $01
	RTS			;BD77	$60
;
L2FD78:
	LDY #$08		;BD78	$A0 $08
	LDA #$80		;BD7A	$A9 $80
	STA ($9F),Y		;BD7C	$91 $9F
	LDX $7CBB		;BD7E	$AE $BB $7C
	LDA $7D5E,X		;BD81	$BD $5E $7D
	SEC			;BD84	$38
	SBC #$04		;BD85	$E9 $04
	TAX			;BD87	$AA
	PHA			;BD88	$48
	LDA #$03		;BD89	$A9 $03
	STA $A5			;BD8B	$85 $A5
	JSR Mob_dead_ani	;BD8D	$20 $70 $A9
	PLA			;BD90	$68
	TAX			;BD91	$AA
	LDA #$FF		;BD92	$A9 $FF
	STA $7B62,X		;BD94	$9D $62 $7B
	DEC $7B4D		;BD97	$CE $4D $7B	decrement number of monsters remaining
	JMP Apply_OAM		;BD9A	$4C $2A $9E	wait for vblank (menu & oam update)
;

SR_BD9D:
	LDA #$03		;BD9D	$A9 $03
	STA $14			;BD9F	$85 $14
L2FDA1:
	JSR Data_fill_gfx_buf	;BDA1	$20 $AE $BD
	DEC $14			;BDA4	$C6 $14
	BNE L2FDA1		;BDA6	$D0 $F9
	JSR Mov_attack_effect	;BDA8	$20 $31 $B1
	JMP Apply_OAM		;BDAB	$4C $2A $9E	wait for vblank (menu & oam update)
;

; Name	: Data_fill_gfx_buf
; X	: data for fill in gfx buffer
; Marks	:
Data_fill_gfx_buf:
	JSR Fill_gfx_buf	;BDAE	$20 $E5 $B8
	LDA #$0B		;BDB1	$A9 $0B
	JSR Set_frm_data	;BDB3	$20 $AD $B8
	LDX #$03		;BDB6	$A2 $03
	STX $18			;BDB8	$86 $18
	LDY #$07		;BDBA	$A0 $07
	JSR Set_0A_gfx		;BDBC	$20 $47 $BE
	LDX $18			;BDBF	$A6 $18
L2FDC1:
	LDA $7610,X		;BDC1	$BD $10 $76
	STA $7710,X		;BDC4	$9D $10 $77
	LDA $7600,X		;BDC7	$BD $00 $76
	STA $7700,X		;BDCA	$9D $00 $77
	DEX			;BDCD	$CA
	BPL L2FDC1		;BDCE	$10 $F1
	LDY #$03		;BDD0	$A0 $03
	JSR Set_0A_gfx		;BDD2	$20 $47 $BE
	LDX $18			;BDD5	$A6 $18
L2FDD7:
	LDA $7700,X		;BDD7	$BD $00 $77
	SEC			;BDDA	$38
	SBC $7600,X		;BDDB	$FD $00 $76
	STA $7720,X		;BDDE	$9D $20 $77
	LDA $7710,X		;BDE1	$BD $10 $77
	SEC			;BDE4	$38
	SBC $7610,X		;BDE5	$FD $10 $76
	STA $7730,X		;BDE8	$9D $30 $77
	LSR			;BDEB	$4A
	STA $7740,X		;BDEC	$9D $40 $77
	DEX			;BDEF	$CA
	BPL L2FDD7		;BDF0	$10 $E5
	LDA #$7F		;BDF2	$A9 $7F
	LDX $18			;BDF4	$A6 $18
	JSR Set_rnd_data	;BDF6	$20 $4C $B8
L2FDF9:
	LDA #$08		;BDF9	$A9 $08
	STA $17			;BDFB	$85 $17
L2FDFD:
	JSR Mag_eft_calc	;BDFD	$20 $4F $BE
	DEC $17			;BE00	$C6 $17
	BNE L2FDFD		;BE02	$D0 $F9 
	JSR Copy_OAM_buf	;BE04	$20 $6A $B8
	JSR Apply_OAM		;BE07	$20 $2A $9E	wait for vblank (menu & oam update)
	LDX #$00		;BE0A	$A2 $00 
	LDY #$00		;BE0C	$A0 $00 
L2FE0E:
	LDA $7610,X		;BE0E	$BD $10 $76
	CMP $7710,X		;BE11	$DD $10 $77
	BEQ L2FE18		;BE14	$F0 $02 
	LDY #$FF		;BE16	$A0 $FF 
L2FE18:
	INX			;BE18	$E8 
	CPX $18			;BE19	$E4 $18 
	BNE L2FE0E		;BE1B	$D0 $F1 
	TYA			;BE1D	$98 
	BNE L2FDF9		;BE1E	$D0 $D9 
	JMP Apply_OAM		;BE20	$4C $2A $9E	wait for vblank (menu & oam update)
; End of Data_fill_gfx_buf

; Name	: Set_0A_
; Marks	: +$00 = BEA0 or BEA8
;	  $0A, $0B, $0C, $0D = ??
Set_0A_:
	LDX $27			; BE23	$A6 $27		target id
	CPX #$04		; BE25	$E0 $04
	BCS L2FE34		; BE27	$B0 $0B		branch if target is monster
	LDA #<DBEA0_player	; BE29	$A9 $A0
	STA $00			; BE2B	$85 $00
	LDA #>DBEA0_player	; BE2D	$A9 $BE
	STA $01			; BE2F	$85 $01
	JMP JBE3C		; BE31	$4C $3C $BE
L2FE34:
	LDA #<DBEA8_monster	; BE34	$A9 $A8
	STA $00			; BE36	$85 $00
	LDA #>DBEA8_monster	; BE38	$A9 $BE
	STA $01			; BE3A	$85 $01
JBE3C:
	LDX #$03		; BE3C	$A2 $03
L2FE3E:
	LDA ($00),Y		; BE3E	$B1 $00
	STA $0A,X		; BE40	$95 $0A
	DEY			; BE42	$88
	DEX			; BE43	$CA
	BPL L2FE3E		; BE44	$10 $F8		loop
	RTS			; BE46	$60
; End of

; Name	: Set_0A_gfx
; Marks	: set 0A,0B,0C,0D and random graphic buffer
Set_0A_gfx:
	JSR Set_0A_		; BE47	$20 $23 $BE
	LDX $18			; BE4A	$A6 $18
	JMP Set_rnd_gfx_buf	; BE4C	$4C $14 $B8
; End of Set_0A_gfx

; Name	: Mag_eft_calc
; Marks	:
Mag_eft_calc:
	LDX #$00		; BE4F	$A2 $00
L2FE51:
	STX $16			; BE51	$86 $16
	INC $7630,X		; BE53	$FE $30 $76
	LDA $7630,X		; BE56	$BD $30 $76
	BMI L2FE9A		; BE59	$30 $3F
	JSR Play_mag_snd_eft	; BE5B	$20 $6B $9E	play magic sound effect
	LDX $16			; BE5E	$A6 $16
	LDA #$00		; BE60	$A9 $00
	STA $7620,X		; BE62	$9D $20 $76
	STA $7630,X		; BE65	$9D $30 $76
	LDA $7610,X		; BE68	$BD $10 $76
	CMP $7710,X		; BE6B	$DD $10 $77
	BNE L2FE77		; BE6E	$D0 $07
	LDA #$80		; BE70	$A9 $80
	STA $7630,X		; BE72	$9D $30 $76
	BNE L2FE9A		; BE75	$D0 $23
L2FE77:
	INC $7610,X		; BE77	$FE $10 $76
	LDA $7740,X		; BE7A	$BD $40 $77
	CLC			; BE7D	$18
	ADC $7720,X		; BE7E	$7D $20 $77
	STA $7740,X		; BE81	$9D $40 $77
	CMP $7730,X		; BE84	$DD $30 $77
	BCC L2FE8C		; BE87	$90 $03
	INC $7600,X		; BE89	$FE $00 $76
L2FE8C:
	LDA $7740,X		; BE8C	$BD $40 $77
	CMP $7730,X		; BE8F	$DD $30 $77
	BCC L2FE97		; BE92	$90 $03
	SBC $7730,X		; BE94	$FD $30 $77
L2FE97:
	STA $7740,X		; BE97	$9D $40 $77
L2FE9A:
	INX			; BE9A	$E8
	CPX $18			; BE9B	$E4 $18		number of frame to wait
	BNE L2FE51		; BE9D	$D0 $B2		loop
	RTS			; BE9F	$60
; End of Mag_eft_calc

;$BEA0 - data block = 
DBEA0_player:
.BYTE $98,$00,$04,$02,$C0,$78,$06,$02
DBEA8_monster:
.byte $00,$00,$05,$02

; Marks	:
	RTS 			; BEAC	$60
	SEI			; BEAD	$78
	ASL $02			; BEAE	$06 $02
SR_BEB0:
	LDX $27			; BEB0	$A6 $27
	CPX #$04		; BEB2	$E0 $04
	BCC L2FEB7		; BEB4	$90 $01
	RTS			; BEB6	$60
L2FEB7:
	LDX #$0D		; BEB7	$A2 $0D
	JSR Play_snd_eft	; BEB9	$20 $72 $9E
	LDX $27			; BEBC	$A6 $27
	JSR Mov_attack_effect	; BEBE	$20 $31 $B1
	JMP Apply_OAM		; BEC1	$4C $2A $9E	wait for vblank (menu & oam update)
; End of

SR_BEC4:
	LDX $27			; BEC4	$A6 $27
	CPX #$04		; BEC6	$E0 $04
	BCC L2FECB		; BEC8	$90 $01
	RTS			; BECA	$60
;
L2FECB:
	LDX #$0D		; BECB	$A2 $0D
	JSR Play_snd_eft	; BECD	$20 $72 $9E
	LDX $27			; BED0	$A6 $27		target id ??
	JSR Mov_attack_effect	; BED2	$20 $31 $B1
	JMP Apply_OAM		; BED5	$4C $2A $9E	wait for vblank (menu & oam update)
;

SR_BED8:
	JSR Play_mag_snd_eft	; BED8	$20 $6B $9E	play magic sound effect
	LDX #$10		; BEDB	$A2 $10
L2FEDD:
	STX $04			; BEDD	$86 $04
	TXA			; BEDF	$8A
	LSR			; BEE0	$4A
	BCC L2FEE7		; BEE1	$90 $04
	LDA #$0F		; BEE3	$A9 $0F
	BNE L2FEEA		; BEE5	$D0 $03
L2FEE7:
	LDA $79C1		; BEE7	$AD $C1 $79	color palette sprite_2.1
L2FEEA:
	JSR Set_pal_x0		; BEEA	$20 $71 $9D
	LDA #$02		; BEED	$A9 $02
	JSR Gfx_delay		; BEEF	$20 $1F $9E	wait 2 frames
	LDX $04			; BEF2	$A6 $04
	DEX			; BEF4	$CA
	BNE L2FEDD		; BEF5	$D0 $E6
	LDA #$0F		; BEF7	$A9 $0F
	JSR Set_pal_x0		; BEF9	$20 $71 $9D
	JMP Apply_OAM_pal	; BEFC	$4C $33 $9E	wait for vblank (menu, oam & color update)
;

; Name	: Chk_mag_dead
; Marks	:
Chk_mag_dead:
	JSR Init_mag_val	; BEFF	$20 $16 $BF
	LDX $27			; BF02	$A6 $27		target id
	CPX #$04		; BF04	$E0 $04
	BCS L2FF09		; BF06	$B0 $01		branch if target is monster
	RTS			; BF08	$60
L2FF09:
	LDA $27			; BF09	$A5 $27		target id
	PHA			; BF0B	$48
	JSR X_dec4		; BF0C	$20 $03 $9E
	JSR Mob_dead		; BF0F	$20 $51 $A9
	PLA			; BF12	$68
	STA $27			; BF13	$85 $27		target id
	RTS			; BF15	$60
; End of Chk_mag_dead

; Name	: Init_mag_val
; Marks	:
Init_mag_val:
	LDA #$06		; BF16	$A9 $06
	STA $14			; BF18	$85 $14
	LDA #$0A		; BF1A	$A9 $0A
	STA $12			; BF1C	$85 $12
	LDA #$06		; BF1E	$A9 $06
	STA $13			; BF20	$85 $13		number of frames to wait
	JMP JB6C3		; BF22	$4C $C3 $B6
; End of Init_mag_val

;$BF25 - data block = pointers to frame data ???
;; [$BF25 : 0x2FF25 ]
Frm_data_tbl:
.word Frm_d00			; BF25	$45 $BF
.word Frm_d01			; BF27	$53 $BF
.word Frm_d02			; BF29	$5D $BF
.word Frm_d03			; BF2B	$75 $BF
.word Frm_d04			; BF2D	$67 $BF
.word Frm_d05			; BF2F	$87 $BF
.word Frm_d06			; BF31	$99 $BF
.word Frm_d07			; BF33	$AB $BF
.word Frm_d08			; BF35	$B5 $BF
.word Frm_d09			; BF37	$BA $BF
.word Frm_d10			; BF39	$BF $BF
.word Frm_d11			; BF3B	$CD $BF
.word Frm_d12			; BF3D	$D3 $BF
.word Frm_d13			; BF3F	$D7 $BF
.word Frm_d14			; BF41	$DB $BF
.word Frm_d15			; BF43	$E0 $BF

;$BF45 - data block = frame data ??
; 00h = count small loop, 01h = count big loop
Frm_d00:
.byte $04,$03
.byte $27,$6C,$6D,$6E,$28,$6F,$70,$71,$29
.byte $72,$73,$74
Frm_d01:
.byte $01,$08
.byte $00,$24,$25,$26,$27,$28,$29,$2A
Frm_d02:
.byte $02,$03
.byte $00
.byte $2B,$24,$2C,$25,$2D,$26,$2E
Frm_d04:
.byte $04,$03
.byte $00,$01,$2B,$2F,$25,$30,$2D
.byte $31,$27,$32,$33,$34
Frm_d03:
.byte $10,$01
.byte $0C,$0D,$3E,$3F,$0E,$0F,$40,$41,$42
.byte $43,$44,$45,$46,$47,$48,$49
Frm_d05:
.byte $04,$04
.byte $00,$0D,$2B,$4A,$24,$4B,$2C
.byte $4C,$25,$4D,$2D,$4E,$26,$4F,$2E,$50
Frm_d06:
.byte $04,$04
.byte $00,$01,$02,$03,$27
.byte $32,$33,$34,$51,$52,$53,$4A,$54,$55,$56,$57
Frm_d07:
.byte $04,$02
.byte $00,$58,$59
.byte $5A,$24,$4B,$2C,$5C
Frm_d08:
.byte $03,$01
.byte $00,$5B,$5D
Frm_d09:
.byte $03,$01
.byte $26,$5E,$5F
Frm_d10:
.byte $04,$03
.byte $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B
Frm_d11:
.byte $04,$01
.byte $00
.byte $01,$02,$03
Frm_d12:
.byte $02,$01
.byte $00,$01
Frm_d13:
.byte $02,$01
.byte $0C,$0D
Frm_d14:
.byte $03,$01
.byte $75,$76,$77
Frm_d15:
.byte $03,$01
.byte $78,$79,$7A

;BFE5 - data block = stale data
.byte $76,$77,$03,$01,$78,$79,$7A,$01,$00,$01,$02
.byte $01,$0C,$0D,$03,$01,$75,$76,$77,$03,$01,$78,$79,$7A,$FF,$F8,$FF
; ========== battle graphics code ($9600-$BFFF) END ==========
